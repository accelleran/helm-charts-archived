apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "acc-service-orchestrator.fullname" . }}
  labels:
    {{- include "acc-service-orchestrator.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "acc-service-orchestrator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "acc-service-orchestrator.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "acc-service-orchestrator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ tpl .Values.version	. }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{ if .Values.developerMode.enabled }}
          command:
            - sh
            - "-c"
            - |
              /bin/bash <<'EOF'
              echo "Running in Developer Mode!"
              echo "To start the Service Orchestrator, run the following command: /usr/bin/supervisord" > README.txt
              echo "/usr/bin/supervisord" > start-service-orchestrator.sh
              while true; do sleep 30; done;
              EOF
          {{ else }}
          command: ["/usr/bin/supervisord"]
          {{ end }}
          env:
            - name: KUBE_IP
              value: "{{ tpl .Values.kubeIp . }}"
            - name: DEFAULT_5G_VERSION
              value: "{{ tpl .Values.default5gVersion . }}"
            - name: DEFAULT_DEV_ENV_VERSION
              value: "{{ tpl .Values.defaultDevEnvVersion . }}"
          ports:
            - name: {{ .Values.service.name }}
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          {{ if and (.Values.developerMode.enabled) (.Values.developerMode.hostPath) }}
          volumeMounts:
            - name: dev-work-dir
              mountPath: /app/dev/
          {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if or (.Values.nodeSelector) (eq (tpl .Values.draxNodeSelectorEnabled .) "true") }}
      nodeSelector:
        {{ if .Values.nodeSelector }}
          {{- toYaml .Values.nodeSelector | nindent 8 }}
        {{ end }}
        {{ if eq (tpl .Values.draxNodeSelectorEnabled .) "true" }}
          {{- tpl (toYaml .Values.draxNodeSelector) $ | nindent 8 }}
        {{ end }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{ if and (.Values.developerMode.enabled) (.Values.developerMode.hostPath) }}
      volumes:
        - name: dev-work-dir
          hostPath:
            path: {{ .Values.developerMode.hostPath }}
      {{ end }}
