apiVersion: v1
kind: ConfigMap
metadata:
  name: cqi-toml
data:
  cqi.toml: |-
    [sources.inCqi]
      bootstrap_servers = "{{ tpl .Values.config.kafka.hostname . }}:{{ .Values.config.kafka.port}}"
      group_id = "VECTOR_4G_CQI"
      topics = ["{{ tpl .Values.config.kafka.topic . }}"]
      type = "kafka"

    [transforms.parseMessages]
      type = "json_parser"
      inputs = ["inCqi"]
      drop_field = false 
      drop_invalid = true
      field = "message" 
    
    [transforms.filterCqiMessages]
      # General
      type = "filter"
      inputs = ["parseMessages"]
      # Condition
      condition."EnbStatsCqiReportValues.exists" = true
    
    [transforms.parseCqiReport]
      inputs = ["filterCqiMessages"]
      type   = "json_parser"
      field  = "EnbStatsCqiReportValues"
      drop_field = false 
      drop_invalid = true
    
    [transforms.luaCqi]
      # General
      type = "lua" # required
      inputs = ["parseCqiReport"] # required
      version = "2" # required
    
    # Hooks
      hooks.process = """
      function (event, emit)
        m = {}
        m.log = {
              timestamp = "",
              cellId = "",
              ueId = "",
              cqiMeasurement = {},
              RankIndication = "",
              TransmissionMode = "",
              WidebandCqi = "",
            }
            
        temp = m
        temp.log.timestamp = event.log.timestamp
        temp.log.ueId = event.log.ueRicId
        temp.log.cellId = event.log.CELL
        temp.log.RankIndication = event.log.EnbStatsCqiReportValues.Report.RankIndication
        temp.log.TransmissionMode = event.log.EnbStatsCqiReportValues.Report.TransmissionMode
        temp.log.WidebandCqi = event.log.EnbStatsCqiReportValues.Report.WidebandCqi
        for f, v in pairs(event.log.EnbStatsCqiReportValues.Report.CqiList) do
            temp.log.cqiMeasurement[f] = v
        end
        emit(temp)
      end
      """

    [sinks.outCqiReport]
      # General
      bucket = "vector-bucket"
      database = "{{ .Values.config.influx.database }}"
      endpoint = "http://{{ tpl .Values.config.influx.hostname . }}:{{ .Values.config.influx.port}}/"
      inputs = ["luaCqi"]
      namespace = "{{ .Values.config.influx.namespace }}"
      type = "{{ .Values.config.influx.type }}"
      username = "{{ .Values.config.influx.username }}"
      password = "{{ .Values.config.influx.password }}"

