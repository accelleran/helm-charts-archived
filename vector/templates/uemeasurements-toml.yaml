apiVersion: v1
kind: ConfigMap
metadata:
  name: uemeasurements-toml
data:
  uemeasurements.toml: |-
    [sources.inUeMeas]
      bootstrap_servers = "{{ tpl .Values.config.kafka.hostname . }}:{{ .Values.config.kafka.port}}"
      group_id = "vectorUeMeas"
      topics = ["{{ tpl .Values.config.kafka.topic . }}"]
      type = "kafka"

    [transforms.parseJsonUeMeas]
      type = "json_parser"
      inputs = ["inUeMeas"]
      drop_field = false # optional, default
      drop_invalid = true
      field = "message" # optional, default

    [transforms.filterUeMeas]
      # General
      type = "filter"
      inputs = ["parseJsonUeMeas"]
      # Condition
      condition."type.eq" = "UE_MEASUREMENT"

    [transforms.parseUeMeas]
      inputs = ["filterUeMeas"]
      type   = "json_parser"
      field  = "ueMeasurement"
      drop_field = false # optional, default
      drop_invalid = true

    [transforms.log_to_metric_ue_measurement]
      inputs = ["parseUeMeas"]
      type = "log_to_metric"

      [[transforms.log_to_metric_ue_measurement.metrics]]
        type = "gauge"
        field = "rsrp"
        tags.cellId = "{{`{{cellId}}`}}" # optional
        tags.ueRicId = "{{`{{ueRicId}}`}}"
        tags.ueCellId = "{{`{{ueCellId}}`}}" # optional

      [[transforms.log_to_metric_ue_measurement.metrics]]
        type = "gauge"
        field = "rsrq"
        tags.cellId = "{{`{{cellId}}`}}" # optional
        tags.ueRicId = "{{`{{ueRicId}}`}}"
        tags.ueCellId = "{{`{{ueCellId}}`}}" # optional


    [sinks.outUeMeas]
      # General
      bucket = "vector-bucket"
      database = "{{ .Values.config.influx.database }}"
      endpoint =  "http://{{ tpl .Values.config.influx.hostname . }}:{{ .Values.config.influx.port}}/"
      inputs = ["log_to_metric_ue_measurement"]
      namespace = "{{ .Values.config.influx.namespace }}"
      type = "{{ .Values.config.influx.type }}"
      username = "{{ .Values.config.influx.username }}"
      password = "{{ .Values.config.influx.password }}"


