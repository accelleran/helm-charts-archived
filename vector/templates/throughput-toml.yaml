apiVersion: v1
kind: ConfigMap
metadata:
  name: throughput-toml
data:
  throughput.toml: |-
   [sources.inThroughput]
      bootstrap_servers = "{{ tpl .Values.config.kafka.hostname . }}:{{ .Values.config.kafka.port}}"
      group_id = "vectorThroughput"
      topics = ["{{ tpl .Values.config.kafka.topic . }}"]
      type = "kafka"

    [transforms.parseJsonThroughput]
      type = "json_parser"
      inputs = ["inThroughput"]
      drop_field = false # optional, default
      drop_invalid = true
      field = "message" # optional, default

    [transforms.filterThroughput]
      # General
      type = "filter"
      inputs = ["parseJsonThroughput"]
      # Condition
      condition."type.eq" = "THROUGHPUT_REPORT"

    [transforms.parseThroughput]
      inputs = ["filterThroughput"]
      type   = "json_parser"
      field  = "throughputReport"
      drop_field = false # optional, default
      drop_invalid = true

    [transforms.log_to_metric_throughput]
      inputs = ["parseThroughput"]
      type = "log_to_metric"

      [[transforms.log_to_metric_throughput.metrics]]
        type = "gauge"
        field = "dlThroughput"
        tags.cellId = "{{`{{cellId}}`}}" # optional
        tags.ueRicId = "{{`{{ueRicId}}`}}"

      [[transforms.log_to_metric_throughput.metrics]]
        type = "gauge"
        field = "ulThroughput"
        tags.cellId = "{{`{{cellId}}`}}" # optional
        tags.ueRicId = "{{`{{ueRicId}}`}}"


    [sinks.outThroughput]
      # General
      bucket = "vector-bucket"
      database = "{{ .Values.config.influx.database }}"
      endpoint =  "http://{{ tpl .Values.config.influx.hostname . }}:{{ .Values.config.influx.port}}/"
      inputs = ["log_to_metric_throughput"]
      namespace = "{{ .Values.config.influx.namespace }}"
      type = "{{ .Values.config.influx.type }}"
      username = "{{ .Values.config.influx.username }}"
      password = "{{ .Values.config.influx.password }}"

