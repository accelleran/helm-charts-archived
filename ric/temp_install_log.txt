NAME: ric
LAST DEPLOYED: Wed Sep 16 14:04:42 2020
NAMESPACE: default
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
acc-service-monitor:
  affinity: {}
  enabled: true
  fullnameOverride: ""
  global:
    kubeIp: 10.20.20.20
  image:
    pullPolicy: IfNotPresent
    repository: accelleran/acc-service-monitor
  imagePullSecrets:
  - name: accelleran-secret
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  monitoredNamespaces: '{{ .Release.Namespace }}'
  nameOverride: ""
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext:
    runAsUser: 0
  service:
    name: acc-ser-mon
    nodePort: 30500
    port: 80
    serviceName: acc-service-monitor
    type: NodePort
  serviceAccount:
    create: true
    name: accservicemonitor
  tolerations: []
  version: '{{ .Chart.AppVersion }}'
acc-service-orchestrator:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  enabled: true
  fullnameOverride: ""
  global:
    kubeIp: 10.20.20.20
  image:
    pullPolicy: IfNotPresent
    repository: accelleran/acc-service-orchestrator
  imagePullSecrets:
  - name: accelleran-secret
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext:
    privileged: true
    runAsUser: 0
  service:
    name: acc-ser-orc
    nodePort: 30502
    port: 80
    serviceName: acc-service-orchestrator
    type: NodePort
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  tolerations: []
  version: '{{ .Chart.AppVersion }}'
acc-state-db:
  affinity: {}
  enabled: true
  fullnameOverride: ""
  global:
    kubeIp: 10.20.20.20
  image:
    pullPolicy: IfNotPresent
    repository: accelleran/acc-state-db
  imagePullSecrets:
  - name: accelleran-secret
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext:
    runAsUser: 0
  service:
    enabled: true
    nodePort: 30503
    port: 80
    type: NodePort
  serviceAccount:
    create: false
    name: null
  tolerations: []
  version: '{{ .Chart.AppVersion }}'
  xapp-api:
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    enabled: true
    fullnameOverride: ""
    global:
      kubeIp: 10.20.20.20
    image:
      pullPolicy: IfNotPresent
      repository: accelleran/accelleran-xapp-api
    imagePullSecrets:
    - name: accelleran-secret
    ingress:
      annotations: {}
      enabled: false
      hosts:
      - host: chart-example.local
        paths: []
      tls: []
    nameOverride: acc-state-db-api
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    redis:
      url: '{{ .Release.Name }}-acc-state-db-redis.{{ .Release.Namespace }}'
    replicaCount: 1
    resources: {}
    securityContext:
      runAsUser: 0
    service:
      port: 80
      type: NodePort
    serviceAccount:
      annotations: {}
      create: false
      name: ""
    tolerations: []
    version: '{{ .Chart.AppVersion }}'
    xappConfig:
      apiGatewayPort: 31315
      apiGatewayUrl: '{{ .Values.global.kubeIp }}'
      expire_timer: 5000000000
      kafkaBeaconTopic: test2
      kafkaPort: 31090
      kafkaStateTopic: Topic_State
      kafkaUrl: '{{ .Values.global.kubeIp }}'
      logLevel: 20
      periodicPublish: "True"
      publishInterval: 2
      stateDbPort: 32000
      stateDbUrl: '{{ .Values.global.kubeIp }}'
    xappFrameworkConfig:
      flushOnDeployment: false
      redisPort: 6379
      redisUrl: '{{ .Release.Name }}-acc-state-db-redis.{{ .Release.Namespace }}'
  xapp-redis:
    affinity: {}
    backup:
      deleteAfterDay: 7
      enabled: true
    enabled: true
    fullnameOverride: ""
    global:
      kubeIp: 10.20.20.20
    health:
      enabled: false
    image:
      pullPolicy: IfNotPresent
      repository: redis
    imagePullSecrets: []
    ingress:
      annotations: {}
      enabled: false
      hosts:
      - host: chart-example.local
        paths: []
      tls: []
    livenessProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nameOverride: acc-state-db-redis
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteMany
      enabled: true
      hostPath: /opt/pods
      size: 1Gi
      type: pvc
    podSecurityContext:
      fsGroup: 0
    readinessProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources: {}
    securityContext:
      runAsUser: 0
    service:
      name: xapp-redis-svc
      port: 6379
      type: NodePort
    serviceAccount:
      annotations: {}
      create: false
      name: null
    tolerations: []
    version: '{{ .Chart.AppVersion }}'
  xappConfig:
    apiGatewayPort: 30315
    apiGatewayUrl: '{{ .Values.global.kubeIp }}'
    expire_timer: 5000000000
    kafkaBeaconTopic: test2
    kafkaPort: 31090
    kafkaStateTopic: Topic_State
    kafkaUrl: '{{ .Values.global.kubeIp }}'
    logLevel: 20
    periodicPublish: "True"
    publishInterval: 2
    stateDbPort: 32000
    stateDbUrl: '{{ .Values.global.kubeIp }}'
  xappFrameworkConfig:
    description: This xApp provides the state of the cells
    flushOnDeployment: true
    redisPort: 6379
    redisUrl: '{{ .Release.Name }}-xapp-redis.{{ .Release.Namespace }}'
acc-sys-dashboard:
  global:
    kubeIp: 10.20.20.20
  grafana:
    admin:
      existingSecret: ""
      passwordKey: admin-password
      userKey: admin-user
    adminPassword: password
    adminUser: admin
    affinity: {}
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - disableDeletion: false
          editable: true
          folder: ""
          name: default
          options:
            path: /var/lib/grafana/dashboards/default
          orgId: 1
          type: file
    dashboards:
      default:
        custom-dashboard:
          file: dashboards/custom-dashboard.json
        loki-log-dashboard:
          file: dashboards/loki-log-dashboard.json
        monitor-dashboard:
          file: dashboards/monitor-dashboard.json
    dashboardsConfigMaps: {}
    datasources:
      druidUrl: http://{{ .Release.Name }}-druid.{{ .Release.Namespace }}:8888
      lokiUrl: http://{{ .Release.Name }}-loki.{{ .Release.Namespace }}:3100
      prometheusUrl: http://{{ .Release.Name }}-prometheus-server.{{ .Release.Namespace
        }}:80
    deploymentStrategy:
      type: RollingUpdate
    downloadDashboards:
      env: {}
    downloadDashboardsImage:
      pullPolicy: IfNotPresent
      repository: appropriate/curl
      tag: latest
    env: {}
    envFromSecret: ""
    envRenderSecret: {}
    envValueFrom: {}
    extraConfigmapMounts: []
    extraContainers: ""
    extraEmptyDirMounts: []
    extraInitContainers: []
    extraSecretMounts: []
    extraVolumeMounts: []
    global:
      kubeIp: 10.20.20.20
    grafana.ini:
      analytics:
        check_for_updates: true
      auth.anonymous:
        enabled: true
        org_name: Main Org.
        org_role: Viewer
      grafana_net:
        url: https://grafana.net
      log:
        mode: console
      paths:
        data: /var/lib/grafana/data
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      security:
        allow_embedding: true
    image:
      pullPolicy: IfNotPresent
      pullSecrets:
      - accelleran-secret
      repository: accelleran/dash-grafana
      tag: 0.3.0
    ingress:
      annotations: {}
      enabled: false
      extraPaths: []
      hosts:
      - grafana.local
      labels: {}
      path: /
      tls: []
    initChownData:
      enabled: true
      image:
        pullPolicy: IfNotPresent
        repository: busybox
        tag: "1.30"
      resources: {}
    ldap:
      config: ""
      enabled: false
      existingSecret: ""
    livenessProbe:
      failureThreshold: 10
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 60
      timeoutSeconds: 30
    namespaceOverride: ""
    nodeSelector: {}
    notifiers: {}
    persistence:
      accessModes:
      - ReadWriteMany
      enabled: true
      hostPath: /opt/pods/
      size: 10Gi
      storageClassName: grafana
      type: pvc
    plugins:
    - cloudspout-button-panel
    podDisruptionBudget: {}
    podPortName: grafana
    rbac:
      create: true
      extraClusterRoleRules: []
      extraRoleRules: []
      namespaced: false
      pspEnabled: true
      pspUseAppArmor: true
    readinessProbe:
      httpGet:
        path: /api/health
        port: 3000
    replicas: 1
    resources: {}
    securityContext:
      fsGroup: 472
      runAsUser: 472
    service:
      annotations: {}
      labels: {}
      nodePort: 30300
      port: 80
      portName: service
      targetPort: 3000
      type: NodePort
    serviceAccount:
      create: true
      name: null
      nameTest: null
    sidecar:
      dashboards:
        SCProvider: true
        defaultFolderName: null
        enabled: false
        folder: /tmp/dashboards
        label: grafana_dashboard
        provider:
          allowUiUpdates: false
          disableDelete: false
          folder: ""
          name: sidecarProvider
          orgid: 1
          type: file
        searchNamespace: null
      datasources:
        enabled: false
        label: grafana_datasource
        searchNamespace: null
      image: kiwigrid/k8s-sidecar:0.1.20
      imagePullPolicy: IfNotPresent
      resources: {}
    smtp:
      existingSecret: ""
      passwordKey: password
      userKey: user
    testFramework:
      enabled: true
      image: dduportal/bats
      securityContext: {}
      tag: 0.4.0
    tolerations: []
  kube-eagle:
    affinity: {}
    containerSecurityContext: {}
    global:
      kubeIp: 10.20.20.20
    image:
      pullPolicy: IfNotPresent
      repository: quay.io/google-cloud-tools/kube-eagle
      tag: 1.1.0
    ingress:
      annotations: {}
      enabled: false
      hosts:
      - chart-example.local
      path: /
      tls: []
    livenessProbe:
      timeoutSeconds: 5
    logLevel: info
    metricsNamespace: eagle
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext:
      fsGroup: 99
      runAsUser: 99
    priorityClassName: ""
    rbac:
      create: true
    readinessProbe:
      timeoutSeconds: 5
    replicaCount: 1
    resources: {}
    service:
      port: 8080
      type: ClusterIP
    serviceAccountName: sa-kube-eagle
    serviceMonitor:
      additionalLabels: null
      create: false
      interval: 10s
      releaseLabel: prometheus-operator
      scrapeTimeout: 10s
    telemetry:
      host: 0.0.0.0
      port: 8080
    tolerations: []
  metrics-server:
    affinity: {}
    apiService:
      create: true
    args:
    - --kubelet-insecure-tls
    - --kubelet-preferred-address-types=InternalIP
    extraContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    global:
      kubeIp: 10.20.20.20
    hostNetwork:
      enabled: false
    image:
      pullPolicy: IfNotPresent
      repository: gcr.io/google_containers/metrics-server-amd64
      tag: v0.3.6
    imagePullSecrets: []
    livenessProbe:
      httpGet:
        path: /healthz
        port: https
        scheme: HTTPS
      initialDelaySeconds: 20
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget:
      enabled: false
      maxUnavailable: null
      minAvailable: null
    rbac:
      create: true
      pspEnabled: false
    readinessProbe:
      httpGet:
        path: /healthz
        port: https
        scheme: HTTPS
      initialDelaySeconds: 20
    replicas: 1
    resources: {}
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 10001
    service:
      annotations: {}
      labels: {}
      port: 443
      type: ClusterIP
    serviceAccount:
      create: true
      name: null
    tolerations: []
  prometheus:
    alertmanager:
      affinity: {}
      baseURL: http://localhost:9093
      configFileName: alertmanager.yml
      configFromSecret: ""
      configMapOverrideName: ""
      enabled: true
      extraArgs: {}
      extraEnv: {}
      extraSecretMounts: []
      image:
        pullPolicy: IfNotPresent
        repository: prom/alertmanager
        tag: v0.20.0
      ingress:
        annotations: {}
        enabled: false
        extraLabels: {}
        extraPaths: []
        hosts: []
        tls: []
      name: alertmanager
      nodeSelector: {}
      persistentVolume:
        accessModes:
        - ReadWriteMany
        annotations: {}
        enabled: true
        existingClaim: ""
        hostPath: /opt/pods
        mountPath: /data
        size: 2Gi
        storageClass: prom-alertmanager
        subPath: ""
      podAnnotations: {}
      podDisruptionBudget:
        enabled: false
        maxUnavailable: 1
      podLabels: {}
      podSecurityPolicy:
        annotations: {}
      prefixURL: ""
      priorityClassName: ""
      replicaCount: 1
      resources: {}
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        sessionAffinity: None
        type: ClusterIP
      statefulSet:
        enabled: false
        headless:
          annotations: {}
          labels: {}
          servicePort: 80
        podManagementPolicy: OrderedReady
      tolerations: []
    alertmanagerFiles:
      alertmanager.yml:
        global: {}
        receivers:
        - name: default-receiver
        route:
          group_interval: 5m
          group_wait: 10s
          receiver: default-receiver
          repeat_interval: 3h
    configmapReload:
      extraArgs: {}
      extraConfigmapMounts: []
      extraVolumeDirs: []
      image:
        pullPolicy: IfNotPresent
        repository: jimmidyson/configmap-reload
        tag: v0.3.0
      name: configmap-reload
      resources: {}
    global:
      kubeIp: 10.20.20.20
    kubeStateMetrics:
      args: {}
      enabled: true
      image:
        pullPolicy: IfNotPresent
        repository: quay.io/coreos/kube-state-metrics
        tag: v1.9.1
      name: kube-state-metrics
      nodeSelector: {}
      pod:
        labels: {}
      podAnnotations: {}
      podDisruptionBudget:
        enabled: false
        maxUnavailable: 1
      podSecurityPolicy:
        annotations: {}
      priorityClassName: ""
      replicaCount: 1
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      service:
        annotations:
          prometheus.io/scrape: "true"
        clusterIP: None
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        serviceTelemetryPort: 81
        type: ClusterIP
      tolerations: []
    networkPolicy:
      enabled: false
    nodeExporter:
      enabled: true
      extraArgs: {}
      extraConfigmapMounts: []
      extraHostPathMounts: []
      hostNetwork: true
      hostPID: true
      image:
        pullPolicy: IfNotPresent
        repository: prom/node-exporter
        tag: v0.18.1
      name: node-exporter
      nodeSelector: {}
      pod:
        labels: {}
      podAnnotations: {}
      podDisruptionBudget:
        enabled: false
        maxUnavailable: 1
      podSecurityPolicy:
        annotations: {}
      priorityClassName: ""
      resources: {}
      securityContext: {}
      service:
        annotations:
          prometheus.io/scrape: "true"
        clusterIP: None
        externalIPs: []
        hostPort: 9100
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 9100
        type: ClusterIP
      tolerations: []
      updateStrategy:
        type: RollingUpdate
    podSecurityPolicy:
      enabled: false
    pushgateway:
      enabled: true
      extraArgs: {}
      image:
        pullPolicy: IfNotPresent
        repository: prom/pushgateway
        tag: v1.0.1
      ingress:
        annotations: {}
        enabled: false
        extraPaths: []
        hosts: []
        tls: []
      name: pushgateway
      nodeSelector: {}
      persistentVolume:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: false
        existingClaim: ""
        mountPath: /data
        size: 2Gi
        subPath: ""
      podAnnotations: {}
      podDisruptionBudget:
        enabled: false
        maxUnavailable: 1
      podSecurityPolicy:
        annotations: {}
      priorityClassName: ""
      replicaCount: 1
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      service:
        annotations:
          prometheus.io/probe: pushgateway
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 9091
        type: ClusterIP
      tolerations: []
    rbac:
      create: true
    server:
      affinity: {}
      alertmanagers: []
      baseURL: ""
      configMapOverrideName: ""
      configPath: /etc/config/prometheus.yml
      emptyDir:
        sizeLimit: ""
      enabled: true
      env: []
      extraArgs: {}
      extraConfigmapMounts: []
      extraFlags:
      - web.enable-lifecycle
      extraHostPathMounts: []
      extraInitContainers: []
      extraSecretMounts: []
      extraVolumeMounts: []
      extraVolumes: []
      global:
        evaluation_interval: 1m
        scrape_interval: 1m
        scrape_timeout: 10s
      image:
        pullPolicy: IfNotPresent
        repository: prom/prometheus
        tag: v2.15.2
      ingress:
        annotations: {}
        enabled: false
        extraLabels: {}
        extraPaths: []
        hosts: []
        tls: []
      livenessProbeFailureThreshold: 3
      livenessProbeInitialDelay: 30
      livenessProbeSuccessThreshold: 1
      livenessProbeTimeout: 30
      name: server
      nodeSelector: {}
      persistentVolume:
        accessModes:
        - ReadWriteMany
        annotations: {}
        enabled: true
        existingClaim: ""
        hostPath: /opt/pods
        mountPath: /data
        size: 9Gi
        storageClass: prom-server
        subPath: ""
      podAnnotations: {}
      podDisruptionBudget:
        enabled: false
        maxUnavailable: 1
      podLabels: {}
      podSecurityPolicy:
        annotations: {}
      prefixURL: ""
      priorityClassName: ""
      readinessProbeFailureThreshold: 3
      readinessProbeInitialDelay: 30
      readinessProbeSuccessThreshold: 1
      readinessProbeTimeout: 30
      remoteRead: {}
      remoteWrite: {}
      replicaCount: 1
      resources: {}
      retention: 15d
      securityContext:
        fsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        sessionAffinity: None
        statefulsetReplica:
          enabled: false
          replica: 0
        type: ClusterIP
      sidecarContainers: null
      statefulSet:
        annotations: {}
        enabled: false
        headless:
          annotations: {}
          labels: {}
          servicePort: 80
        labels: {}
        podManagementPolicy: OrderedReady
      strategyType: Recreate
      terminationGracePeriodSeconds: 300
      tolerations: []
      verticalAutoscaler:
        enabled: false
    serverFiles:
      alerting_rules.yml: {}
      alerts: {}
      prometheus.yml:
        rule_files:
        - /etc/config/recording_rules.yml
        - /etc/config/alerting_rules.yml
        - /etc/config/rules
        - /etc/config/alerts
        scrape_configs:
        - job_name: prometheus
          static_configs:
          - targets:
            - localhost:9090
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-apiservers
          kubernetes_sd_configs:
          - role: endpoints
          relabel_configs:
          - action: keep
            regex: default;kubernetes;https
            source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_service_name
            - __meta_kubernetes_endpoint_port_name
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-nodes
          kubernetes_sd_configs:
          - role: node
          relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics
            source_labels:
            - __meta_kubernetes_node_name
            target_label: __metrics_path__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-nodes-cadvisor
          kubernetes_sd_configs:
          - role: node
          relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
            source_labels:
            - __meta_kubernetes_node_name
            target_label: __metrics_path__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - job_name: kubernetes-service-endpoints
          kubernetes_sd_configs:
          - role: endpoints
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_scrape
          - action: replace
            regex: (https?)
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
            - __address__
            - __meta_kubernetes_service_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_service_name
            target_label: kubernetes_name
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: kubernetes_node
        - job_name: kubernetes-service-endpoints-slow
          kubernetes_sd_configs:
          - role: endpoints
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
          - action: replace
            regex: (https?)
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
            - __address__
            - __meta_kubernetes_service_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_service_name
            target_label: kubernetes_name
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: kubernetes_node
          scrape_interval: 5m
          scrape_timeout: 30s
        - honor_labels: true
          job_name: prometheus-pushgateway
          kubernetes_sd_configs:
          - role: service
          relabel_configs:
          - action: keep
            regex: pushgateway
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_probe
        - job_name: kubernetes-services
          kubernetes_sd_configs:
          - role: service
          metrics_path: /probe
          params:
            module:
            - http_2xx
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_probe
          - source_labels:
            - __address__
            target_label: __param_target
          - replacement: blackbox
            target_label: __address__
          - source_labels:
            - __param_target
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - source_labels:
            - __meta_kubernetes_service_name
            target_label: kubernetes_name
        - job_name: kubernetes-pods
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_scrape
          - action: replace
            regex: (.+)
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
            - __address__
            - __meta_kubernetes_pod_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: kubernetes_pod_name
      recording_rules.yml: {}
      rules: {}
    serviceAccounts:
      alertmanager:
        create: true
        name: null
      kubeStateMetrics:
        create: true
        name: null
      nodeExporter:
        create: true
        name: null
      pushgateway:
        create: true
        name: null
      server:
        create: true
        name: null
dash-front-back-end:
  affinity: {}
  config:
    LteRadioControllerLabel: 4G-Radio-Controller
    apiUrl: '{{ .Values.global.kubeIp }}'
    config_id: production
    defaultOranNamespace: default
    defaultServiceNamespace: default
    druidPort: "30301"
    druidURL: 10.20.20.20
    grafanaPort: "30300"
    grafanaURL: '{{ .Values.global.kubeIp }}'
    kafkaPort: "31090"
    kafkaUrl: '{{ .Values.global.kubeIp }}'
    ksqldbPodName: '{{ .Values.global.kubeIp }}'
    ksqldbPort: "30533"
    nodeApiURL: '{{ .Values.global.kubeIp }}'
    nodePort: "31315"
    pcixAppPodName: accelleran-drax-pci-010-pci-xapp-api
    pcixAppPort: "80"
    svcMonitorHost: acc-service-monitor
    svcMonitorPort: "80"
    svcOrchestratorHost: acc-service-orchestrator
    svcOrchestratorPort: "80"
    websocketPort: "31316"
  fullnameOverride: ""
  global:
    kubeIp: 10.20.20.20
  image:
    pullPolicy: IfNotPresent
    repository: accelleran/dash-front-back-end
  imagePullSecrets:
  - name: accelleran-secret
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext:
    runAsUser: 0
  service:
    enabled: true
    nodePort: 31315
    port: 5000
    portname: http
    protocol: TCP
    targetPort: 5000
    type: NodePort
  serviceAccount:
    create: false
    name: null
  tolerations: []
  version: '{{ .Chart.AppVersion }}'
  websocketService:
    enabled: true
    nodePort: 31316
    port: 5001
    portname: websocket
    targetPort: 5001
    type: NodePort
druid:
  affinity: {}
  fullnameOverride: ""
  global:
    kubeIp: 10.20.20.20
  image:
    pullPolicy: IfNotPresent
    repository: accelleran/dash-druid
  imagePullSecrets:
  - name: accelleran-secret
  ingress:
    annotations: null
    enabled: false
    hosts:
    - paths:
      - /druid
    tls: []
  kafkaUrl: http://{{ .Release.Name }}-kafka.{{ .Release.Namespace }}:9092
  nameOverride: ""
  nodeSelector: {}
  persistence:
    accessModes:
    - ReadWriteMany
    enabled: true
    hostPath: /opt/pods/
    size: 5Gi
    storageClassName: acc-druid
    type: pvc
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext:
    runAsUser: 0
  service:
    name: druid
    nodePort: 30301
    port: 8888
    type: NodePort
  serviceAccount:
    create: false
    name: null
  tolerations: []
  version: '{{ .Chart.AppVersion }}'
global:
  kubeIp: 10.20.20.20
influxdb:
  affinity: {}
  backup:
    annotations: {}
    enabled: false
    persistence:
      accessMode: ReadWriteOnce
      annotations: null
      enabled: false
      size: 8Gi
    podAnnotations: {}
    resources:
      requests:
        ephemeral-storage: 8Gi
    schedule: 0 0 * * *
  config:
    collectd: {}
    continuous_queries: {}
    coordinator: {}
    data:
      max-values-per-tag: 0
    graphite: {}
    http: {}
    logging: {}
    meta: {}
    monitor: {}
    opentsdb: {}
    reporting_disabled: false
    retention: {}
    rpc: {}
    shard_precreation: {}
    subscriber: {}
    tls: {}
    udp: {}
  enabled: true
  enterprise:
    clusterSize: 4
    enabled: false
    licensekey: {}
    meta:
      clusterSize: 3
      image:
        tag: meta
      resources: {}
      seed: dead-beef-cafe-bae
  env: {}
  global:
    kubeIp: 10.20.20.20
  image:
    pullPolicy: IfNotPresent
    repository: influxdb
    tag: 1.8.0-alpine
  ingress:
    annotations: {}
    enabled: false
    hostname: influxdb.foobar.com
    path: /
    tls: false
  initScripts:
    enabled: true
    scripts:
      init.iql: |+
        CREATE DATABASE "test" WITH DURATION 5d REPLICATION 1 NAME "rp_5d"

  livenessProbe: {}
  nodeSelector: {}
  persistence:
    accessMode: ReadWriteOnce
    annotations: null
    enabled: true
    hostPath: /opt/pods/
    size: 8Gi
    storageClass: acc-influxdb
    type: pvc
  podAnnotations: {}
  podLabels: {}
  readinessProbe: {}
  resources: {}
  securityContext: {}
  service:
    apiNodePort: 30303
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: null
  setDefaultUser:
    activeDeadline: 300
    backoffLimit: 6
    enabled: true
    hookDeletePolicy: hook-succeeded
    image: appropriate/curl:latest
    restartPolicy: OnFailure
    user:
      password: password
      privileges: WITH ALL PRIVILEGES
      username: admin
  startupProbe:
    enabled: false
  tolerations: []
kafka:
  additionalPorts: {}
  affinity: {}
  configJob:
    backoffLimit: 6
  configurationOverrides:
    advertised.listeners: EXTERNAL://{{ .Values.global.kubeIp }}:$((31090 + ${KAFKA_BROKER_ID}))
    confluent.support.metrics.enable: false
    listener.security.protocol.map: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
  enabled: true
  envOverrides: {}
  external:
    distinct: false
    dns:
      useExternal: false
      useInternal: false
    domain: cluster.local
    enabled: true
    firstListenerPort: 31090
    init:
      image: lwolf/kubectl_deployer
      imagePullPolicy: IfNotPresent
      imageTag: "0.4"
    loadBalancerIP: []
    loadBalancerSourceRanges: []
    servicePort: 19092
    type: NodePort
  global:
    kubeIp: 10.20.20.20
  headless:
    port: 9092
  image: confluentinc/cp-kafka
  imagePullPolicy: IfNotPresent
  imageTag: 5.0.1
  jmx:
    configMap:
      enabled: true
      overrideConfig: {}
      overrideName: ""
    port: 5555
    whitelistObjectNames:
    - kafka.controller:*
    - kafka.server:*
    - java.lang:*
    - kafka.network:*
    - kafka.log:*
  kafkaHeapOptions: -Xmx1G -Xms1G
  logSubPath: logs
  nodeSelector: {}
  persistence:
    enabled: false
    mountPath: /opt/kafka/data
    size: 1Gi
  podAnnotations: {}
  podDisruptionBudget: {}
  podManagementPolicy: OrderedReady
  prometheus:
    jmx:
      enabled: false
      image: solsson/kafka-prometheus-jmx-exporter@sha256
      imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
      interval: 10s
      port: 5556
      resources: {}
      scrapeTimeout: 10s
    kafka:
      affinity: {}
      enabled: false
      image: danielqsj/kafka-exporter
      imageTag: v1.2.0
      interval: 10s
      nodeSelector: {}
      port: 9308
      resources: {}
      scrapeTimeout: 10s
      tolerations: []
    operator:
      enabled: false
      prometheusRule:
        enabled: false
        namespace: monitoring
        releaseNamespace: false
        rules:
        - alert: KafkaNoActiveControllers
          annotations:
            message: The number of active controllers in {{ "{{" }} $labels.namespace
              {{ "}}" }} is less than 1. This usually means that some of the Kafka
              nodes aren't communicating properly. If it doesn't resolve itself you
              can try killing the pods (one by one whilst monitoring the under-replicated
              partitions graph).
          expr: max(kafka_controller_kafkacontroller_activecontrollercount_value)
            by (namespace) < 1
          for: 5m
          labels:
            severity: critical
        - alert: KafkaMultipleActiveControllers
          annotations:
            message: The number of active controllers in {{ "{{" }} $labels.namespace
              {{ "}}" }} is greater than 1. This usually means that some of the Kafka
              nodes aren't communicating properly. If it doesn't resolve itself you
              can try killing the pods (one by one whilst monitoring the under-replicated
              partitions graph).
          expr: max(kafka_controller_kafkacontroller_activecontrollercount_value)
            by (namespace) > 1
          for: 5m
          labels:
            severity: critical
        selector:
          prometheus: kube-prometheus
      serviceMonitor:
        namespace: monitoring
        releaseNamespace: false
        selector:
          prometheus: kube-prometheus
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicas: 1
  resources: {}
  securityContext:
    runAsUser: 0
  terminationGracePeriodSeconds: 60
  tolerations: []
  topics:
  - name: test2
    partitions: 1
    reassignPartitions: true
    replicationFactor: 1
  updateStrategy:
    type: OnDelete
  zookeeper:
    affinity: {}
    command:
    - /bin/bash
    - -xec
    - /config-scripts/run
    enabled: true
    env:
      JMXAUTH: "false"
      JMXDISABLE: "false"
      JMXPORT: 1099
      JMXSSL: "false"
      ZK_HEAP_SIZE: 1G
      ZK_SYNC_LIMIT: 10
      ZK_TICK_TIME: 2000
      ZOO_AUTOPURGE_PURGEINTERVAL: 0
      ZOO_AUTOPURGE_SNAPRETAINCOUNT: 3
      ZOO_INIT_LIMIT: 5
      ZOO_MAX_CLIENT_CNXNS: 60
      ZOO_PORT: 2181
      ZOO_STANDALONE_ENABLED: false
      ZOO_TICK_TIME: 2000
    exporters:
      jmx:
        config:
          lowercaseOutputName: false
          rules:
          - name: zookeeper_$2
            pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
          - labels:
              replicaId: $2
            name: zookeeper_$3
            pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+), name1=replica.(\d+)><>(\w+)
          - labels:
              memberType: $3
              replicaId: $2
            name: zookeeper_$4
            pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+), name1=replica.(\d+),
              name2=(\w+)><>(\w+)
          - labels:
              memberType: $3
              replicaId: $2
            name: zookeeper_$4_$5
            pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+), name1=replica.(\d+),
              name2=(\w+), name3=(\w+)><>(\w+)
          startDelaySeconds: 30
        enabled: false
        env: {}
        image:
          pullPolicy: IfNotPresent
          repository: sscaling/jmx-prometheus-exporter
          tag: 0.3.0
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /metrics
            port: jmxxp
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 60
        path: /metrics
        ports:
          jmxxp:
            containerPort: 9404
            protocol: TCP
        readinessProbe:
          failureThreshold: 8
          httpGet:
            path: /metrics
            port: jmxxp
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 60
        resources: {}
        serviceMonitor:
          interval: 30s
          scheme: http
          scrapeTimeout: 30s
      zookeeper:
        config:
          logLevel: info
          resetOnScrape: "true"
        enabled: false
        env: {}
        image:
          pullPolicy: IfNotPresent
          repository: josdotso/zookeeper-exporter
          tag: v1.1.2
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /metrics
            port: zookeeperxp
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 60
        path: /metrics
        ports:
          zookeeperxp:
            containerPort: 9141
            protocol: TCP
        readinessProbe:
          failureThreshold: 8
          httpGet:
            path: /metrics
            port: zookeeperxp
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 60
        resources: {}
        serviceMonitor:
          interval: 30s
          scheme: http
          scrapeTimeout: 30s
    global:
      kubeIp: 10.20.20.20
    headless:
      annotations: {}
    image:
      PullPolicy: IfNotPresent
      pullPolicy: IfNotPresent
      repository: zookeeper
      tag: 3.5.5
    jobs:
      chroots:
        activeDeadlineSeconds: 300
        backoffLimit: 5
        completions: 1
        config:
          create: []
        enabled: false
        env: []
        parallelism: 1
        resources: {}
        restartPolicy: Never
    nodeSelector: {}
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      size: 5Gi
    podAnnotations: {}
    podDisruptionBudget:
      maxUnavailable: 1
    podLabels: {}
    port: 2181
    ports:
      client:
        containerPort: 2181
        protocol: TCP
      election:
        containerPort: 3888
        protocol: TCP
      server:
        containerPort: 2888
        protocol: TCP
    priorityClassName: ""
    prometheus:
      serviceMonitor:
        enabled: false
        selector: {}
    replicaCount: 1
    resources: {}
    securityContext:
      fsGroup: 0
      runAsUser: 0
    service:
      annotations: {}
      ports:
        client:
          nodePort: 30305
          port: 2181
          protocol: TCP
          targetPort: client
      type: NodePort
    terminationGracePeriodSeconds: 1800
    tolerations: []
    updateStrategy:
      type: RollingUpdate
    url: ""
loki-stack:
  fluent-bit:
    affinity: {}
    annotations: {}
    config:
      k8sLoggingParser: "Off"
      labelMap:
        kubernetes:
          container_name: container
          host: node
          labels:
            app: app
            release: release
          namespace_name: namespace
          pod_name: instance
        stream: stream
      labels: '{job="fluent-bit"}'
      lineFormat: json
      loglevel: warn
      port: 2020
      removeKeys:
      - kubernetes
      - stream
    deploymentStrategy: RollingUpdate
    enabled: true
    global:
      kubeIp: 10.20.20.20
    image:
      pullPolicy: IfNotPresent
      repository: grafana/fluent-bit-plugin-loki
      tag: 1.4.1-amd64
    loki:
      serviceName: '{{ .Release.Name }}-loki.{{ .Release.Namespace }}'
      servicePath: /api/prom/push
      servicePort: 3100
      serviceScheme: http
    nameOverride: fluent-bit-loki
    nodeSelector: {}
    podAnnotations:
      prometheus.io/path: /api/v1/metrics/prometheus
      prometheus.io/port: "2020"
      prometheus.io/scrape: "true"
    podLabels: {}
    rbac:
      create: true
      pspEnabled: true
    resources:
      limits:
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 100Mi
    serviceAccount:
      create: true
      name: null
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    volumeMounts:
    - mountPath: /var/log
      name: varlog
    - mountPath: /var/lib/docker/containers
      name: varlibdockercontainers
      readOnly: true
    volumes:
    - hostPath:
        path: /var/log
      name: varlog
    - hostPath:
        path: /var/lib/docker/containers
      name: varlibdockercontainers
  global:
    kubeIp: 10.20.20.20
  grafana:
    admin:
      existingSecret: ""
      passwordKey: admin-password
      userKey: admin-user
    adminUser: admin
    affinity: {}
    dashboardProviders: {}
    dashboards: {}
    dashboardsConfigMaps: {}
    datasources: {}
    deploymentStrategy:
      type: RollingUpdate
    downloadDashboards:
      env: {}
    downloadDashboardsImage:
      pullPolicy: IfNotPresent
      repository: appropriate/curl
      tag: latest
    enabled: false
    env: {}
    envFromSecret: ""
    extraConfigmapMounts: []
    extraContainers: ""
    extraEmptyDirMounts: []
    extraInitContainers: []
    extraSecretMounts: []
    extraVolumeMounts: []
    global:
      kubeIp: 10.20.20.20
    grafana.ini:
      analytics:
        check_for_updates: true
      grafana_net:
        url: https://grafana.net
      log:
        mode: console
      paths:
        data: /var/lib/grafana/data
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
    image:
      pullPolicy: IfNotPresent
      repository: grafana/grafana
      tag: 6.7.0
    ingress:
      annotations: {}
      enabled: false
      extraPaths: []
      hosts:
      - chart-example.local
      labels: {}
      path: /
      tls: []
    initChownData:
      enabled: true
      image:
        pullPolicy: IfNotPresent
        repository: busybox
        tag: "1.30"
      resources: {}
    ldap:
      config: ""
      existingSecret: ""
    livenessProbe:
      failureThreshold: 10
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 60
      timeoutSeconds: 30
    nodeSelector: {}
    notifiers: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: false
      finalizers:
      - kubernetes.io/pvc-protection
      size: 10Gi
      type: pvc
    plugins: []
    podPortName: grafana
    rbac:
      create: true
      extraClusterRoleRules: []
      extraRoleRules: []
      namespaced: false
      pspEnabled: true
      pspUseAppArmor: true
    readinessProbe:
      httpGet:
        path: /api/health
        port: 3000
    replicas: 1
    resources: {}
    securityContext:
      fsGroup: 472
      runAsUser: 472
    service:
      annotations: {}
      labels: {}
      port: 80
      portName: service
      targetPort: 3000
      type: ClusterIP
    serviceAccount:
      create: true
      name: null
      nameTest: null
    sidecar:
      dashboards:
        defaultFolderName: null
        enabled: false
        folder: /tmp/dashboards
        label: grafana_dashboard
        provider:
          disableDelete: false
          folder: ""
          name: sidecarProvider
          orgid: 1
          type: file
        searchNamespace: null
      datasources:
        enabled: true
        label: grafana_datasource
        searchNamespace: null
      image: kiwigrid/k8s-sidecar:0.1.20
      imagePullPolicy: IfNotPresent
      resources: {}
    smtp:
      existingSecret: ""
      passwordKey: password
      userKey: user
    testFramework:
      image: dduportal/bats
      securityContext: {}
      tag: 0.4.0
    tolerations: []
  loki:
    affinity: {}
    annotations: {}
    client: {}
    config:
      auth_enabled: false
      chunk_store_config:
        max_look_back_period: 0
      ingester:
        chunk_block_size: 262144
        chunk_idle_period: 3m
        chunk_retain_period: 1m
        lifecycler:
          ring:
            kvstore:
              store: inmemory
            replication_factor: 1
        max_transfer_retries: 0
      limits_config:
        enforce_metric_name: false
        reject_old_samples: true
        reject_old_samples_max_age: 168h
      schema_config:
        configs:
        - from: "2018-04-15"
          index:
            period: 168h
            prefix: index_
          object_store: filesystem
          schema: v9
          store: boltdb
      server:
        http_listen_port: 3100
      storage_config:
        boltdb:
          directory: /data/loki/index
        filesystem:
          directory: /data/loki/chunks
      table_manager:
        retention_deletes_enabled: true
        retention_period: 672h
    enabled: true
    env: []
    extraArgs: {}
    extraContainers: []
    extraPorts: []
    extraVolumeMounts: []
    extraVolumes: []
    global:
      kubeIp: 10.20.20.20
    image:
      pullPolicy: IfNotPresent
      repository: grafana/loki
      tag: 1.4.1
    ingress:
      annotations: {}
      enabled: false
      hosts:
      - host: chart-example.local
        paths: []
      tls: []
    initContainers: []
    livenessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45
    networkPolicy:
      enabled: false
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      hostPath: /opt/pods/acc-drax-loki-storage
      size: 10Gi
      storageClassName: acc-loki
      type: pvc
    podAnnotations:
      prometheus.io/port: http-metrics
      prometheus.io/scrape: "true"
    podDisruptionBudget: {}
    podLabels: {}
    podManagementPolicy: OrderedReady
    rbac:
      create: true
      pspEnabled: true
    readinessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45
    replicas: 1
    resources: {}
    securityContext:
      fsGroup: 0
      runAsUser: 0
    service:
      annotations: {}
      labels: {}
      nodePort: 30302
      port: 3100
      type: NodePort
    serviceAccount:
      annotations: {}
      create: true
      name: null
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
    terminationGracePeriodSeconds: 4800
    tolerations: []
    tracing:
      jaegerAgentHost: null
    updateStrategy:
      type: RollingUpdate
  prometheus:
    alertmanager:
      affinity: {}
      baseURL: /
      configFileName: alertmanager.yml
      configFromSecret: ""
      configMapOverrideName: ""
      enabled: true
      extraArgs: {}
      extraEnv: {}
      extraSecretMounts: []
      image:
        pullPolicy: IfNotPresent
        repository: prom/alertmanager
        tag: v0.18.0
      ingress:
        annotations: {}
        enabled: false
        extraLabels: {}
        hosts: []
        tls: []
      name: alertmanager
      nodeSelector: {}
      persistentVolume:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        existingClaim: ""
        mountPath: /data
        size: 2Gi
        subPath: ""
      podAnnotations: {}
      podSecurityPolicy:
        annotations: {}
      prefixURL: ""
      priorityClassName: ""
      replicaCount: 1
      resources: {}
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        type: ClusterIP
      statefulSet:
        enabled: false
        headless:
          annotations: {}
          labels: {}
          servicePort: 80
        podManagementPolicy: OrderedReady
      tolerations: []
    alertmanagerFiles:
      alertmanager.yml:
        global: {}
        receivers:
        - name: default-receiver
        route:
          group_interval: 5m
          group_wait: 10s
          receiver: default-receiver
          repeat_interval: 3h
    configmapReload:
      extraArgs: {}
      extraConfigmapMounts: []
      extraVolumeDirs: []
      image:
        pullPolicy: IfNotPresent
        repository: jimmidyson/configmap-reload
        tag: v0.2.2
      name: configmap-reload
      resources: {}
    enabled: false
    global:
      kubeIp: 10.20.20.20
    kubeStateMetrics:
      args: {}
      enabled: true
      image:
        pullPolicy: IfNotPresent
        repository: quay.io/coreos/kube-state-metrics
        tag: v1.6.0
      name: kube-state-metrics
      nodeSelector: {}
      pod:
        labels: {}
      podAnnotations: {}
      podSecurityPolicy:
        annotations: {}
      priorityClassName: ""
      replicaCount: 1
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      service:
        annotations:
          prometheus.io/scrape: "true"
        clusterIP: None
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        type: ClusterIP
      tolerations: []
    networkPolicy:
      enabled: false
    nodeExporter:
      enabled: true
      extraArgs: {}
      extraConfigmapMounts: []
      extraHostPathMounts: []
      hostNetwork: true
      hostPID: true
      image:
        pullPolicy: IfNotPresent
        repository: prom/node-exporter
        tag: v0.18.0
      name: node-exporter
      nodeSelector: {}
      pod:
        labels: {}
      podAnnotations: {}
      podSecurityPolicy:
        annotations: {}
      priorityClassName: ""
      resources: {}
      securityContext: {}
      service:
        annotations:
          prometheus.io/scrape: "true"
        clusterIP: None
        externalIPs: []
        hostPort: 9100
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 9100
        type: ClusterIP
      tolerations: []
      updateStrategy:
        type: RollingUpdate
    podSecurityPolicy:
      enabled: false
    pushgateway:
      enabled: true
      extraArgs: {}
      image:
        pullPolicy: IfNotPresent
        repository: prom/pushgateway
        tag: v0.8.0
      ingress:
        annotations: {}
        enabled: false
        hosts: []
        tls: []
      name: pushgateway
      nodeSelector: {}
      persistentVolume:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: false
        existingClaim: ""
        mountPath: /data
        size: 2Gi
        subPath: ""
      podAnnotations: {}
      podSecurityPolicy:
        annotations: {}
      priorityClassName: ""
      replicaCount: 1
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      service:
        annotations:
          prometheus.io/probe: pushgateway
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 9091
        type: ClusterIP
      tolerations: []
    rbac:
      create: true
    server:
      affinity: {}
      baseURL: ""
      configMapOverrideName: ""
      configPath: /etc/config/prometheus.yml
      emptyDir:
        sizeLimit: ""
      enableAdminApi: false
      enabled: true
      env: {}
      extraArgs: {}
      extraConfigmapMounts: []
      extraHostPathMounts: []
      extraInitContainers: []
      extraSecretMounts: []
      extraVolumeMounts: []
      extraVolumes: []
      global:
        evaluation_interval: 1m
        scrape_interval: 1m
        scrape_timeout: 10s
      image:
        pullPolicy: IfNotPresent
        repository: prom/prometheus
        tag: v2.13.1
      ingress:
        annotations: {}
        enabled: false
        extraLabels: {}
        hosts: []
        tls: []
      livenessProbeInitialDelay: 30
      livenessProbeTimeout: 30
      name: server
      nodeSelector: {}
      persistentVolume:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        existingClaim: ""
        mountPath: /data
        size: 8Gi
        subPath: ""
      podAnnotations: {}
      podLabels: {}
      podSecurityPolicy:
        annotations: {}
      prefixURL: ""
      priorityClassName: ""
      readinessProbeInitialDelay: 30
      readinessProbeTimeout: 30
      replicaCount: 1
      resources: {}
      retention: 15d
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        type: ClusterIP
      sidecarContainers: null
      skipTSDBLock: false
      statefulSet:
        annotations: {}
        enabled: false
        headless:
          annotations: {}
          labels: {}
          servicePort: 80
        labels: {}
        podManagementPolicy: OrderedReady
      terminationGracePeriodSeconds: 300
      tolerations: []
    serverFiles:
      alerts: {}
      prometheus.yml:
        rule_files:
        - /etc/config/rules
        - /etc/config/alerts
        scrape_configs:
        - job_name: prometheus
          static_configs:
          - targets:
            - localhost:9090
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-apiservers
          kubernetes_sd_configs:
          - role: endpoints
          relabel_configs:
          - action: keep
            regex: default;kubernetes;https
            source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_service_name
            - __meta_kubernetes_endpoint_port_name
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-nodes
          kubernetes_sd_configs:
          - role: node
          relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics
            source_labels:
            - __meta_kubernetes_node_name
            target_label: __metrics_path__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          job_name: kubernetes-nodes-cadvisor
          kubernetes_sd_configs:
          - role: node
          relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
            source_labels:
            - __meta_kubernetes_node_name
            target_label: __metrics_path__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
        - job_name: kubernetes-service-endpoints
          kubernetes_sd_configs:
          - role: endpoints
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_scrape
          - action: replace
            regex: (https?)
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
            - __address__
            - __meta_kubernetes_service_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_service_name
            target_label: kubernetes_name
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: kubernetes_node
        - honor_labels: true
          job_name: prometheus-pushgateway
          kubernetes_sd_configs:
          - role: service
          relabel_configs:
          - action: keep
            regex: pushgateway
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_probe
        - job_name: kubernetes-services
          kubernetes_sd_configs:
          - role: service
          metrics_path: /probe
          params:
            module:
            - http_2xx
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_service_annotation_prometheus_io_probe
          - source_labels:
            - __address__
            target_label: __param_target
          - replacement: blackbox
            target_label: __address__
          - source_labels:
            - __param_target
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - source_labels:
            - __meta_kubernetes_service_name
            target_label: kubernetes_name
        - job_name: kubernetes-pods
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_scrape
          - action: replace
            regex: (.+)
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
            - __address__
            - __meta_kubernetes_pod_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: kubernetes_pod_name
      rules: {}
    serviceAccounts:
      alertmanager:
        create: true
        name: null
      kubeStateMetrics:
        create: true
        name: null
      nodeExporter:
        create: true
        name: null
      pushgateway:
        create: true
        name: null
      server:
        create: true
        name: null
  promtail:
    affinity: {}
    annotations: {}
    config:
      client:
        backoff_config:
          maxbackoff: 5s
          maxretries: 20
          minbackoff: 100ms
        batchsize: 102400
        batchwait: 1s
        external_labels: {}
        timeout: 10s
      positions:
        filename: /run/promtail/positions.yaml
      server:
        http_listen_port: 3101
      target_config:
        sync_period: 10s
    deploymentStrategy: {}
    enabled: false
    env: []
    extraScrapeConfigs: []
    extraVolumeMounts: []
    extraVolumes: []
    global:
      kubeIp: 10.20.20.20
    image:
      pullPolicy: IfNotPresent
      repository: grafana/promtail
      tag: latest
    initContainer:
      enabled: false
      fsInotifyMaxUserInstances: 128
    livenessProbe: {}
    loki:
      serviceName: ""
      servicePort: 3100
      serviceScheme: http
    nameOverride: promtail
    nodeSelector: {}
    pipelineStages:
    - docker: {}
    podAnnotations:
      prometheus.io/port: http-metrics
      prometheus.io/scrape: "true"
    podLabels: {}
    rbac:
      create: true
      pspEnabled: true
    readinessProbe:
      failureThreshold: 5
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    scrapeConfigs: []
    securityContext:
      readOnlyRootFilesystem: true
      runAsGroup: 0
      runAsUser: 0
    serviceAccount:
      create: false
      name: null
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
    syslogService:
      annotations: {}
      enabled: false
      labels: {}
      loadBalancerIP: null
      port: 1514
      type: ClusterIP
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    volumeMounts:
    - mountPath: /var/lib/docker/containers
      name: docker
      readOnly: true
    - mountPath: /var/log/pods
      name: pods
      readOnly: true
    volumes:
    - hostPath:
        path: /var/lib/docker/containers
      name: docker
    - hostPath:
        path: /var/log/pods
      name: pods
nkafka-helm:
  affinity: {}
  druidOverlordUrl: '{{ .Release.Name }}-druid-overlord.{{ .Release.Namespace }}:8081'
  fullnameOverride: ""
  global:
    kubeIp: 10.20.20.20
  image:
    pullPolicy: IfNotPresent
    repository: accelleran/dash-nkafka
  imagePullSecrets:
  - name: accelleran-secret
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  initConfigs:
    kafkaService: '{{ .Release.Name }}-kafka.{{ .Release.Namespace }}:9092'
    natsService: nats-service.{{ .Release.Namespace }}:4222
  kafkaUrl: '{{ .Release.Name }}-kafka.{{ .Release.Namespace }}:9092'
  nameOverride: ""
  natsUrl: nats://nats-service.{{ .Release.Namespace }}:4222
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext:
    runAsUser: 0
  service:
    enabled: false
    name: nkafka
    nodePort: 30309
    port: 80
    type: NodePort
  serviceAccount:
    create: false
    name: null
  tolerations: []
  version: '{{ .Chart.AppVersion }}'
vector:
  affinity: {}
  config:
    influx:
      database: test
      hostname: '{{ .Values.global.kubeIp }}'
      namespace: df
      password: password
      port: 30303
      type: influxdb_metrics
      username: admin
    kafka:
      hostname: '{{ .Values.global.kubeIp }}'
      port: 31090
      topic: test2
  enabled: true
  fullnameOverride: ""
  global:
    kubeIp: 10.20.20.20
  image:
    pullPolicy: IfNotPresent
    repository: accelleran/vector
  imagePullSecrets:
  - name: accelleran-secret
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: ""
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext:
    runAsUser: 0
  service:
    enabled: false
    port: 80
    type: ClusterIP
  serviceAccount:
    create: false
    name: null
  tolerations: []
  version: '{{ .Chart.AppVersion }}'

HOOKS:
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/tests/test-version.yaml
apiVersion: v1
kind: Pod
metadata:
  name: ric-metrics-server-test
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: wget
    image: busybox
    command: ['/bin/sh']
    args:
    - -c
    - 'wget -qO- https://ric-metrics-server:443/version | grep -F v0.3.6'
  restartPolicy: Never
---
# Source: ric/charts/dash-front-back-end/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ric-dash-front-back-end-test-connection"
  labels:

    helm.sh/chart: dash-front-back-end-0.16.0
    app.kubernetes.io/name: dash-front-back-end
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.16.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: WebGUI
    drax/component-name: dash-front-back-end
    drax/component-version: 0.16.0
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['ric-dash-front-back-end:5000']
  restartPolicy: Never
---
# Source: ric/charts/acc-service-monitor/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ric-acc-service-monitor-test-connection"
  labels:

    helm.sh/chart: acc-service-monitor-0.3.0
    app.kubernetes.io/name: acc-service-monitor
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: ServiceMonitor
    drax/component-name: acc-service-monitor
    drax/component-version: 0.3.0
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['ric-acc-service-monitor:80']
  restartPolicy: Never
---
# Source: ric/charts/acc-state-db/charts/xapp-api/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ric-acc-state-db-api-test-connection"
  labels:
    helm.sh/chart: xapp-api-0.3.7
    app.kubernetes.io/name: acc-state-db-api
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-api
    drax/xapp-component-version: 0.3.7
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['ric-acc-state-db-api:80']
  restartPolicy: Never
---
# Source: ric/charts/acc-state-db/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ric-acc-state-db-test-connection"
  labels:

    helm.sh/chart: acc-state-db-0.4.0
    app.kubernetes.io/name: acc-state-db
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.4.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-core
    drax/xapp-component-version: 0.4.0
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['ric-acc-state-db:80']
  restartPolicy: Never
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: ric-grafana-test
  labels:
    app: ric-grafana
    chart: "grafana-4.4.0"
    heritage: "Helm"
    release: "ric"
  annotations:
    "helm.sh/hook": test-success
  namespace: default
spec:
  serviceAccountName: ric-grafana-test
  initContainers:
    - name: test-framework
      image: "dduportal/bats:0.4.0"
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  imagePullSecrets:
    - name: accelleran-secret
  containers:
    - name: ric-test
      image: "dduportal/bats:0.4.0"
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
        - mountPath: /tools
          name: tools
  volumes:
  - name: tests
    configMap:
      name: ric-grafana-test
  - name: tools
    emptyDir: {}
  restartPolicy: Never
---
# Source: ric/charts/loki-stack/templates/tests/loki-test-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  annotations:
    "helm.sh/hook": test-success
  labels:
    app: loki-stack
    chart: loki-stack-0.36.2
    release: ric
    heritage: Helm
  name: ric-loki-stack-test
spec:
  containers:
  - name: test
    image: bats/bats:v1.1.0
    args:
    - /var/lib/loki/test.sh
    env:
    - name: LOKI_SERVICE
      value: ric-loki
    - name: LOKI_PORT
      value: "3100"
    volumeMounts:
    - name: tests
      mountPath: /var/lib/loki
  restartPolicy: Never
  volumes:
  - name: tests
    configMap:
      name: ric-loki-stack-test
---
# Source: ric/charts/acc-state-db/charts/xapp-redis/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ric-acc-state-db-redis-test-connection"
  labels:
    helm.sh/chart: xapp-redis-0.1.4
    app.kubernetes.io/name: acc-state-db-redis
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "6.0.4-alpine3.12"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-redis
    drax/xapp-component-version: 0.1.4
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['ric-acc-state-db-redis:6379']
  restartPolicy: Never
---
# Source: ric/charts/influxdb/templates/post-install-set-auth.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ric-influxdb-set-auth
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  activeDeadlineSeconds: 
  backoffLimit: 6
  template:
    metadata:
      labels:
        app.kubernetes.io/name: influxdb
        app.kubernetes.io/instance: ric
    spec:
      containers:
      - name: ric-influxdb-set-auth
        image: "appropriate/curl:latest"
        env:
          - name: INFLUXDB_USER
            valueFrom:
              secretKeyRef:
                name: ric-influxdb-auth
                key: influxdb-user
          - name: INFLUXDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ric-influxdb-auth
                key: influxdb-password
        args:
          - "/bin/sh"
          - "-c"
          - |
             curl -X POST http://ric-influxdb-api:8086/query \
             --data-urlencode \
             "q=CREATE USER \"${INFLUXDB_USER}\" WITH PASSWORD '${INFLUXDB_PASSWORD}' WITH ALL PRIVILEGES"
      restartPolicy: OnFailure
---
# Source: ric/charts/vector/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ric-vector-test-connection"
  labels:

    helm.sh/chart: vector-0.1.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Vector
    drax/component-name: vector
    drax/component-version: 0.1.0
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['ric-vector:80']
  restartPolicy: Never
---
# Source: ric/charts/kafka/templates/tests/test_topic_create_consume_produce.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ric-test-topic-create-consume-produce"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: ric-test-consume
    image: confluentinc/cp-kafka:5.0.1
    command:
    - sh
    - -c
    - |
      # Create the topic
      kafka-topics --zookeeper ric-zookeeper:2181 --topic helm-test-topic-create-consume-produce --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list ric-kafka:9092 --topic helm-test-topic-create-consume-produce && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server ric-kafka-headless:9092 --topic helm-test-topic-create-consume-produce --from-beginning --timeout-ms 2000 --max-messages 1 | grep "$MESSAGE"
  restartPolicy: Never
MANIFEST:
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ric-grafana
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    heritage: Helm
    release: ric
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    # Default set from Docker, without DAC_OVERRIDE or CHOWN
    - FOWNER
    - FSETID
    - KILL
    - SETGID
    - SETUID
    - SETPCAP
    - NET_BIND_SERVICE
    - NET_RAW
    - SYS_CHROOT
    - MKNOD
    - AUDIT_WRITE
    - SETFCAP
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: false
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/tests/test-podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ric-grafana-test
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    heritage: Helm
    release: ric
spec:
  allowPrivilegeEscalation: true
  privileged: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - projected
  - secret
---
# Source: ric/charts/loki-stack/charts/fluent-bit/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ric-fluent-bit-loki
  namespace: default
  labels:
    app: fluent-bit-loki
    chart: fluent-bit-0.1.1
    heritage: Helm
    release: ric
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - 'secret'
    - 'configMap'
    - 'hostPath'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
    - ALL
---
# Source: ric/charts/loki-stack/charts/loki/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ric-loki
  namespace: default
  labels:
    app: loki
    chart: loki-0.27.1
    heritage: Helm
    release: ric
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'persistentVolumeClaim'
    - 'secret'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
    - ALL
---
# Source: ric/charts/kafka/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: ric-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.0
    release: ric
    heritage: Helm
    component: server
spec:
  selector:
    matchLabels:
      app: zookeeper
      release: ric
      component: server
  maxUnavailable: 1
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ric-grafana
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    release: ric
    heritage: Helm
type: Opaque
data:
  admin-user: "YWRtaW4="
  admin-password: "cGFzc3dvcmQ="
  ldap-toml: ""
---
# Source: ric/charts/influxdb/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ric-influxdb-auth
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
data:
  influxdb-password:  "cGFzc3dvcmQ="
  influxdb-user: "YWRtaW4="
---
# Source: ric/charts/loki-stack/charts/loki/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ric-loki
  namespace: default
  labels:
    app: loki
    chart: loki-0.27.1
    release: ric
    heritage: Helm
data:
  loki.yaml: YXV0aF9lbmFibGVkOiBmYWxzZQpjaHVua19zdG9yZV9jb25maWc6CiAgbWF4X2xvb2tfYmFja19wZXJpb2Q6IDAKaW5nZXN0ZXI6CiAgY2h1bmtfYmxvY2tfc2l6ZTogMjYyMTQ0CiAgY2h1bmtfaWRsZV9wZXJpb2Q6IDNtCiAgY2h1bmtfcmV0YWluX3BlcmlvZDogMW0KICBsaWZlY3ljbGVyOgogICAgcmluZzoKICAgICAga3ZzdG9yZToKICAgICAgICBzdG9yZTogaW5tZW1vcnkKICAgICAgcmVwbGljYXRpb25fZmFjdG9yOiAxCiAgbWF4X3RyYW5zZmVyX3JldHJpZXM6IDAKbGltaXRzX2NvbmZpZzoKICBlbmZvcmNlX21ldHJpY19uYW1lOiBmYWxzZQogIHJlamVjdF9vbGRfc2FtcGxlczogdHJ1ZQogIHJlamVjdF9vbGRfc2FtcGxlc19tYXhfYWdlOiAxNjhoCnNjaGVtYV9jb25maWc6CiAgY29uZmlnczoKICAtIGZyb206ICIyMDE4LTA0LTE1IgogICAgaW5kZXg6CiAgICAgIHBlcmlvZDogMTY4aAogICAgICBwcmVmaXg6IGluZGV4XwogICAgb2JqZWN0X3N0b3JlOiBmaWxlc3lzdGVtCiAgICBzY2hlbWE6IHY5CiAgICBzdG9yZTogYm9sdGRiCnNlcnZlcjoKICBodHRwX2xpc3Rlbl9wb3J0OiAzMTAwCnN0b3JhZ2VfY29uZmlnOgogIGJvbHRkYjoKICAgIGRpcmVjdG9yeTogL2RhdGEvbG9raS9pbmRleAogIGZpbGVzeXN0ZW06CiAgICBkaXJlY3Rvcnk6IC9kYXRhL2xva2kvY2h1bmtzCnRhYmxlX21hbmFnZXI6CiAgcmV0ZW50aW9uX2RlbGV0ZXNfZW5hYmxlZDogdHJ1ZQogIHJldGVudGlvbl9wZXJpb2Q6IDY3Mmg=
---
# Source: ric/charts/acc-state-db/charts/xapp-api/templates/conf-settings.yaml
apiVersion: v1
kind: ConfigMap
metadata:
 name: ric-acc-state-db-api-settings
 labels:
    helm.sh/chart: xapp-api-0.3.7
    app.kubernetes.io/name: acc-state-db-api
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-api
    drax/xapp-component-version: 0.3.7
data:
  settings.py: |
    REDIS_URL = "ric-acc-state-db-redis.default"
    REDIS_PORT = 6379
---
# Source: ric/charts/acc-state-db/charts/xapp-redis/templates/conf-backup-db.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-acc-state-db-redis-backup
  labels:
    helm.sh/chart: xapp-redis-0.1.4
    app.kubernetes.io/name: acc-state-db-redis
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "6.0.4-alpine3.12"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-redis
    drax/xapp-component-version: 0.1.4
data:
  backup-db.sh: |-
    #!/bin/sh
    #
    ## redis backup script
    ## usage
    ## redis-backup.sh port backup.dir
    
    port=6379
    backup_dir=${2:-"/data/backup"}
    
    cli="/usr/local/bin/redis-cli -p $port"
    rdb="/data/dump.rdb"
    aof="/data/appendonly.aof"
    
    rdb_found=1
    aof_found=1

    test -f $rdb || {
      echo "No RDB Found" ; rdb_found=0 #exit 1
    }
    
    test -f $aof || {
      echo "No AOF Found" ; aof_found=0 #exit 1
    }
    
    if [ $rdb_found -eq 0 ]; then                                                                                                                                                                       
      if [ $aof_found -eq 0 ]; then                                                                                                                                                                     
        echo "No DBs found!"; exit 1                                                                                                                                                                    
      fi                                                                                                                                                                                                
    fi

    test -d $backup_dir || {
      echo "Create backup directory $backup_dir" && mkdir -p $backup_dir
    }
    
    # perform a bgsave before copy
    echo bgsave | $cli
    echo "Waiting for 20 seconds..."
    sleep 20
    try=5
    while [ $try -gt 0 ] ; do
      ## redis-cli output dos format line feed '\r\n', remove '\r'
      bg=$(echo 'info Persistence' | $cli | awk -F: '/rdb_bgsave_in_progress/{sub(/\r/, "", $0); print $2}')
      ok=$(echo 'info Persistence' | $cli | awk -F: '/rdb_last_bgsave_status/{sub(/\r/, "", $0); print $2}')
      if [[ "$bg" = "0" ]] && [[ "$ok" = "ok" ]] ; then
        dst_rdb="$backup_dir/dump.$(date +%Y%m%d%H%M%S).rdb"
        dst_aof="$backup_dir/appendonly.$(date +%Y%m%d%H%M%S).aof"
        cp $rdb $dst_rdb
        #cp $aof $dst_aof
        if [ $? = 0 ] ; then
          echo "Redis rdb $rdb copied to $dst_rdb."
    
          # delete rdb created 7 days ago
          cd $backup_dir
          find . \( -name "dump*" \) -mtime +7 -exec rm -f {} \;
          #exit 0
          if [ $aof_found -eq 0 ]; then
            exit 0
          fi
          cp $aof $dst_aof
          if [ $? = 0 ] ; then
            echo "Redis aof $aof copied to $dst_aof."
    
            # delete aof created 7 days ago
            cd $backup_dir
            find . \( -name "appendonly*" \) -mtime +7 -exec rm -f {} \;
            exit 0
    
          else
            echo "Failed to copy $aof to $dst_aof!"
          fi
        else
          echo "Failed to copy $rdb to $dst!"
        fi
      fi
      try=$((try - 1))
      echo "Redis maybe busy, waiting and retry in 5s..."
      sleep 5
    done
---
# Source: ric/charts/acc-state-db/templates/xapp-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-acc-state-db-config
  labels:
    helm.sh/chart: acc-state-db-0.4.0
    app.kubernetes.io/name: acc-state-db
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.4.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-core
    drax/xapp-component-version: 0.4.0
data:
  xapp_configuration.py: |-
    configuration = {
        "metadata": {
            "name": "ric",
            "configName": "",
            "namespace": "default",
        },
        "description": "This xApp detects changes in the state of the cells and publishes this data either on request through the REST API, or periodically through KAFKA",
        "last_modified": "06/07/2020 23:32:00",
        'config': {
            'API_GATEWAY_URL':'10.20.20.20',
            'API_GATEWAY_PORT':'30315',
            'REDIS_URL': 'ric-xapp-redis.default',
            'REDIS_PORT': 6379,
            'LOG_LEVEL': 20,  # CRITICAL=50, ERROR=40, WARNING=30, INFO=20, DEBUG=10, NOTSET=0
            'STATE_DB_URL': '10.20.20.20',
            'STATE_DB_PORT': 32000,
            'KAFKA_STATE_TOPIC': 'Topic_State',
            'KAFKA_BEACON_TOPIC': 'test2',
            'KAFKA_URL': '10.20.20.20',
            'KAFKA_PORT': '31090',
            'expire_timer': 5e+09, # in nanoseconds
            'periodic_publish': True,
            'publish_interval': 2  # in seconds
        },
        "jsonSchemaOptions": {},
        "uiSchemaOptions": {}
    }
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-grafana
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    release: ric
    heritage: Helm
data:
  plugins: cloudspout-button-panel
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [auth.anonymous]
    enabled = true
    org_name = Main Org.
    org_role = Viewer
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [security]
    allow_embedding = true
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - access: proxy
      isDefault: true
      name: Prometheus
      type: prometheus
      url: http://ric-prometheus-server.default:80
    - access: proxy
      isDefault: false
      name: Druid
      type: paypal-druid-datasource
      url: http://ric-druid.default:8888
    - access: proxy
      isDefault: false
      name: Loki
      type: loki
      url: http://ric-loki.default:3100
  dashboardproviders.yaml: |
    apiVersion: 1
    providers:
    - disableDeletion: false
      editable: true
      folder: ""
      name: default
      options:
        path: /var/lib/grafana/dashboards/default
      orgId: 1
      type: file
  download_dashboards.sh: |
    #!/usr/bin/env sh
    set -euf
    mkdir -p /var/lib/grafana/dashboards/default
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/dashboards-json-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-grafana-dashboards-default
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    release: ric
    heritage: Helm
    dashboard-provider: default
data:
  custom-dashboard.json:
    |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "editable": true,
        "gnetId": null,
        "graphTooltip": 0,
        "iteration": 1597745449808,
        "links": [],
        "panels": [
          {
            "collapsed": false,
            "datasource": null,
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 0
            },
            "id": 65,
            "panels": [],
            "title": "Cluster Information",
            "type": "row"
          },
          {
            "cacheTimeout": null,
            "colorBackground": false,
            "colorValue": false,
            "colors": [
              "#299c46",
              "rgba(237, 129, 40, 0.89)",
              "#d44a3a"
            ],
            "datasource": "Prometheus",
            "format": "none",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 0,
              "y": 1
            },
            "id": 19,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": false,
              "lineColor": "rgb(31, 120, 193)",
              "show": true,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "expr": "count(kube_node_labels)",
                "instant": true,
                "refId": "A"
              }
            ],
            "thresholds": "",
            "timeFrom": null,
            "timeShift": null,
            "title": "Number of Nodes",
            "type": "singlestat",
            "valueFontSize": "80%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "current"
          },
          {
            "cacheTimeout": null,
            "colorBackground": false,
            "colorPrefix": false,
            "colorValue": false,
            "colors": [
              "#73BF69",
              "rgba(237, 129, 40, 0.89)",
              "#d44a3a"
            ],
            "datasource": null,
            "format": "decbytes",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 2,
              "y": 1
            },
            "id": 28,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": false,
              "lineColor": "rgb(31, 120, 193)",
              "show": true,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "expr": "eagle_node_resource_allocatable_memory_bytes",
                "instant": true,
                "legendFormat": "",
                "refId": "A"
              }
            ],
            "thresholds": "",
            "timeFrom": null,
            "timeShift": null,
            "title": "Allocatable RAM",
            "type": "singlestat",
            "valueFontSize": "80%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "avg"
          },
          {
            "cacheTimeout": null,
            "colorBackground": false,
            "colorPrefix": false,
            "colorValue": false,
            "colors": [
              "#73BF69",
              "rgba(237, 129, 40, 0.89)",
              "#d44a3a"
            ],
            "datasource": null,
            "format": "short",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 4,
              "y": 1
            },
            "id": 29,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": false,
              "lineColor": "rgb(31, 120, 193)",
              "show": true,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "expr": "eagle_node_resource_allocatable_cpu_cores",
                "instant": true,
                "legendFormat": "",
                "refId": "A"
              }
            ],
            "thresholds": "",
            "timeFrom": null,
            "timeShift": null,
            "title": "Allocatable CPU Cores",
            "type": "singlestat",
            "valueFontSize": "80%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "avg"
          },
          {
            "cacheTimeout": null,
            "colorBackground": false,
            "colorValue": false,
            "colors": [
              "#299c46",
              "rgba(237, 129, 40, 0.89)",
              "#d44a3a"
            ],
            "datasource": "Prometheus",
            "format": "none",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 6,
              "y": 1
            },
            "id": 32,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": false,
              "lineColor": "rgb(31, 120, 193)",
              "show": true,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "expr": "count(count(kube_pod_labels) by (pod))",
                "instant": true,
                "refId": "A"
              }
            ],
            "thresholds": "",
            "timeFrom": null,
            "timeShift": null,
            "title": "Running Pods",
            "type": "singlestat",
            "valueFontSize": "80%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "current"
          },
          {
            "cacheTimeout": null,
            "colorBackground": true,
            "colorPostfix": false,
            "colorPrefix": false,
            "colorValue": false,
            "colors": [
              "#299c46",
              "#FF9830",
              "#FF9830"
            ],
            "datasource": "Prometheus",
            "format": "none",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 8,
              "y": 1
            },
            "id": 34,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": false,
              "lineColor": "rgb(31, 120, 193)",
              "show": true,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "expr": "sum(kube_pod_status_phase{phase!=\"Running\",phase!=\"Succeeded\"} == 1)",
                "instant": true,
                "refId": "A"
              }
            ],
            "thresholds": "1",
            "timeFrom": null,
            "timeShift": null,
            "title": "Pending Containers",
            "type": "singlestat",
            "valueFontSize": "80%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "current"
          },
          {
            "cacheTimeout": null,
            "colorBackground": true,
            "colorValue": false,
            "colors": [
              "#299c46",
              "#C4162A",
              "#C4162A"
            ],
            "datasource": "Prometheus",
            "format": "none",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 10,
              "y": 1
            },
            "id": 66,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "#C0D8FF",
              "full": false,
              "lineColor": "#1F60C4",
              "show": true,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "expr": "sum(kube_pod_container_status_waiting)",
                "instant": true,
                "refId": "A"
              }
            ],
            "thresholds": "1",
            "timeFrom": null,
            "timeShift": null,
            "title": "Crashed Containers",
            "type": "singlestat",
            "valueFontSize": "80%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "current"
          },
          {
            "cacheTimeout": null,
            "columns": [],
            "datasource": "Prometheus",
            "fontSize": "100%",
            "gridPos": {
              "h": 12,
              "w": 12,
              "x": 12,
              "y": 1
            },
            "id": 35,
            "links": [],
            "options": {},
            "pageSize": null,
            "pluginVersion": "6.6.2",
            "showHeader": true,
            "sort": {
              "col": 13,
              "desc": true
            },
            "styles": [
              {
                "alias": "",
                "align": "right",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "pod",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Time",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "__name__",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "app",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "chart",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "component",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "heritage",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "instance",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "job",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "Package",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "release",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Pod",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "pod",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "Status",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "phase",
                "thresholds": [
                  ""
                ],
                "type": "string",
                "unit": "short",
                "valueMaps": [
                  {
                    "text": "Crash",
                    "value": "null"
                  },
                  {
                    "text": "Crash",
                    "value": "Null"
                  },
                  {
                    "text": "Crash",
                    "value": "None"
                  }
                ]
              },
              {
                "alias": "Namespace",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "namespace",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "kubernetes_namespace",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "kubernetes_node",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "kubernetes_name",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "kube_pod_status_phase{phase!=\"Running\",phase!=\"Succeeded\"} == 1",
                "format": "table",
                "instant": true,
                "refId": "A"
              },
              {
                "expr": "kube_pod_container_status_waiting == 1",
                "format": "table",
                "instant": true,
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Pending or Crashed Pods and Containers",
            "transform": "table",
            "type": "table"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 0,
              "y": 5
            },
            "id": 67,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "",
                      "type": 1,
                      "value": "0"
                    },
                    {
                      "from": "",
                      "id": 2,
                      "operator": "",
                      "text": "ON",
                      "to": "",
                      "type": 1,
                      "value": "1"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(kube_pod_container_status_running{pod=~\".*redis.*\"} or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "0",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Redis",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 2,
              "y": 5
            },
            "id": 68,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "id": 0,
                      "op": "=",
                      "text": "ON",
                      "type": 1,
                      "value": "1"
                    },
                    {
                      "from": "",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "",
                      "type": 1,
                      "value": "0"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(kube_pod_container_status_running{pod=~\".*nats.*\"} or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Nats",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 4,
              "y": 5
            },
            "id": 69,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "id": 0,
                      "op": "=",
                      "text": "ON",
                      "type": 1,
                      "value": "1"
                    },
                    {
                      "from": "",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "",
                      "type": 1,
                      "value": "0"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(kube_pod_container_status_running{pod=~\".*oran.*\"} or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Oran",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 6,
              "y": 5
            },
            "id": 71,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "0",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "2",
                      "type": 2,
                      "value": ""
                    },
                    {
                      "from": "",
                      "id": 2,
                      "operator": "",
                      "text": "ON",
                      "to": "",
                      "type": 1,
                      "value": "3"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 2
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "((sum(kube_pod_container_status_running{pod=~\".*provisioner.*\"}) + sum(kube_pod_container_status_running{pod=~\".*nginx.*\"})) or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Provisioner",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 8,
              "y": 5
            },
            "id": 70,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "id": 0,
                      "op": "=",
                      "text": "ON",
                      "type": 1,
                      "value": "1"
                    },
                    {
                      "from": "",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "",
                      "type": 1,
                      "value": "0"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(kube_pod_container_status_running{pod=~\".*-dash-front-back-end.*\"} or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Web GUI",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 10,
              "y": 5
            },
            "id": 72,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "",
                      "type": 1,
                      "value": "0"
                    },
                    {
                      "from": "",
                      "id": 2,
                      "operator": "",
                      "text": "ON",
                      "to": "",
                      "type": 1,
                      "value": "1"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(kube_pod_container_status_running{pod=~\".*-druid.*\"} or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Druid",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 0,
              "y": 9
            },
            "id": 74,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "0",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "1",
                      "type": 2,
                      "value": "0"
                    },
                    {
                      "from": "2",
                      "id": 4,
                      "operator": "",
                      "text": "ON",
                      "to": "200",
                      "type": 2,
                      "value": ""
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 2
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "((sum(kube_pod_container_status_running{pod=~\".*-kafka.*\",pod!=\".*-kafka-config.*\"})+sum(kube_pod_container_status_running{pod=~\".*-zookeeper.*\"}))or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Kafka",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 2,
              "y": 9
            },
            "id": 75,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "",
                      "type": 1,
                      "value": "0"
                    },
                    {
                      "from": "",
                      "id": 2,
                      "operator": "",
                      "text": "ON",
                      "to": "",
                      "type": 1,
                      "value": "1"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(kube_pod_container_status_running{pod=~\".*-nkafka.*\"} or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "NKafka",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 4,
              "y": 9
            },
            "id": 76,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "0",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "6",
                      "type": 2,
                      "value": "0"
                    },
                    {
                      "from": "",
                      "id": 2,
                      "operator": "",
                      "text": "ON",
                      "to": "",
                      "type": 1,
                      "value": "7"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 7
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(sum(kube_pod_container_status_running{pod=~\".*-prometheus.*\"}) or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Prometheus",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 6,
              "y": 9
            },
            "id": 77,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "0",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "1",
                      "type": 2,
                      "value": ""
                    },
                    {
                      "from": "",
                      "id": 2,
                      "operator": "",
                      "text": "ON",
                      "to": "",
                      "type": 1,
                      "value": "2"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 2
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "((sum(kube_pod_container_status_running{pod=~\".*-kube-eagle.*\"})+sum(kube_pod_container_status_running{pod=~\".*-metrics-server.*\"})) or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Metrics",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 8,
              "y": 9
            },
            "id": 78,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "0",
                      "id": 5,
                      "operator": "",
                      "text": "OFF",
                      "to": "1",
                      "type": 2,
                      "value": ""
                    },
                    {
                      "from": "2",
                      "id": 6,
                      "operator": "",
                      "text": "ON",
                      "to": "100",
                      "type": 2,
                      "value": ""
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 2
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(sum(kube_pod_container_status_running{pod=~\".*loki.*\"}) or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Loki",
            "type": "stat"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 4,
              "w": 2,
              "x": 10,
              "y": 9
            },
            "id": 73,
            "links": [],
            "options": {
              "colorMode": "background",
              "fieldOptions": {
                "calcs": [
                  "first"
                ],
                "defaults": {
                  "mappings": [
                    {
                      "from": "",
                      "id": 1,
                      "operator": "",
                      "text": "OFF",
                      "to": "",
                      "type": 1,
                      "value": "0"
                    },
                    {
                      "from": "",
                      "id": 2,
                      "operator": "",
                      "text": "ON",
                      "to": "",
                      "type": 1,
                      "value": "1"
                    }
                  ],
                  "nullValueMode": "connected",
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "red",
                        "value": null
                      },
                      {
                        "color": "green",
                        "value": 1
                      }
                    ]
                  },
                  "unit": "none"
                },
                "overrides": [],
                "values": false
              },
              "graphMode": "area",
              "justifyMode": "center",
              "orientation": "horizontal"
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "(kube_pod_container_status_running{pod=~\".*-grafana.*\"} or kube_pod_container_status_running{pod=~\"kube-apiserver-.*\"}-1)",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "",
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Grafana",
            "type": "stat"
          },
          {
            "collapsed": false,
            "datasource": null,
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 13
            },
            "id": 63,
            "panels": [],
            "title": "RAM Information",
            "type": "row"
          },
          {
            "datasource": null,
            "gridPos": {
              "h": 7,
              "w": 9,
              "x": 0,
              "y": 14
            },
            "id": 40,
            "interval": "",
            "options": {
              "fieldOptions": {
                "calcs": [
                  "mean"
                ],
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "decimals": 1,
                  "mappings": [],
                  "max": 1,
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "yellow",
                        "value": 0.7
                      },
                      {
                        "color": "red",
                        "value": 0.9
                      }
                    ]
                  },
                  "unit": "percentunit"
                },
                "overrides": [],
                "values": false
              },
              "orientation": "auto",
              "showThresholdLabels": false,
              "showThresholdMarkers": true
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "sum(eagle_node_resource_usage_memory_bytes)/sum(eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"})",
                "instant": false,
                "legendFormat": "Total RAM Usage",
                "refId": "A"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_memory_bytes{node=~\"$Node\"})/sum(eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"})",
                "instant": false,
                "legendFormat": "Node RAM Usage",
                "refId": "B"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_memory_bytes{node=~\"$Node\", pod=~\"$Pod\"})/sum(eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"})",
                "instant": false,
                "legendFormat": "Pod RAM Usage",
                "refId": "C"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_memory_bytes{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"})/sum(eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"})",
                "instant": false,
                "legendFormat": "Container RAM Usage",
                "refId": "D"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "RAM Usage",
            "type": "gauge"
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": null,
            "fill": 1,
            "fillGradient": 0,
            "gridPos": {
              "h": 7,
              "w": 7,
              "x": 9,
              "y": 14
            },
            "hiddenSeries": false,
            "id": 39,
            "interval": "",
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pluginVersion": "6.5.2",
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "sum(eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"})",
                "legendFormat": "Allocatable RAM",
                "refId": "B"
              },
              {
                "expr": "sum(eagle_node_resource_usage_memory_bytes{node=~\"$Node\"})",
                "legendFormat": "Total RAM Usage",
                "refId": "A"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_memory_bytes{node=~\"$Node\"})",
                "legendFormat": "Node RAM Usage",
                "refId": "C"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_memory_bytes{node=~\"$Node\", pod=~\"$Pod\"})",
                "legendFormat": "Pod RAM Usage",
                "refId": "D"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_memory_bytes{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"})",
                "legendFormat": "Container RAM Usage",
                "refId": "E"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "RAM Usage History",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "decbytes",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "columns": [],
            "datasource": null,
            "fontSize": "100%",
            "gridPos": {
              "h": 7,
              "w": 8,
              "x": 16,
              "y": 14
            },
            "id": 49,
            "links": [],
            "options": {},
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 7,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "align": "auto",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "hidden"
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "node",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Requested RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Limit RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Allocatable RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #C",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "RAM Reserved",
                "align": "auto",
                "colorMode": "cell",
                "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(245, 54, 54, 0.9)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #D",
                "thresholds": [
                  "0.6",
                  "0.8"
                ],
                "type": "number",
                "unit": "percentunit"
              },
              {
                "alias": "RAM Burstable",
                "align": "auto",
                "colorMode": "cell",
                "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(245, 54, 54, 0.9)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #E",
                "thresholds": [
                  "1.5",
                  "3"
                ],
                "type": "number",
                "unit": "percentunit"
              },
              {
                "alias": "RAM Usage",
                "align": "auto",
                "colorMode": "cell",
                "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(245, 54, 54, 0.9)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #F",
                "thresholds": [
                  "0.4",
                  "0.6"
                ],
                "type": "number",
                "unit": "percentunit"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "sum(eagle_node_resource_requests_memory_bytes{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "A"
              },
              {
                "expr": "sum(eagle_node_resource_limits_memory_bytes{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "B"
              },
              {
                "expr": "sum(eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "C"
              },
              {
                "expr": "sum(eagle_node_resource_requests_memory_bytes{node=~\"$Node\"} / eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "D"
              },
              {
                "expr": "sum(eagle_node_resource_limits_memory_bytes{node=~\"$Node\"} / eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "E"
              },
              {
                "expr": "sum(eagle_node_resource_usage_memory_bytes{node=~\"$Node\"} / eagle_node_resource_allocatable_memory_bytes{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "F"
              }
            ],
            "title": "Node RAM Information",
            "transform": "table",
            "type": "table"
          },
          {
            "columns": [],
            "datasource": null,
            "fontSize": "100%",
            "gridPos": {
              "h": 7,
              "w": 11,
              "x": 0,
              "y": 21
            },
            "id": 56,
            "links": [],
            "options": {},
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 5,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "align": "auto",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "hidden"
              },
              {
                "alias": "Container",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "container",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Pod",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "pod",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Requested RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Limit RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Used RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #C",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Namespace",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "namespace",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "node",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "Usage RAM",
                "align": "auto",
                "colorMode": "cell",
                "colors": [
                  "#37872D",
                  "#FA6400",
                  "#C4162A"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #D",
                "thresholds": [
                  "0.7",
                  "0.9"
                ],
                "type": "number",
                "unit": "percentunit"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "sum (eagle_pod_container_resource_requests_memory_bytes{node=~\"$Node\", pod=~\"$Pod\"}) by (pod, node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "A"
              },
              {
                "expr": "sum (eagle_pod_container_resource_limits_memory_bytes{node=~\"$Node\", pod=~\"$Pod\"}) by (pod, node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "B"
              },
              {
                "expr": "sum (eagle_pod_container_resource_usage_memory_bytes{node=~\"$Node\", pod=~\"$Pod\"}) by (pod, node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "C"
              }
            ],
            "title": "Pod RAM Information",
            "transform": "table",
            "type": "table"
          },
          {
            "columns": [],
            "datasource": null,
            "fontSize": "100%",
            "gridPos": {
              "h": 7,
              "w": 13,
              "x": 11,
              "y": 21
            },
            "id": 44,
            "links": [],
            "options": {},
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 6,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "align": "auto",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "hidden"
              },
              {
                "alias": "Container",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "container",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Pod",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "pod",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Requested RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Limit RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Usage RAM",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #C",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Namespace",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "namespace",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "node",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "sum (eagle_pod_container_resource_requests_memory_bytes{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"}) by (node, pod, container)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "A"
              },
              {
                "expr": "sum (eagle_pod_container_resource_limits_memory_bytes{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"}) by (node, pod, container)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "B"
              },
              {
                "expr": "sum (eagle_pod_container_resource_usage_memory_bytes{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"}) by (node, pod, container)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "C"
              }
            ],
            "title": "Container RAM Information",
            "transform": "table",
            "type": "table"
          },
          {
            "collapsed": false,
            "datasource": null,
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 28
            },
            "id": 31,
            "panels": [],
            "title": "CPU Information",
            "type": "row"
          },
          {
            "datasource": null,
            "gridPos": {
              "h": 7,
              "w": 9,
              "x": 0,
              "y": 29
            },
            "id": 41,
            "options": {
              "fieldOptions": {
                "calcs": [
                  "mean"
                ],
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "decimals": 1,
                  "mappings": [],
                  "max": 1,
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "yellow",
                        "value": 0.7
                      },
                      {
                        "color": "red",
                        "value": 0.9
                      }
                    ]
                  },
                  "unit": "percentunit"
                },
                "overrides": [],
                "values": false
              },
              "orientation": "auto",
              "showThresholdLabels": false,
              "showThresholdMarkers": true
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "sum(eagle_node_resource_usage_cpu_cores{node=~\"$Node\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Total CPU Usage",
                "refId": "A"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_cpu_cores{node=~\"$Node\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Node CPU Usage",
                "refId": "B"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_cpu_cores{node=~\"$Node\", pod=~\"$Pod\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Pod CPU Usage",
                "refId": "C"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_cpu_cores{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Container CPU Usage",
                "refId": "D"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "CPU Usage",
            "type": "gauge"
          },
          {
            "aliasColors": {
              "Busy": "#EAB839",
              "Busy Iowait": "#890F02",
              "Busy other": "#1F78C1",
              "Idle": "#052B51",
              "Idle - Waiting for something to happen": "#052B51",
              "guest": "#9AC48A",
              "idle": "#052B51",
              "iowait": "#EAB839",
              "irq": "#BF1B00",
              "nice": "#C15C17",
              "softirq": "#E24D42",
              "steal": "#FCE2DE",
              "system": "#508642",
              "user": "#5195CE"
            },
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Prometheus",
            "decimals": 2,
            "description": "Basic CPU info",
            "fill": 4,
            "fillGradient": 0,
            "gridPos": {
              "h": 7,
              "w": 7,
              "x": 9,
              "y": 29
            },
            "hiddenSeries": false,
            "id": 47,
            "legend": {
              "alignAsTable": false,
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "rightSide": false,
              "show": true,
              "sideWidth": 250,
              "sort": null,
              "sortDesc": null,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "links": [],
            "maxPerRow": 6,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": true,
            "pointradius": 5,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [
              {
                "alias": "Allocatable CPU",
                "color": "#890F02"
              },
              {
                "alias": "Allocatable CPU",
                "color": "#7EB26D"
              },
              {
                "alias": "Total CPU Usage",
                "color": "#EAB839"
              },
              {
                "alias": "Busy User",
                "color": "#0A437C"
              },
              {
                "alias": "Busy Other",
                "color": "#6D1F62"
              }
            ],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Allocatable CPU",
                "refId": "A"
              },
              {
                "expr": "sum(eagle_node_resource_usage_cpu_cores{node=~\"$Node\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Total CPU Usage",
                "refId": "B"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_cpu_cores{node=~\"$Node\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Node CPU Usage",
                "refId": "C"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_cpu_cores{node=~\"$Node\", pod=~\"$Pod\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Pod CPU Usage",
                "refId": "D"
              },
              {
                "expr": "sum(eagle_pod_container_resource_usage_cpu_cores{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"})/sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"})",
                "legendFormat": "Container CPU Usage",
                "refId": "E"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "CPU Usage History",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "decimals": null,
                "format": "percentunit",
                "label": "",
                "logBase": 1,
                "max": "1.1",
                "min": "0",
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": false
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "columns": [],
            "datasource": null,
            "fontSize": "100%",
            "gridPos": {
              "h": 7,
              "w": 8,
              "x": 16,
              "y": 29
            },
            "id": 42,
            "links": [],
            "options": {},
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 7,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "align": "auto",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "hidden"
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "node",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Requested Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Limit Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Allocatable Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #C",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "CPU Reserved",
                "align": "auto",
                "colorMode": "cell",
                "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(245, 54, 54, 0.9)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #D",
                "thresholds": [
                  "0.6",
                  "0.8"
                ],
                "type": "number",
                "unit": "percentunit"
              },
              {
                "alias": "CPU Burstable",
                "align": "auto",
                "colorMode": "cell",
                "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(245, 54, 54, 0.9)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #E",
                "thresholds": [
                  "1.5",
                  "3"
                ],
                "type": "number",
                "unit": "percentunit"
              },
              {
                "alias": "CPU Usage",
                "align": "auto",
                "colorMode": "cell",
                "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(245, 54, 54, 0.9)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #F",
                "thresholds": [
                  "0.4",
                  "0.6"
                ],
                "type": "number",
                "unit": "percentunit"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "sum(eagle_node_resource_requests_cpu_cores{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "A"
              },
              {
                "expr": "sum(eagle_node_resource_limits_cpu_cores{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "B"
              },
              {
                "expr": "sum(eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "C"
              },
              {
                "expr": "sum(eagle_node_resource_requests_cpu_cores{node=~\"$Node\"} / eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "D"
              },
              {
                "expr": "sum(eagle_node_resource_limits_cpu_cores{node=~\"$Node\"} / eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "E"
              },
              {
                "expr": "sum(eagle_node_resource_usage_cpu_cores{node=~\"$Node\"} / eagle_node_resource_allocatable_cpu_cores{node=~\"$Node\"}) by (node)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "F"
              }
            ],
            "title": "Node CPU Information",
            "transform": "table",
            "type": "table"
          },
          {
            "columns": [],
            "datasource": null,
            "fontSize": "100%",
            "gridPos": {
              "h": 7,
              "w": 11,
              "x": 0,
              "y": 36
            },
            "id": 45,
            "links": [],
            "options": {},
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 6,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "align": "auto",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "hidden"
              },
              {
                "alias": "Container",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "container",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Pod",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "pod",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Requested Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Limit Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Usage Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #C",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Namespace",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "namespace",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "node",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "sum (eagle_pod_container_resource_requests_cpu_cores{node=~\"$Node\", pod=~\"$Pod\"}) by (node, pod)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "A"
              },
              {
                "expr": "sum (eagle_pod_container_resource_limits_cpu_cores{node=~\"$Node\", pod=~\"$Pod\"}) by (node, pod)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "B"
              },
              {
                "expr": "sum (eagle_pod_container_resource_usage_cpu_cores{node=~\"$Node\", pod=~\"$Pod\"}) by (node, pod)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "C"
              }
            ],
            "title": "Pod CPU Information",
            "transform": "table",
            "type": "table"
          },
          {
            "columns": [],
            "datasource": null,
            "fontSize": "100%",
            "gridPos": {
              "h": 7,
              "w": 13,
              "x": 11,
              "y": 36
            },
            "id": 57,
            "links": [],
            "options": {},
            "pageSize": null,
            "scroll": true,
            "showHeader": true,
            "sort": {
              "col": 6,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "align": "auto",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "hidden"
              },
              {
                "alias": "Container",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "container",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Pod",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "pod",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Requested Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Limit Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Usage Cores",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #C",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Namespace",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "namespace",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "node",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "sum (eagle_pod_container_resource_requests_cpu_cores{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"}) by (node, pod, container)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "legendFormat": "",
                "refId": "A"
              },
              {
                "expr": "sum (eagle_pod_container_resource_limits_cpu_cores{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"}) by (node, pod, container)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "B"
              },
              {
                "expr": "sum (eagle_pod_container_resource_usage_cpu_cores{node=~\"$Node\", pod=~\"$Pod\", container=~\"$Container\"}) by (node, pod, container)",
                "format": "table",
                "instant": true,
                "intervalFactor": 1,
                "refId": "C"
              }
            ],
            "title": "Container CPU Information",
            "transform": "table",
            "type": "table"
          },
          {
            "collapsed": false,
            "datasource": null,
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 43
            },
            "id": 15,
            "panels": [],
            "title": "Network Information",
            "type": "row"
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": null,
            "fill": 1,
            "fillGradient": 0,
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 44
            },
            "hiddenSeries": false,
            "id": 59,
            "interval": "",
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "sum(rate(container_network_transmit_bytes_total[5m]))",
                "format": "time_series",
                "hide": false,
                "instant": false,
                "legendFormat": "Total TX Traffic",
                "refId": "C"
              },
              {
                "expr": "sum(rate(container_network_transmit_bytes_total{kubernetes_io_hostname=~\"$Node\"}[5m]))",
                "format": "time_series",
                "hide": false,
                "instant": false,
                "legendFormat": "Node TX Traffic",
                "refId": "A"
              },
              {
                "expr": "sum(rate(container_network_transmit_bytes_total{kubernetes_io_hostname=~\"$Node\", pod=~\"$Pod\"}[5m]))",
                "format": "time_series",
                "hide": false,
                "instant": false,
                "legendFormat": "Pod TX Traffic",
                "refId": "B"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "TX Traffic",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "Bps",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": null,
            "fill": 1,
            "fillGradient": 0,
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 44
            },
            "hiddenSeries": false,
            "id": 60,
            "interval": "",
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "sum(rate(container_network_receive_bytes_total[5m]))",
                "format": "time_series",
                "hide": false,
                "instant": false,
                "legendFormat": "Total RX Traffic",
                "refId": "C"
              },
              {
                "expr": "sum(rate(container_network_receive_bytes_total{kubernetes_io_hostname=~\"$Node\"}[5m]))",
                "format": "time_series",
                "hide": false,
                "instant": false,
                "legendFormat": "Node RX Traffic",
                "refId": "A"
              },
              {
                "expr": "sum(rate(container_network_receive_bytes_total{kubernetes_io_hostname=~\"$Node\", pod=~\"$Pod\"}[5m]))",
                "format": "time_series",
                "hide": false,
                "instant": false,
                "legendFormat": "Pod RX Traffic",
                "refId": "B"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "RX Traffic",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "Bps",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "collapsed": false,
            "datasource": null,
            "gridPos": {
              "h": 1,
              "w": 24,
              "x": 0,
              "y": 52
            },
            "id": 7,
            "panels": [],
            "title": "Disk Space Information",
            "type": "row"
          },
          {
            "cacheTimeout": null,
            "datasource": "Prometheus",
            "gridPos": {
              "h": 7,
              "w": 4,
              "x": 0,
              "y": 53
            },
            "id": 48,
            "links": [],
            "options": {
              "fieldOptions": {
                "calcs": [
                  "mean"
                ],
                "defaults": {
                  "color": {
                    "mode": "thresholds"
                  },
                  "mappings": [],
                  "max": 1,
                  "min": 0,
                  "thresholds": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "yellow",
                        "value": 0.7
                      },
                      {
                        "color": "red",
                        "value": 0.9
                      }
                    ]
                  },
                  "unit": "percentunit"
                },
                "overrides": [],
                "values": false
              },
              "orientation": "auto",
              "showThresholdLabels": false,
              "showThresholdMarkers": true
            },
            "pluginVersion": "6.6.2",
            "targets": [
              {
                "expr": "sum(container_fs_usage_bytes{device=~\"^/dev/.*$\",id=\"/\"}) /sum (container_fs_limit_bytes{device=~\"^/dev/.*$\",id=\"/\"})",
                "refId": "A"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Disk Usage",
            "type": "gauge"
          },
          {
            "aliasColors": {},
            "bars": false,
            "cacheTimeout": null,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Prometheus",
            "fill": 1,
            "fillGradient": 0,
            "gridPos": {
              "h": 7,
              "w": 8,
              "x": 4,
              "y": 53
            },
            "hiddenSeries": false,
            "id": 54,
            "interval": "",
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "links": [],
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pluginVersion": "6.5.2",
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "(container_fs_limit_bytes{device=~\"^/dev/.*$\",id=\"/\",kubernetes_io_hostname=~\"$Node\"})",
                "legendFormat": "Total Disk Usage",
                "refId": "A"
              },
              {
                "expr": "sum by (kubernetes_io_hostname)(container_fs_usage_bytes{device=~\"^/dev/.*$\",id=\"/\"})",
                "legendFormat": "Node {{kubernetes_io_hostname}}",
                "refId": "B"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Disk Usage History",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "decbytes",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "cacheTimeout": null,
            "columns": [],
            "datasource": "Prometheus",
            "fontSize": "100%",
            "gridPos": {
              "h": 7,
              "w": 12,
              "x": 12,
              "y": 53
            },
            "id": 55,
            "links": [],
            "options": {},
            "pageSize": null,
            "pluginVersion": "6.5.2",
            "showHeader": true,
            "sort": {
              "col": 0,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "align": "auto",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "hidden"
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "kubernetes_io_hostname",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "Used Disk Space",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Total Disk Space",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Free Disk Space",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #C",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "sum by (kubernetes_io_hostname)(container_fs_usage_bytes{device=~\"^/dev/.*$\",id=\"/\", kubernetes_io_hostname=~\"$Node\"})",
                "format": "table",
                "hide": false,
                "instant": true,
                "legendFormat": "Node {{kubernetes_io_hostname}}",
                "refId": "B"
              },
              {
                "expr": "sum(container_fs_limit_bytes{device=~\"^/dev/.*$\",id=\"/\", kubernetes_io_hostname=~\"$Node\"})-sum(container_fs_usage_bytes{device=~\"^/dev/.*$\",id=\"/\",kubernetes_io_hostname=~\"$Node\"})",
                "format": "table",
                "hide": false,
                "instant": true,
                "refId": "C"
              },
              {
                "expr": "sum(container_fs_limit_bytes{device=~\"^/dev/.*$\",id=\"/\", kubernetes_io_hostname=~\"$Node\"})",
                "format": "table",
                "hide": false,
                "instant": true,
                "refId": "A"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Disk Usage per Node",
            "transform": "table",
            "type": "table"
          },
          {
            "cacheTimeout": null,
            "columns": [],
            "datasource": "Prometheus",
            "fontSize": "100%",
            "gridPos": {
              "h": 7,
              "w": 24,
              "x": 0,
              "y": 60
            },
            "id": 53,
            "links": [],
            "options": {},
            "pageSize": null,
            "pluginVersion": "6.5.2",
            "showHeader": true,
            "sort": {
              "col": 0,
              "desc": true
            },
            "styles": [
              {
                "alias": "Time",
                "align": "auto",
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "pattern": "Time",
                "type": "hidden"
              },
              {
                "alias": "Disk Space",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #A",
                "thresholds": [],
                "type": "number",
                "unit": "decbytes"
              },
              {
                "alias": "Volume Name",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "persistentvolumeclaim",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "Bound",
                "align": "auto",
                "colorMode": "cell",
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "#37872D",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #C",
                "thresholds": [
                  "1"
                ],
                "type": "string",
                "unit": "short",
                "valueMaps": [
                  {
                    "text": "Yes",
                    "value": "1"
                  },
                  {
                    "text": "No",
                    "value": "0"
                  }
                ]
              },
              {
                "alias": "Node",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "kubernetes_node",
                "thresholds": [],
                "type": "string",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "dateFormat": "YYYY-MM-DD HH:mm:ss",
                "decimals": 2,
                "mappingType": 1,
                "pattern": "Value #B",
                "thresholds": [],
                "type": "hidden",
                "unit": "short"
              },
              {
                "alias": "",
                "align": "auto",
                "colorMode": null,
                "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
                ],
                "decimals": 2,
                "pattern": "/.*/",
                "thresholds": [],
                "type": "number",
                "unit": "short"
              }
            ],
            "targets": [
              {
                "expr": "sum by (kubernetes_node, persistentvolumeclaim) (kube_persistentvolumeclaim_info{kubernetes_node=~\"$Node\"})",
                "format": "table",
                "instant": true,
                "interval": "",
                "refId": "B"
              },
              {
                "expr": "sum by (persistentvolumeclaim)(kube_persistentvolumeclaim_resource_requests_storage_bytes{kubernetes_node=~\"$Node\"})",
                "format": "table",
                "instant": true,
                "interval": "",
                "refId": "A"
              },
              {
                "expr": "sum by (persistentvolumeclaim) (kube_persistentvolumeclaim_status_phase{phase=\"Bound\",kubernetes_node=~\"$Node\"})",
                "format": "table",
                "instant": true,
                "interval": "",
                "refId": "C"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Persistant Volumes",
            "transform": "table",
            "type": "table"
          }
        ],
        "refresh": "",
        "schemaVersion": 22,
        "style": "dark",
        "tags": [],
        "templating": {
          "list": [
            {
              "allValue": ".*",
              "current": {
                "text": "All",
                "value": [
                  "$__all"
                ]
              },
              "datasource": "Prometheus",
              "definition": "label_values(kubernetes_io_hostname)",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": true,
              "name": "Node",
              "options": [],
              "query": "label_values(kubernetes_io_hostname)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "allValue": ".*",
              "current": {
                "text": "All",
                "value": [
                  "$__all"
                ]
              },
              "datasource": "Prometheus",
              "definition": "label_values(kube_pod_info{node=~\"^$Node$\"}, pod)",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": true,
              "name": "Pod",
              "options": [],
              "query": "label_values(kube_pod_info{node=~\"^$Node$\"}, pod)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "allValue": ".*",
              "current": {
                "text": "All",
                "value": [
                  "$__all"
                ]
              },
              "datasource": "Prometheus",
              "definition": "label_values(kube_pod_info{pod=\"$Pod\", node=\"$Node\"}, pod_ip)",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": true,
              "name": "Pod_ip",
              "options": [],
              "query": "label_values(kube_pod_info{pod=\"$Pod\", node=\"$Node\"}, pod_ip)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "allValue": ".*",
              "current": {
                "text": "All",
                "value": [
                  "$__all"
                ]
              },
              "datasource": "Prometheus",
              "definition": "label_values(kube_pod_container_info{pod=\"$Pod\"}, container)",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": true,
              "name": "Container",
              "options": [],
              "query": "label_values(kube_pod_container_info{pod=\"$Pod\"}, container)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            }
          ]
        },
        "time": {
          "from": "now-5m",
          "to": "now"
        },
        "timepicker": {
          "refresh_intervals": [
            "1s",
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
          ]
        },
        "timezone": "",
        "title": "Accelleran dRAX System Dashboard",
        "uid": "yV0DdhyZz",
        "version": 1
      }
  loki-log-dashboard.json:
    |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "description": "Loki logs panel with prometheus variables ",
        "editable": true,
        "gnetId": 12019,
        "graphTooltip": 0,
        "iteration": 1597238823897,
        "links": [],
        "panels": [
          {
            "aliasColors": {},
            "bars": true,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Loki",
            "fill": 1,
            "fillGradient": 0,
            "gridPos": {
              "h": 4,
              "w": 24,
              "x": 0,
              "y": 0
            },
            "hiddenSeries": false,
            "id": 6,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": false,
              "total": false,
              "values": false
            },
            "lines": false,
            "linewidth": 1,
            "maxDataPoints": "",
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "expr": "sum(count_over_time({namespace=\"$namespace\", instance=~\"$Pod\", node=~\"$Node\", container=~\"$Container\"} |~ \"$search\"[$__interval]))",
                "refId": "A"
              },
              {
                "expr": "sum(count_over_time({source=~\"$Layer2\"} |~ \"$search\"[$__interval]))",
                "refId": "B"
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Log timeline",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": false
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": false
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "datasource": "Loki",
            "gridPos": {
              "h": 25,
              "w": 24,
              "x": 0,
              "y": 4
            },
            "id": 2,
            "maxDataPoints": "",
            "options": {
              "showLabels": true,
              "showTime": true,
              "sortOrder": "Ascending",
              "wrapLogMessage": true
            },
            "targets": [
              {
                "expr": "{namespace=\"$namespace\", instance=~\"$Pod\", node=~\"$Node\", container=~\"$Container\"} |~ \"$search\" ",
                "hide": false,
                "refId": "A"
              },
              {
                "expr": "{source=~\"$Layer2\"} |~ \"$search\" ",
                "hide": false,
                "refId": "B"
              }
            ],
            "timeFrom": null,
            "timeShift": null,
            "title": "Logs Panel",
            "type": "logs"
          },
          {
            "content": "<div style=\"text-align:center\"> For Grafana Loki blog example </div>\n\n\n",
            "datasource": null,
            "gridPos": {
              "h": 3,
              "w": 24,
              "x": 0,
              "y": 29
            },
            "id": 4,
            "mode": "html",
            "options": {},
            "timeFrom": null,
            "timeShift": null,
            "title": "",
            "transparent": true,
            "type": "text"
          }
        ],
        "schemaVersion": 22,
        "style": "dark",
        "tags": [],
        "templating": {
          "list": [
            {
              "allValue": null,
              "current": {
                "selected": true,
                "text": "default",
                "value": "default"
              },
              "datasource": "Prometheus",
              "definition": "label_values(kube_pod_info, namespace)",
              "hide": 0,
              "includeAll": false,
              "index": -1,
              "label": null,
              "multi": false,
              "name": "namespace",
              "options": [],
              "query": "label_values(kube_pod_info, namespace)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "allValue": ".*",
              "current": {
                "text": "All",
                "value": [
                  "$__all"
                ]
              },
              "datasource": "Prometheus",
              "definition": "label_values(kubernetes_io_hostname)",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": true,
              "name": "Node",
              "options": [
                {
                  "selected": true,
                  "text": "All",
                  "value": "$__all"
                },
                {
                  "selected": false,
                  "text": "drax03",
                  "value": "drax03"
                }
              ],
              "query": "label_values(kubernetes_io_hostname)",
              "refresh": 0,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "allValue": ".*",
              "current": {
                "text": "l3-lange-koepoortstraat",
                "value": [
                  "l3-lange-koepoortstraat"
                ]
              },
              "datasource": "Prometheus",
              "definition": "label_values(kube_pod_info{node=~\"^$Node$\"}, pod)",
              "hide": 0,
              "includeAll": true,
              "index": -1,
              "label": null,
              "multi": true,
              "name": "Pod",
              "options": [],
              "query": "label_values(kube_pod_info{node=~\"^$Node$\"}, pod)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "allValue": ".*",
              "current": {
                "text": "All",
                "value": [
                  "$__all"
                ]
              },
              "datasource": "Prometheus",
              "definition": "label_values(kube_pod_container_info{pod=\"$Pod\"}, container)",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": true,
              "name": "Container",
              "options": [],
              "query": "label_values(kube_pod_container_info{pod=\"$Pod\"}, container)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "current": {
                "selected": true,
                "text": "",
                "value": ""
              },
              "hide": 0,
              "label": null,
              "name": "search",
              "options": [
                {
                  "selected": true,
                  "text": "",
                  "value": ""
                }
              ],
              "query": "",
              "skipUrlSync": false,
              "type": "textbox"
            },
            {
              "allValue": null,
              "current": {
                "selected": true,
                "text": "L2-Lange-Koepoortstraat",
                "value": "L2-Lange-Koepoortstraat"
              },
              "datasource": "Loki",
              "definition": "label_values(source)",
              "hide": 0,
              "includeAll": false,
              "label": null,
              "multi": false,
              "name": "Layer2",
              "options": [],
              "query": "label_values(source)",
              "refresh": 1,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            }
          ]
        },
        "time": {
          "from": "now-5m",
          "to": "now"
        },
        "timepicker": {
          "refresh_intervals": [
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
          ]
        },
        "timezone": "",
        "title": "Loki Log Dashboard",
        "uid": "liz0yRCZz",
        "version": 1
      }
  monitor-dashboard.json:
    |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": "-- Grafana --",
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "description": "Monitors the basic KPIs reported by RIC",
        "editable": true,
        "gnetId": null,
        "graphTooltip": 0,
        "iteration": 1588173696113,
        "links": [],
        "panels": [
          {
            "aliasColors": {
              "\"8eb8a807-39c7-4ea0-9af4-5b6027dac1e9\"": "blue"
            },
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Druid",
            "fill": 1,
            "fillGradient": 2,
            "gridPos": {
              "h": 15,
              "w": 12,
              "x": 0,
              "y": 0
            },
            "hiddenSeries": false,
            "id": 4,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldName": "throughputReport.dlThroughput",
                    "hidden": true,
                    "name": "dlThroughputS",
                    "type": "doubleSum"
                  },
                  {
                    "hidden": true,
                    "name": "dlThroughputC",
                    "type": "count"
                  }
                ],
                "alias": "$tag_ueRicId",
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {
                  "customGranularity": "Invalid granularity."
                },
                "filters": [
                  {
                    "dimension": "throughputReport.ueRicId",
                    "pattern": "$ue",
                    "type": "regex",
                    "value": "$ue"
                  },
                  {
                    "dimension": "throughputReport.cellId",
                    "pattern": "$cell",
                    "type": "regex",
                    "value": "$cell"
                  }
                ],
                "limit": 5,
                "measurement": "throughput",
                "orderByTime": "ASC",
                "policy": "default",
                "postAggregators": [
                  {
                    "fields": [
                      {
                        "fieldName": "dlThroughputS",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "dlThroughputC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "dlThroughput",
                    "type": "arithmetic"
                  }
                ],
                "queryType": "timeseries",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "dlthroughput"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    }
                  ]
                ],
                "shouldOverrideGranularity": true,
                "tags": [
                  {
                    "key": "ueRicId",
                    "operator": "=~",
                    "value": "/^$ue$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Downlink Throughput",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "transparent": true,
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "decimals": 0,
                "format": "Kbits",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": "0",
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "cacheTimeout": null,
            "colorBackground": false,
            "colorValue": false,
            "colors": [
              "#299c46",
              "rgba(237, 129, 40, 0.89)",
              "#d44a3a"
            ],
            "datasource": "Druid",
            "format": "none",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 6,
              "w": 6,
              "x": 12,
              "y": 0
            },
            "id": 10,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "pluginVersion": "6.4.3",
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": false,
              "lineColor": "rgb(31, 120, 193)",
              "show": false,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldName": "ueMeasurement.ueCellId",
                    "name": "cellId",
                    "type": "stringLast"
                  }
                ],
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {
                  "aggregators": "You must supply at least one aggregator"
                },
                "filters": [
                  {
                    "dimension": "ueMeasurement.ueRicId",
                    "pattern": "$ue",
                    "type": "regex",
                    "value": "$ue"
                  }
                ],
                "limit": 5,
                "queryType": "timeseries",
                "refId": "A",
                "shouldOverrideGranularity": true
              }
            ],
            "thresholds": "",
            "timeFrom": null,
            "timeShift": null,
            "title": "Serving Cell",
            "transparent": true,
            "type": "singlestat",
            "valueFontSize": "100%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "current"
          },
          {
            "cacheTimeout": null,
            "colorBackground": false,
            "colorPrefix": false,
            "colorValue": true,
            "colors": [
              "#E0B400",
              "rgba(237, 129, 40, 0.89)",
              "#d44a3a"
            ],
            "datasource": "Druid",
            "decimals": 0,
            "format": "none",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 6,
              "w": 3,
              "x": 18,
              "y": 0
            },
            "id": 8,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": false,
              "lineColor": "rgb(31, 120, 193)",
              "show": false,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldName": "ueMeasurement.cellId",
                    "fieldNames": "beaconInfo.componentId",
                    "hidden": false,
                    "name": "number",
                    "type": "cardinality"
                  }
                ],
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {
                  "aggregators": "You must supply at least one aggregator",
                  "customGranularity": "Invalid granularity."
                },
                "filters": [
                  {
                    "dimension": "beaconInfo.componentId",
                    "negate": true,
                    "type": "selector",
                    "value": ""
                  }
                ],
                "groupBy": [],
                "limit": 5,
                "measurement": "existence",
                "orderByTime": "ASC",
                "policy": "default",
                "query": "SELECT COUNT(DISTINCT(\"cellId\") ) FROM (SELECT \"cellId\",allOnAir FROM \"cell_info\" WHERE time > now() - 5s) where allOnAir = 1",
                "queryType": "timeseries",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "table",
                "select": [
                  [
                    {
                      "params": [
                        "ue"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "distinct"
                    }
                  ]
                ],
                "shouldOverrideGranularity": true,
                "tags": []
              }
            ],
            "thresholds": "",
            "timeFrom": null,
            "timeShift": null,
            "title": "Number of Cells",
            "transparent": true,
            "type": "singlestat",
            "valueFontSize": "200%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "current"
          },
          {
            "cacheTimeout": null,
            "colorBackground": false,
            "colorPostfix": false,
            "colorValue": true,
            "colors": [
              "#E0B400",
              "rgba(237, 129, 40, 0.89)",
              "#d44a3a"
            ],
            "datasource": "Druid",
            "decimals": 0,
            "format": "none",
            "gauge": {
              "maxValue": 100,
              "minValue": 0,
              "show": false,
              "thresholdLabels": false,
              "thresholdMarkers": true
            },
            "gridPos": {
              "h": 6,
              "w": 3,
              "x": 21,
              "y": 0
            },
            "id": 7,
            "interval": null,
            "links": [],
            "mappingType": 1,
            "mappingTypes": [
              {
                "name": "value to text",
                "value": 1
              },
              {
                "name": "range to text",
                "value": 2
              }
            ],
            "maxDataPoints": 100,
            "nullPointMode": "connected",
            "nullText": null,
            "options": {},
            "pluginVersion": "6.5.3",
            "postfix": "",
            "postfixFontSize": "50%",
            "prefix": "",
            "prefixFontSize": "50%",
            "rangeMaps": [
              {
                "from": "null",
                "text": "N/A",
                "to": "null"
              }
            ],
            "sparkline": {
              "fillColor": "rgba(31, 118, 189, 0.18)",
              "full": false,
              "lineColor": "rgb(31, 120, 193)",
              "show": false,
              "ymax": null,
              "ymin": null
            },
            "tableColumn": "",
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldNames": "ueMeasurement.ueRicId",
                    "name": "number",
                    "type": "cardinality"
                  }
                ],
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {},
                "filters": [
                  {
                    "dimension": "ueMeasurement.ueRicId",
                    "negate": true,
                    "type": "selector",
                    "value": ""
                  }
                ],
                "limit": 5,
                "queryType": "timeseries",
                "refId": "A",
                "shouldOverrideGranularity": true
              }
            ],
            "thresholds": "",
            "timeFrom": null,
            "timeShift": null,
            "title": "Number of UEs",
            "transparent": true,
            "type": "singlestat",
            "valueFontSize": "200%",
            "valueMaps": [
              {
                "op": "=",
                "text": "N/A",
                "value": "null"
              }
            ],
            "valueName": "current"
          },
          {
            "aliasColors": {
              "RSRP \"Antwerp\"": "orange"
            },
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Druid",
            "fill": 1,
            "fillGradient": 2,
            "gridPos": {
              "h": 9,
              "w": 12,
              "x": 12,
              "y": 6
            },
            "hiddenSeries": false,
            "id": 2,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldName": "ueMeasurement.rsrp",
                    "hidden": true,
                    "name": "_rsrp",
                    "type": "longSum"
                  },
                  {
                    "hidden": true,
                    "name": "count",
                    "type": "count"
                  }
                ],
                "alias": "RSRP $tag_cellId",
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {
                  "customGranularity": "Invalid granularity."
                },
                "filters": [
                  {
                    "dimension": "ueMeasurement.ueRicId",
                    "pattern": "$ue",
                    "type": "regex",
                    "value": "$ue"
                  },
                  {
                    "dimension": "ueMeasurement.attached",
                    "type": "selector",
                    "value": "1"
                  },
                  {
                    "dimension": "ueMeasurement.cellId",
                    "pattern": "$cell",
                    "type": "regex"
                  }
                ],
                "limit": 5,
                "measurement": "measurement",
                "orderByTime": "ASC",
                "policy": "default",
                "postAggregators": [
                  {
                    "fields": [
                      {
                        "fieldName": "_rsrp",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "count",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "rsrp",
                    "type": "arithmetic"
                  }
                ],
                "query": "SELECT \"rsrp\" FROM \"measurement\" WHERE (\"ueRicId\" =~ /^$ue$/) AND $timeFilter GROUP BY \"cellId\", \"ueRicId\"",
                "queryType": "timeseries",
                "rawQuery": true,
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "rsrp"
                      ],
                      "type": "field"
                    }
                  ]
                ],
                "shouldOverrideGranularity": true,
                "tags": [
                  {
                    "key": "ueRicId",
                    "operator": "=~",
                    "value": "/^$ue$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "RSRP",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "transparent": true,
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "decimals": 0,
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": "0",
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {
              "\"8eb8a807-39c7-4ea0-9af4-5b6027dac1e9\"": "blue"
            },
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Druid",
            "fill": 1,
            "fillGradient": 2,
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 15
            },
            "hiddenSeries": false,
            "id": 12,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldName": "throughputReport.ulThroughput",
                    "hidden": true,
                    "name": "ulThroughputS",
                    "type": "doubleSum"
                  },
                  {
                    "hidden": true,
                    "name": "ulThroughputC",
                    "type": "count"
                  }
                ],
                "alias": "$tag_ueRicId",
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {
                  "customGranularity": "Invalid granularity."
                },
                "filters": [
                  {
                    "dimension": "throughputReport.ueRicId",
                    "pattern": "$ue",
                    "type": "regex",
                    "value": "$ue"
                  },
                  {
                    "dimension": "throughputReport.cellId",
                    "pattern": "$cell",
                    "type": "regex",
                    "value": "$cell"
                  }
                ],
                "limit": 5,
                "measurement": "throughput",
                "orderByTime": "ASC",
                "policy": "default",
                "postAggregators": [
                  {
                    "fields": [
                      {
                        "fieldName": "ulThroughputS",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "ulThroughputC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "ulThroughput",
                    "type": "arithmetic"
                  }
                ],
                "queryType": "timeseries",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "dlthroughput"
                      ],
                      "type": "field"
                    },
                    {
                      "params": [],
                      "type": "mean"
                    }
                  ]
                ],
                "shouldOverrideGranularity": true,
                "tags": [
                  {
                    "key": "ueRicId",
                    "operator": "=~",
                    "value": "/^$ue$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Uplink Throughput",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "transparent": true,
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "decimals": 0,
                "format": "Kbits",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": "0",
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Druid",
            "fill": 1,
            "fillGradient": 2,
            "gridPos": {
              "h": 9,
              "w": 12,
              "x": 12,
              "y": 15
            },
            "hiddenSeries": false,
            "id": 3,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldName": "ueMeasurement.rsrq",
                    "hidden": true,
                    "name": "_rsrq",
                    "type": "longSum"
                  },
                  {
                    "hidden": true,
                    "name": "_count",
                    "type": "count"
                  }
                ],
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {
                  "customGranularity": "Invalid granularity."
                },
                "filters": [
                  {
                    "dimension": "ueMeasurement.ueRicId",
                    "pattern": "$ue",
                    "type": "regex",
                    "value": "$ue"
                  },
                  {
                    "dimension": "ueMeasurement.attached",
                    "type": "selector",
                    "value": "1"
                  },
                  {
                    "dimension": "ueMeasurement.cellId",
                    "pattern": "$cell",
                    "type": "regex"
                  }
                ],
                "limit": 5,
                "measurement": "measurement",
                "orderByTime": "ASC",
                "policy": "default",
                "postAggregators": [
                  {
                    "fields": [
                      {
                        "fieldName": "_rsrq",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "_count",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "rsrq",
                    "type": "arithmetic"
                  }
                ],
                "queryType": "timeseries",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "rsrq"
                      ],
                      "type": "field"
                    }
                  ]
                ],
                "shouldOverrideGranularity": true,
                "tags": [
                  {
                    "key": "ueRicId",
                    "operator": "=~",
                    "value": "/^$ue$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "RSRQ",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "transparent": true,
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "decimals": 0,
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": "0",
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Druid",
            "fill": 1,
            "fillGradient": 2,
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 23
            },
            "hiddenSeries": false,
            "id": 5,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldName": "cqiReport.widebandCqi",
                    "hidden": true,
                    "name": "cqiS",
                    "type": "longSum"
                  },
                  {
                    "hidden": true,
                    "name": "cqiC",
                    "type": "count"
                  }
                ],
                "alias": "Channel $tag_channel",
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {
                  "customGranularity": "Invalid granularity."
                },
                "filters": [
                  {
                    "dimension": "cqiReport.ueRicId",
                    "pattern": "$ue",
                    "type": "regex",
                    "value": "$ue"
                  },
                  {
                    "dimension": "cqiReport.cellId",
                    "pattern": "$cell",
                    "type": "regex"
                  }
                ],
                "limit": 5,
                "measurement": "cqi",
                "orderByTime": "ASC",
                "policy": "default",
                "postAggregators": [
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi",
                    "type": "arithmetic"
                  }
                ],
                "queryType": "timeseries",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "cqi"
                      ],
                      "type": "field"
                    }
                  ]
                ],
                "shouldOverrideGranularity": true,
                "tags": [
                  {
                    "key": "ueRicId",
                    "operator": "=~",
                    "value": "/^$ue$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "Wideband CQI",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "transparent": true,
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "none",
                "label": null,
                "logBase": 1,
                "max": "15",
                "min": "0",
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          },
          {
            "aliasColors": {},
            "bars": false,
            "dashLength": 10,
            "dashes": false,
            "datasource": "Druid",
            "fill": 1,
            "fillGradient": 1,
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 24
            },
            "hiddenSeries": false,
            "id": 11,
            "legend": {
              "avg": false,
              "current": false,
              "max": false,
              "min": false,
              "show": true,
              "total": false,
              "values": false
            },
            "lines": true,
            "linewidth": 1,
            "nullPointMode": "null",
            "options": {
              "dataLinks": []
            },
            "percentage": false,
            "pluginVersion": "6.5.2",
            "pointradius": 2,
            "points": false,
            "renderer": "flot",
            "seriesOverrides": [],
            "spaceLength": 10,
            "stack": false,
            "steppedLine": false,
            "targets": [
              {
                "aggregators": [
                  {
                    "fieldName": "cqiReport.cqiList.0",
                    "hidden": true,
                    "name": "cqiS0",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.1",
                    "hidden": true,
                    "name": "cqiS1",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.2",
                    "hidden": true,
                    "name": "cqiS2",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.3",
                    "hidden": true,
                    "name": "cqiS3",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.4",
                    "hidden": true,
                    "name": "cqiS4",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.5",
                    "hidden": true,
                    "name": "cqiS5",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.6",
                    "hidden": true,
                    "name": "cqiS6",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.7",
                    "hidden": true,
                    "name": "cqiS7",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.8",
                    "hidden": true,
                    "name": "cqiS8",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.9",
                    "hidden": true,
                    "name": "cqiS9",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.10",
                    "hidden": true,
                    "name": "cqiS10",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.11",
                    "hidden": true,
                    "name": "cqiS11",
                    "type": "longSum"
                  },
                  {
                    "fieldName": "cqiReport.cqiList.12",
                    "hidden": true,
                    "name": "cqiS12",
                    "type": "longSum"
                  },
                  {
                    "hidden": true,
                    "name": "cqiC",
                    "type": "count"
                  }
                ],
                "alias": "Channel $tag_channel",
                "currentAggregator": {
                  "type": "count"
                },
                "currentFilter": {
                  "type": "selector"
                },
                "currentPostAggregator": {
                  "fn": "+",
                  "type": "arithmetic"
                },
                "currentSelect": {
                  "dimension": "",
                  "metric": ""
                },
                "customGranularity": "$granularity",
                "druidDS": "test2",
                "errors": {
                  "customGranularity": "Invalid granularity."
                },
                "filters": [
                  {
                    "dimension": "cqiReport.ueRicId",
                    "pattern": "$ue",
                    "type": "regex",
                    "value": "$ue"
                  },
                  {
                    "dimension": "cqiReport.cellId",
                    "pattern": "$cell",
                    "type": "regex"
                  }
                ],
                "limit": 5,
                "measurement": "cqi",
                "orderByTime": "ASC",
                "policy": "default",
                "postAggregators": [
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS0",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi0",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS1",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi1",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS2",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi2",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS3",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi3",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS4",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi4",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS5",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi5",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS6",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi6",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS7",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi7",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS8",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi8",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS9",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi9",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS10",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi10",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS11",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi11",
                    "type": "arithmetic"
                  },
                  {
                    "fields": [
                      {
                        "fieldName": "cqiS12",
                        "type": "fieldAccess"
                      },
                      {
                        "fieldName": "cqiC",
                        "type": "fieldAccess"
                      }
                    ],
                    "fn": "/",
                    "name": "cqi12",
                    "type": "arithmetic"
                  }
                ],
                "queryType": "timeseries",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                  [
                    {
                      "params": [
                        "cqi"
                      ],
                      "type": "field"
                    }
                  ]
                ],
                "shouldOverrideGranularity": true,
                "tags": [
                  {
                    "key": "ueRicId",
                    "operator": "=~",
                    "value": "/^$ue$/"
                  }
                ]
              }
            ],
            "thresholds": [],
            "timeFrom": null,
            "timeRegions": [],
            "timeShift": null,
            "title": "CQI",
            "tooltip": {
              "shared": true,
              "sort": 0,
              "value_type": "individual"
            },
            "transparent": true,
            "type": "graph",
            "xaxis": {
              "buckets": null,
              "mode": "time",
              "name": null,
              "show": true,
              "values": []
            },
            "yaxes": [
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": "15",
                "min": "0",
                "show": true
              },
              {
                "format": "short",
                "label": null,
                "logBase": 1,
                "max": null,
                "min": null,
                "show": true
              }
            ],
            "yaxis": {
              "align": false,
              "alignLevel": null
            }
          }
        ],
        "refresh": "2s",
        "schemaVersion": 22,
        "style": "dark",
        "tags": [],
        "templating": {
          "list": [
            {
              "allValue": ".*",
              "current": {
                "selected": false,
                "text": "All",
                "value": "$__all"
              },
              "datasource": "Druid",
              "definition": "UE",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": false,
              "name": "ue",
              "options": [],
              "query": "SELECT DISTINCT(\"ueMeasurement.ueRicId\") FROM \"test2\" WHERE \"__time\" >= CURRENT_TIMESTAMP - INTERVAL '5' SECOND",
              "refresh": 2,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            },
            {
              "current": {
                "selected": false,
                "text": "PT5S",
                "value": "PT5S"
              },
              "hide": 0,
              "label": null,
              "name": "granularity",
              "options": [
                {
                  "selected": false,
                  "text": "PT5S",
                  "value": "PT5S"
                }
              ],
              "query": "PT5S",
              "skipUrlSync": false,
              "type": "textbox"
            },
            {
              "allValue": ".*",
              "current": {
                "selected": false,
                "text": "All",
                "value": "$__all"
              },
              "datasource": "Druid",
              "definition": "SELECT DISTINCT(\"beaconInfo.componentId\") FROM \"test2\" WHERE \"__time\" >= CURRENT_TIMESTAMP - INTERVAL '5' SECOND",
              "hide": 0,
              "includeAll": true,
              "label": null,
              "multi": false,
              "name": "cell",
              "options": [],
              "query": "SELECT DISTINCT(\"beaconInfo.componentId\") FROM \"test2\" WHERE \"__time\" >= CURRENT_TIMESTAMP - INTERVAL '5' SECOND",
              "refresh": 2,
              "regex": "",
              "skipUrlSync": false,
              "sort": 0,
              "tagValuesQuery": "",
              "tags": [],
              "tagsQuery": "",
              "type": "query",
              "useTags": false
            }
          ]
        },
        "time": {
          "from": "now-5m",
          "to": "now"
        },
        "timepicker": {
          "refresh_intervals": [
            "1s",
            "2s",
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
          ]
        },
        "timezone": "",
        "title": "Cell Monitoring",
        "uid": "lCbesm1Zk",
        "version": 2
      }
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-grafana-test
  namespace: default
  labels:
    app: ric-grafana
    chart: "grafana-4.4.0"
    heritage: "Helm"
    release: "ric"
data:
  run.sh: |-
    @test "Test Health" {
      url="http://ric-grafana/api/health"

      code=$(curl -s -o /dev/null -I -w "%{http_code}" $url)
      [ "$code" == "200" ]
    }
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/alertmanager-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-alertmanager
data:
  alertmanager.yml: |
    global: {}
    receivers:
    - name: default-receiver
    route:
      group_interval: 5m
      group_wait: 10s
      receiver: default-receiver
      repeat_interval: 3h
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/server-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "server"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-server
data:
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
    - job_name: kubernetes-service-endpoints-slow
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
      scrape_interval: 5m
      scrape_timeout: 30s
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
          - role: pod
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          regex: default
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: prometheus
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_probe]
          regex: .*
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex:
          action: drop
  recording_rules.yml: |
    {}
  rules: |
    {}
---
# Source: ric/charts/dash-front-back-end/templates/coreuiConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: coreui-config
  labels:
    helm.sh/chart: dash-front-back-end-0.16.0
    app.kubernetes.io/name: dash-front-back-end
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.16.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: WebGUI
    drax/component-name: dash-front-back-end
    drax/component-version: 0.16.0
data:
  config.js: |
    window.GRAFANA_URL = "10.20.20.20";
    window.GRAFANA_PORT = "30300";
    window.API_URL = "10.20.20.20";
    window.WEBSOCKET_PORT = "31316";
---
# Source: ric/charts/dash-front-back-end/templates/serverConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: server-config
  labels:
    helm.sh/chart: dash-front-back-end-0.16.0
    app.kubernetes.io/name: dash-front-back-end
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.16.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: WebGUI
    drax/component-name: dash-front-back-end
    drax/component-version: 0.16.0
data:
  config.json: |
    {
      "production": {
        "config_id": "production",
        "defaultServiceNamespace": "default",
        "defaultOranNamespace": "default",
        "node_port": 5000,
        "grafanaURL": "10.20.20.20",
        "grafanaPort": "30300",
        "nodeApiURL": "10.20.20.20",
        "nodeApiPort": "31315",
        "kafkaURL": "10.20.20.20",
        "kafkaPort": "31090",
        "svcOrchestratorHost": "acc-service-orchestrator",
        "svcOrchestratorPort": "80",
        "svcMonitorHost": "acc-service-monitor",
        "svcMonitorPort": "80",
        "pcixAppPodName": "accelleran-drax-pci-010-pci-xapp-api",
        "pcixAppPort": "80",
        "ksqldbPodName": "10.20.20.20",
        "ksqldbPort": "30533",
        "LteRadioControllerLabel": "4G-Radio-Controller" 
      }
    }
---
# Source: ric/charts/druid/templates/acc-druid-ssv.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: acc-druid-ssv
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  state-supervisor.json: |
    {
      "dataSchema": {
        "dataSource": "state",
        "timestampSpec": {
          "column": "timestamp",
          "format": "nano",
          "missingValue": null
        },
        "dimensionsSpec": {
          "dimensions": [
            {
              "type": "string",
              "name": "service.id",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "service.serviceType",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "service.state",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            }
          ],
          "dimensionExclusions": [
            "timestamp"
          ]
        },
        "metricsSpec": [],
        "granularitySpec": {
          "type": "uniform",
          "segmentGranularity": "HOUR",
          "queryGranularity": {
            "type": "none"
          },
          "rollup": false,
          "intervals": null
        },
        "transformSpec": {
          "filter": {
            "type": "not",
            "field": {
              "type": "selector",
              "dimension": "service.id",
              "value": null,
              "extractionFn": null
            }
          },
          "transforms": []
        }
      },
      "ioConfig": {
        "topic": "test2",
        "inputFormat": {
          "type": "json",
          "flattenSpec": {
            "useFieldDiscovery": true,
            "fields": [
              {
                "type": "path",
                "name": "service.id",
                "expr": "$.service.id"
              },
              {
                "type": "path",
                "name": "service.serviceType",
                "expr": "$.service.serviceType"
              },
              {
                "type": "path",
                "name": "service.state",
                "expr": "$.service.state"
              }
            ]
          },
          "featureSpec": {}
        },
        "replicas": 1,
        "taskCount": 1,
        "taskDuration": "PT3600S",
        "consumerProperties": {
          "bootstrap.servers": "http://ric-kafka.default:9092"
        },
        "pollTimeout": 100,
        "startDelay": "PT5S",
        "period": "PT30S",
        "useEarliestOffset": false,
        "completionTimeout": "PT1800S",
        "lateMessageRejectionPeriod": null,
        "earlyMessageRejectionPeriod": null,
        "lateMessageRejectionStartDateTime": null,
        "stream": "test2",
        "useEarliestSequenceNumber": false,
        "type": "kafka"
      },
      "tuningConfig": {
        "type": "kafka",
        "maxRowsInMemory": 1000000,
        "maxBytesInMemory": 0,
        "maxRowsPerSegment": 5000000,
        "maxTotalRows": null,
        "intermediatePersistPeriod": "PT10M",
        "basePersistDirectory": "/opt/druid/var/tmp/druid-realtime-persist1724199235833846327",
        "maxPendingPersists": 0,
        "indexSpec": {
          "bitmap": {
            "type": "concise"
          },
          "dimensionCompression": "lz4",
          "metricCompression": "lz4",
          "longEncoding": "longs"
        },
        "indexSpecForIntermediatePersists": {
          "bitmap": {
            "type": "concise"
          },
          "dimensionCompression": "lz4",
          "metricCompression": "lz4",
          "longEncoding": "longs"
        },
        "buildV9Directly": true,
        "reportParseExceptions": false,
        "handoffConditionTimeout": 0,
        "resetOffsetAutomatically": false,
        "segmentWriteOutMediumFactory": null,
        "workerThreads": null,
        "chatThreads": null,
        "chatRetries": 8,
        "httpTimeout": "PT10S",
        "shutdownTimeout": "PT80S",
        "offsetFetchPeriod": "PT30S",
        "intermediateHandoffPeriod": "P2147483647D",
        "logParseExceptions": false,
        "maxParseExceptions": 2147483647,
        "maxSavedParseExceptions": 0,
        "skipSequenceNumberAvailabilityCheck": false,
        "repartitionTransitionDuration": "PT120S"
      },
      "type": "kafka"
    }
---
# Source: ric/charts/druid/templates/acc-druid-sv.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: acc-druid-sv
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  supervisor.json: |
    {
      "dataSchema": {
        "dataSource": "test2",
        "timestampSpec": {
          "column": "timestamp",
          "format": "nano",
          "missingValue": null
        },
        "dimensionsSpec": {
          "dimensions": [
            {
              "type": "string",
              "name": "beaconInfo.componentId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "beaconInfo.interval",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "string",
              "name": "beaconInfo.serviceInfo",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "beaconInfo.serviceType",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "blerReport.cellId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "blerReport.dlBler",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "string",
              "name": "blerReport.ueRicId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "blerReport.ulBler",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "string",
              "name": "cqiReport.cellId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.0",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.1",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.2",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.3",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.4",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.5",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.6",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.7",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.8",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.9",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.10",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.11",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiList.12",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.cqiListSize",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "string",
              "name": "cqiReport.ueRicId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "cqiReport.widebandCqi",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "long",
              "name": "fromChannelId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "long",
              "name": "messageType",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "string",
              "name": "throughputReport.cellId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "throughputReport.dlThroughput",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "throughputReport.ueRicId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "throughputReport.ulThroughput",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "type",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "ueMeasurement.attached",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "string",
              "name": "ueMeasurement.cellId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "long",
              "name": "ueMeasurement.rsrp",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "long",
              "name": "ueMeasurement.rsrq",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": false
            },
            {
              "type": "string",
              "name": "ueMeasurement.ueCellId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "ueMeasurement.ueRicId",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "service.id",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "service.serviceType",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "service.state",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            }
          ],
          "dimensionExclusions": [
            "timestamp"
          ]
        },
        "metricsSpec": [],
        "granularitySpec": {
          "type": "uniform",
          "segmentGranularity": "HOUR",
          "queryGranularity": {
            "type": "none"
          },
          "rollup": false,
          "intervals": null
        },
        "transformSpec": {
          "filter": null,
          "transforms": [
            {
              "type": "expression",
              "name": "ueMeasurement.attached",
              "expression": "\"ueMeasurement.ueCellId\" == \"ueMeasurement.cellId\""
            }
          ]
        }
      },
      "ioConfig": {
        "topic": "test2",
        "inputFormat": {
          "type": "json",
          "flattenSpec": {
            "useFieldDiscovery": true,
            "fields": [
              {
                "type": "path",
                "name": "beaconInfo.componentId",
                "expr": "$.beaconInfo.componentId"
              },
              {
                "type": "path",
                "name": "beaconInfo.interval",
                "expr": "$.beaconInfo.interval"
              },
              {
                "type": "path",
                "name": "beaconInfo.serviceInfo",
                "expr": "$.beaconInfo.serviceInfo"
              },
              {
                "type": "path",
                "name": "beaconInfo.serviceType",
                "expr": "$.beaconInfo.serviceType"
              },
              {
                "type": "path",
                "name": "blerReport.cellId",
                "expr": "$.blerReport.cellId"
              },
              {
                "type": "path",
                "name": "blerReport.dlBler",
                "expr": "$.blerReport.dlBler"
              },
              {
                "type": "path",
                "name": "blerReport.ueRicId",
                "expr": "$.blerReport.ueRicId"
              },
              {
                "type": "path",
                "name": "blerReport.ulBler",
                "expr": "$.blerReport.ulBler"
              },
              {
                "type": "path",
                "name": "cqiReport.cellId",
                "expr": "$.cqiReport.cellId"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.0",
                "expr": "$.cqiReport.cqiList.0"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.1",
                "expr": "$.cqiReport.cqiList.1"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.2",
                "expr": "$.cqiReport.cqiList.2"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.3",
                "expr": "$.cqiReport.cqiList.3"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.4",
                "expr": "$.cqiReport.cqiList.4"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.5",
                "expr": "$.cqiReport.cqiList.5"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.6",
                "expr": "$.cqiReport.cqiList.6"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.7",
                "expr": "$.cqiReport.cqiList.7"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.8",
                "expr": "$.cqiReport.cqiList.8"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.9",
                "expr": "$.cqiReport.cqiList.9"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.10",
                "expr": "$.cqiReport.cqiList.10"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.11",
                "expr": "$.cqiReport.cqiList.11"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiList.12",
                "expr": "$.cqiReport.cqiList.12"
              },
              {
                "type": "path",
                "name": "cqiReport.cqiListSize",
                "expr": "$.cqiReport.cqiListSize"
              },
              {
                "type": "path",
                "name": "cqiReport.ueRicId",
                "expr": "$.cqiReport.ueRicId"
              },
              {
                "type": "path",
                "name": "cqiReport.widebandCqi",
                "expr": "$.cqiReport.widebandCqi"
              },
              {
                "type": "path",
                "name": "throughputReport.cellId",
                "expr": "$.throughputReport.cellId"
              },
              {
                "type": "path",
                "name": "throughputReport.dlThroughput",
                "expr": "$.throughputReport.dlThroughput"
              },
              {
                "type": "path",
                "name": "throughputReport.ueRicId",
                "expr": "$.throughputReport.ueRicId"
              },
              {
                "type": "path",
                "name": "throughputReport.ulThroughput",
                "expr": "$.throughputReport.ulThroughput"
              },
              {
                "type": "path",
                "name": "ueMeasurement.cellId",
                "expr": "$.ueMeasurement.cellId"
              },
              {
                "type": "path",
                "name": "ueMeasurement.rsrp",
                "expr": "$.ueMeasurement.rsrp"
              },
              {
                "type": "path",
                "name": "ueMeasurement.rsrq",
                "expr": "$.ueMeasurement.rsrq"
              },
              {
                "type": "path",
                "name": "ueMeasurement.ueCellId",
                "expr": "$.ueMeasurement.ueCellId"
              },
              {
                "type": "path",
                "name": "ueMeasurement.ueRicId",
                "expr": "$.ueMeasurement.ueRicId"
              },
              {
                "type": "path",
                "name": "service.id",
                "expr": "$.service.id"
              },
              {
                "type": "path",
                "name": "service.serviceType",
                "expr": "$.service.serviceType"
              },
              {
                "type": "path",
                "name": "service.state",
                "expr": "$.service.state"
              }
        ]
          },
          "featureSpec": {}
        },
        "replicas": 1,
        "taskCount": 1,
        "taskDuration": "PT3600S",
        "consumerProperties": {
          "bootstrap.servers": "http://ric-kafka.default:9092"
        },
        "pollTimeout": 100,
        "startDelay": "PT5S",
        "period": "PT30S",
        "useEarliestOffset": false,
        "completionTimeout": "PT1800S",
        "lateMessageRejectionPeriod": null,
        "earlyMessageRejectionPeriod": null,
        "lateMessageRejectionStartDateTime": null,
        "stream": "test2",
        "useEarliestSequenceNumber": false,
        "type": "kafka"
      },
      "tuningConfig": {
        "type": "kafka",
        "maxRowsInMemory": 1000000,
        "maxBytesInMemory": 0,
        "maxRowsPerSegment": 5000000,
        "maxTotalRows": null,
        "intermediatePersistPeriod": "PT10M",
        "basePersistDirectory": "/opt/apache-druid-0.17.0-SNAPSHOT/var/tmp/druid-realtime-persist2564984710534084110",
        "maxPendingPersists": 0,
        "indexSpec": {
          "bitmap": {
            "type": "concise"
          },
          "dimensionCompression": "lz4",
          "metricCompression": "lz4",
          "longEncoding": "longs"
        },
        "indexSpecForIntermediatePersists": {
          "bitmap": {
            "type": "concise"
          },
          "dimensionCompression": "lz4",
          "metricCompression": "lz4",
          "longEncoding": "longs"
        },
        "buildV9Directly": true,
        "reportParseExceptions": false,
        "handoffConditionTimeout": 0,
        "resetOffsetAutomatically": false,
        "segmentWriteOutMediumFactory": null,
        "workerThreads": null,
        "chatThreads": null,
        "chatRetries": 8,
        "httpTimeout": "PT10S",
        "shutdownTimeout": "PT80S",
        "offsetFetchPeriod": "PT30S",
        "intermediateHandoffPeriod": "P2147483647D",
        "logParseExceptions": false,
        "maxParseExceptions": 2147483647,
        "maxSavedParseExceptions": 0,
        "skipSequenceNumberAvailabilityCheck": false,
        "repartitionTransitionDuration": "PT120S"
      },
      "type": "kafka"
    }
---
# Source: ric/charts/druid/templates/conf-brok-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-brok-jvm
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  jvm.config: |
    -server
    -Xms512m
    -Xmx512m
    -XX:MaxDirectMemorySize=768m
    -XX:+ExitOnOutOfMemoryError
    -XX:+UseG1GC
    -Duser.timezone=UTC
    -Dfile.encoding=UTF-8
    -Djava.io.tmpdir=var/tmp
    -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    -Dservice=broker
---
# Source: ric/charts/druid/templates/conf-coord-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-coord-jvm
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  jvm.config: |
    -server
    -Xms256m
    -Xmx256m
    -XX:+ExitOnOutOfMemoryError
    -XX:+UseG1GC
    -Duser.timezone=UTC
    -Dfile.encoding=UTF-8
    -Djava.io.tmpdir=var/tmp
    -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    -Dderby.stream.error.file=var/druid/derby.log
    -Dservice=coordinator
---
# Source: ric/charts/druid/templates/conf-hist-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-hist-jvm
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  jvm.config: |
    -server
    -Xms512m
    -Xmx512m
    -XX:MaxDirectMemorySize=1280m
    -XX:+ExitOnOutOfMemoryError
    -XX:+UseG1GC
    -Duser.timezone=UTC
    -Dfile.encoding=UTF-8
    -Djava.io.tmpdir=var/tmp
    -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    -Dservice=historical
---
# Source: ric/charts/druid/templates/conf-log4j2-task.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-log4j2-task
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  log4j2-task.xml: |
    <?xml version="1.0" encoding="UTF-8" ?>
    <Configuration status="WARN">
        <Appenders>
           <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/>
            </Console>                                                                                                        
        </Appenders>                                                                                                          
        <Loggers>                                                                                                             
            <Root level="error">                                                                                               
                <AppenderRef ref="Console"/>                                                                                  
            </Root>                                                                                                           
        </Loggers>                                                                                                            
    </Configuration>
---
# Source: ric/charts/druid/templates/conf-log4j2.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-log4j2
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="WARN">
     <Appenders>
     <RollingFile name="RollingFile" fileName="var/sv/${sys:service}-service.log" filePattern="var/sv/${sys:service}-service-%d{yyyy-MM-dd}.%i.log.gz">
     <PatternLayout>
     <Pattern>%d{ISO8601} %p [%t] %c - %m%n</Pattern>
     </PatternLayout>
     <Policies>
     <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
     <SizeBasedTriggeringPolicy size="100 MB"/>
     </Policies>
     <DefaultRolloverStrategy max="10"/>
     </RollingFile>
     </Appenders>
     <Loggers>
     <Root level="error">
     <AppenderRef ref="RollingFile"/>
     </Root>
     </Loggers>
    </Configuration>
---
# Source: ric/charts/druid/templates/conf-midman-prop.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-midman-prop
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  runtime.properties: |
    druid.service=druid/middleManager
    druid.plaintextPort=8091

    # Number of tasks per middleManager
    druid.worker.capacity=2

    # Task launch parameters
    druid.indexer.runner.javaOpts=-server -Xms1g -Xmx1g -XX:MaxDirectMemorySize=1g -Duser.timezone=UTC -Dfile.encoding=UTF-8 -XX:+ExitOnOutOfMemoryError -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -Dlog4j.configurationFile=conf/druid/single-server/micro-quickstart/_common/log4j2-task.xml
    druid.indexer.task.baseTaskDir=var/druid/task

    # HTTP server threads
    druid.server.http.numThreads=12

    # Processing threads and buffers on Peons
    druid.indexer.fork.property.druid.processing.numMergeBuffers=2
    druid.indexer.fork.property.druid.processing.buffer.sizeBytes=100000000
    druid.indexer.fork.property.druid.processing.numThreads=1

    # Hadoop indexing
    druid.indexer.task.hadoopWorkingPath=var/druid/hadoop-tmp
---
# Source: ric/charts/druid/templates/conf-mima-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-mima-jvm
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  jvm.config: |
    -server
    -Xms64m
    -Xmx64m
    -XX:+ExitOnOutOfMemoryError
    -XX:+UseG1GC
    -Duser.timezone=UTC
    -Dfile.encoding=UTF-8
    -Djava.io.tmpdir=var/tmp
    -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    -Dlog4j.configurationFile=conf/druid/_common/log4j2-task.xml
    -Dservice=middleman
---
# Source: ric/charts/druid/templates/conf-rout-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-rout-jvm
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
data:
  jvm.config: |
    -server
    -Xms128m
    -Xmx128m
    -XX:+UseG1GC
    -XX:MaxDirectMemorySize=128m
    -XX:+ExitOnOutOfMemoryError
    -Duser.timezone=UTC
    -Dfile.encoding=UTF-8
    -Djava.io.tmpdir=var/tmp
    -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    -Dservice=router
---
# Source: ric/charts/influxdb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-influxdb
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
data:
  influxdb.conf: |+
    reporting-disabled = false
    bind-address = ":8088"

    [meta]
      dir = "/var/lib/influxdb/meta"

    [data]
      dir = "/var/lib/influxdb/data"
      wal-dir = "/var/lib/influxdb/wal"
      max-values-per-tag = 0

    [coordinator]

    [retention]

    [shard-precreation]

    [monitor]

    [subscriber]

    [http]

    # TODO: allow multiple graphite listeners

    [[graphite]]

    # TODO: allow multiple collectd listeners with templates

    [[collectd]]

    # TODO: allow multiple opentsdb listeners with templates

    [[opentsdb]]

    # TODO: allow multiple udp listeners with templates

    [[udp]]

    [continuous_queries]

    [logging]
---
# Source: ric/charts/influxdb/templates/init-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-influxdb-init
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
data:
  init.iql: |+
    CREATE DATABASE "test" WITH DURATION 5d REPLICATION 1 NAME "rp_5d"
---
# Source: ric/charts/kafka/charts/zookeeper/templates/config-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.0
    release: ric
    heritage: Helm
    component: server
data:
    ok: |
      #!/bin/sh
      echo ruok | nc 127.0.0.1 ${1:-2181}

    ready: |
      #!/bin/sh
      echo ruok | nc 127.0.0.1 ${1:-2181}

    run: |
      #!/bin/bash

      set -a
      ROOT=$(echo /apache-zookeeper-*)

      ZK_USER=${ZK_USER:-"zookeeper"}
      ZK_LOG_LEVEL=${ZK_LOG_LEVEL:-"INFO"}
      ZK_DATA_DIR=${ZK_DATA_DIR:-"/data"}
      ZK_DATA_LOG_DIR=${ZK_DATA_LOG_DIR:-"/data/log"}
      ZK_CONF_DIR=${ZK_CONF_DIR:-"/conf"}
      ZK_CLIENT_PORT=${ZK_CLIENT_PORT:-2181}
      ZK_SERVER_PORT=${ZK_SERVER_PORT:-2888}
      ZK_ELECTION_PORT=${ZK_ELECTION_PORT:-3888}
      ZK_TICK_TIME=${ZK_TICK_TIME:-2000}
      ZK_INIT_LIMIT=${ZK_INIT_LIMIT:-10}
      ZK_SYNC_LIMIT=${ZK_SYNC_LIMIT:-5}
      ZK_HEAP_SIZE=${ZK_HEAP_SIZE:-2G}
      ZK_MAX_CLIENT_CNXNS=${ZK_MAX_CLIENT_CNXNS:-60}
      ZK_MIN_SESSION_TIMEOUT=${ZK_MIN_SESSION_TIMEOUT:- $((ZK_TICK_TIME*2))}
      ZK_MAX_SESSION_TIMEOUT=${ZK_MAX_SESSION_TIMEOUT:- $((ZK_TICK_TIME*20))}
      ZK_SNAP_RETAIN_COUNT=${ZK_SNAP_RETAIN_COUNT:-3}
      ZK_PURGE_INTERVAL=${ZK_PURGE_INTERVAL:-0}
      ID_FILE="$ZK_DATA_DIR/myid"
      ZK_CONFIG_FILE="$ZK_CONF_DIR/zoo.cfg"
      LOG4J_PROPERTIES="$ZK_CONF_DIR/log4j.properties"
      HOST=$(hostname)
      DOMAIN=`hostname -d`
      ZOOCFG=zoo.cfg
      ZOOCFGDIR=$ZK_CONF_DIR
      JVMFLAGS="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE"

      APPJAR=$(echo $ROOT/*jar)
      CLASSPATH="${ROOT}/lib/*:${APPJAR}:${ZK_CONF_DIR}:"

      if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
          NAME=${BASH_REMATCH[1]}
          ORD=${BASH_REMATCH[2]}
          MY_ID=$((ORD+1))
      else
          echo "Failed to extract ordinal from hostname $HOST"
          exit 1
      fi

      mkdir -p $ZK_DATA_DIR
      mkdir -p $ZK_DATA_LOG_DIR
      echo $MY_ID >> $ID_FILE

      echo "clientPort=$ZK_CLIENT_PORT" >> $ZK_CONFIG_FILE
      echo "dataDir=$ZK_DATA_DIR" >> $ZK_CONFIG_FILE
      echo "dataLogDir=$ZK_DATA_LOG_DIR" >> $ZK_CONFIG_FILE
      echo "tickTime=$ZK_TICK_TIME" >> $ZK_CONFIG_FILE
      echo "initLimit=$ZK_INIT_LIMIT" >> $ZK_CONFIG_FILE
      echo "syncLimit=$ZK_SYNC_LIMIT" >> $ZK_CONFIG_FILE
      echo "maxClientCnxns=$ZK_MAX_CLIENT_CNXNS" >> $ZK_CONFIG_FILE
      echo "minSessionTimeout=$ZK_MIN_SESSION_TIMEOUT" >> $ZK_CONFIG_FILE
      echo "maxSessionTimeout=$ZK_MAX_SESSION_TIMEOUT" >> $ZK_CONFIG_FILE
      echo "autopurge.snapRetainCount=$ZK_SNAP_RETAIN_COUNT" >> $ZK_CONFIG_FILE
      echo "autopurge.purgeInterval=$ZK_PURGE_INTERVAL" >> $ZK_CONFIG_FILE
      echo "4lw.commands.whitelist=*" >> $ZK_CONFIG_FILE

      for (( i=1; i<=$ZK_REPLICAS; i++ ))
      do
          echo "server.$i=$NAME-$((i-1)).$DOMAIN:$ZK_SERVER_PORT:$ZK_ELECTION_PORT" >> $ZK_CONFIG_FILE
      done

      rm -f $LOG4J_PROPERTIES

      echo "zookeeper.root.logger=$ZK_LOG_LEVEL, CONSOLE" >> $LOG4J_PROPERTIES
      echo "zookeeper.console.threshold=$ZK_LOG_LEVEL" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.threshold=$ZK_LOG_LEVEL" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.dir=$ZK_DATA_LOG_DIR" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.file=zookeeper.log" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.maxfilesize=256MB" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.maxbackupindex=10" >> $LOG4J_PROPERTIES
      echo "zookeeper.tracelog.dir=$ZK_DATA_LOG_DIR" >> $LOG4J_PROPERTIES
      echo "zookeeper.tracelog.file=zookeeper_trace.log" >> $LOG4J_PROPERTIES
      echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOG4J_PROPERTIES

      if [ -n "$JMXDISABLE" ]
      then
          MAIN=org.apache.zookeeper.server.quorum.QuorumPeerMain
      else
          MAIN="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=$JMXPORT -Dcom.sun.management.jmxremote.authenticate=$JMXAUTH -Dcom.sun.management.jmxremote.ssl=$JMXSSL -Dzookeeper.jmx.log4j.disable=$JMXLOG4J org.apache.zookeeper.server.quorum.QuorumPeerMain"
      fi

      set -x
      exec java -cp "$CLASSPATH" $JVMFLAGS $MAIN $ZK_CONFIG_FILE
---
# Source: ric/charts/kafka/templates/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: kafka-0.20.9
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Kafka
    drax/component-name: kafka
    drax/component-version: 0.20.9
    app.kubernetes.io/component: kafka-config
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
  name: ric-kafka-config
data:
  runtimeConfig.sh: |
    #!/bin/bash
    set -e
    cd /usr/bin
    until kafka-configs --zookeeper ric-zookeeper:2181 --entity-type topics --describe || (( count++ >= 6 ))
    do
      echo "Waiting for Zookeeper..."
      sleep 20
    done
    until nc -z ric-kafka 9092 || (( retries++ >= 6 ))
    do
      echo "Waiting for Kafka..."
      sleep 20
    done
    echo "Applying runtime configuration using confluentinc/cp-kafka:5.0.1"
    cat << EOF > test2-increase-replication-factor.json
      {"version":1, "partitions":[
          {"topic":"test2","partition":0,"replicas":[0]}
      ]}
    EOF
    kafka-reassign-partitions --zookeeper ric-zookeeper:2181 --reassignment-json-file test2-increase-replication-factor.json --execute
    kafka-reassign-partitions --zookeeper ric-zookeeper:2181 --reassignment-json-file test2-increase-replication-factor.json --verify
    kafka-configs --zookeeper ric-zookeeper:2181 --entity-type topics --entity-name test2 --describe
---
# Source: ric/charts/loki-stack/charts/fluent-bit/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-fluent-bit-loki
  namespace: default
  labels:
    app: fluent-bit-loki
    chart: fluent-bit-0.1.1
    release: ric
    heritage: Helm
data:
  fluent-bit.conf: |-
    [SERVICE]
        HTTP_Server    On
        HTTP_Listen    0.0.0.0
        HTTP_PORT      2020
        Flush          1
        Daemon         Off
        Log_Level      warn
        Parsers_File   parsers.conf
    [INPUT]
        Name           tail
        Tag            kube.*
        Path           /var/log/containers/*.log
        Parser         docker
        DB             /run/fluent-bit/flb_kube.db
        Mem_Buf_Limit  5MB
    [FILTER]
        Name           kubernetes
        Match          kube.*
        Kube_URL       https://kubernetes.default.svc:443
        Merge_Log On
        K8S-Logging.Parser Off
    [Output]
        Name loki
        Match *
        Url http://ric-loki.default:3100/api/prom/push
        Labels {job="fluent-bit"}
        RemoveKeys kubernetes,stream
        LabelMapPath /fluent-bit/etc/labelmap.json
        LineFormat json
        LogLevel warn

  parsers.conf: |-
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L

  labelmap.json: |-
    {
      "kubernetes": {
        "container_name": "container",
        "host": "node",
        "labels": {
          "app": "app",
          "release": "release"
        },
        "namespace_name": "namespace",
        "pod_name": "instance"
      },
      "stream": "stream"
    }
---
# Source: ric/charts/loki-stack/templates/datasources.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-loki-stack
  namespace: default
  labels:
    app: loki-stack
    chart: loki-stack-0.36.2
    release: ric
    heritage: Helm
    grafana_datasource: "1"
data:
  loki-stack-datasource.yaml: |-
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      access: proxy
      url: http://ric-loki:3100
      version: 1
---
# Source: ric/charts/loki-stack/templates/tests/loki-test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ric-loki-stack-test
  labels:
    app: loki-stack
    chart: loki-stack-0.36.2
    release: ric
    heritage: Helm
data:
  test.sh: |
    #!/usr/bin/env bash

    LOKI_URI="http://${LOKI_SERVICE}:${LOKI_PORT}"

    function setup() {
      apk add -u curl jq
      until (curl -s ${LOKI_URI}/api/prom/label/app/values | jq -e '.values[] | select(. == "loki")'); do
        sleep 1
      done
    }

    @test "Has labels" {
      curl -s ${LOKI_URI}/api/prom/label | \
      jq -e '.values[] | select(. == "app")'
    }

    @test "Query log entry" {
      curl -sG ${LOKI_URI}/api/prom/query?limit=10 --data-urlencode 'query={app="loki"}' | \
      jq -e '.streams[].entries | length >= 1'
    }

    @test "Push log entry legacy" {
      local timestamp=$(date -Iseconds -u | sed 's/UTC/.000000000+00:00/')
      local data=$(jq -n --arg timestamp "${timestamp}" '{"streams": [{"labels": "{app=\"loki-test\"}", "entries": [{"ts": $timestamp, "line": "foobar"}]}]}')

      curl -s -X POST -H "Content-Type: application/json" ${LOKI_URI}/api/prom/push -d "${data}"

      curl -sG ${LOKI_URI}/api/prom/query?limit=1 --data-urlencode 'query={app="loki-test"}' | \
      jq -e '.streams[].entries[].line == "foobar"'
    }

    @test "Push log entry" {
      local timestamp=$(date +%s000000000)
      local data=$(jq -n --arg timestamp "${timestamp}" '{"streams": [{"stream": {"app": "loki-test"}, "values": [[$timestamp, "foobar"]]}]}')

      curl -s -X POST -H "Content-Type: application/json" ${LOKI_URI}/loki/api/v1/push -d "${data}"

      curl -sG ${LOKI_URI}/api/prom/query?limit=1 --data-urlencode 'query={app="loki-test"}' | \
      jq -e '.streams[].entries[].line == "foobar"'
    }
---
# Source: ric/charts/nkafka-helm/templates/conf-init-druid.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf-init-druid
data:
  init-druid.sh: |-
    #!/bin/sh
    echo "$(date) [INIT-DRUID] Starting..."

    countUpdate=0

    until curl -f -s ric-druid-overlord.default:8081/druid/indexer/v1/supervisor
    do
      countUpdate=$((countUpdate+1))
      if [ $countUpdate -eq 4 ]
      then
        echo "$(date) [INIT-DRUID] Cannot reach Druid, exiting..."
        sleep 5
        # exit 1
      else
        echo "$(date) [INIT-DRUID] Cannot reach Druid, retrying $countUpdate..."
        sleep 2
      fi
    done

    response=$(curl -s ric-druid-overlord.default:8081/druid/indexer/v1/supervisor)
    echo $response >> status.log
    if echo "$response" | grep "test2" ; then
      echo "$(date) [INIT-DRUID] test2 OK"
      until curl -f -XPOST ric-druid-overlord.default:8081/druid/indexer/v1/supervisor/test2/reset ; do sleep 6; done
    else
      echo "$(date) [INIT-DRUID] test2 BAD, reseting and creating..."
      until curl -f -X POST -H "Content-Type: application/json" -d @supervisor.json ric-druid-overlord.default:8081/druid/indexer/v1/supervisor; do sleep 6; done
      until curl -f -XPOST ric-druid-overlord.default:8081/druid/indexer/v1/supervisor/test2/reset ; do sleep 6; done
    fi
    if echo "$response" | grep "state" ; then
      echo "$(date) [INIT-DRUID] state OK"
      until curl -f -XPOST ric-druid-overlord.default:8081/druid/indexer/v1/supervisor/state/reset ; do sleep 6; done
    else
      echo "$(date) [INIT-DRUID] state BAD, reseting and creating..."
      until curl -f -X POST -H "Content-Type: application/json" -d @state-supervisor.json ric-druid-overlord.default:8081/druid/indexer/v1/supervisor; do sleep 6; done
      until curl -f -XPOST ric-druid-overlord.default:8081/druid/indexer/v1/supervisor/state/reset ; do sleep 6; done
    fi
    echo "$(date) [INIT-DRUID] Finished!"
---
# Source: ric/charts/vector/templates/bler-toml.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: bler-toml
data:
  bler.toml: |-
    [sources.inBler]
      bootstrap_servers = "10.20.20.20:31090"
      group_id = "vectorBler" 
      topics = ["test2"] 
      type = "kafka" 

    [transforms.parseJsonBler]
      type = "json_parser" 
      inputs = ["inBler"] 
      drop_field = false # optional, default
      drop_invalid = true 
      field = "message" # optional, default

    [transforms.filterBler]
      # General
      type = "filter" 
      inputs = ["parseJsonBler"] 
      # Condition
      condition."type.eq" = "BLER_REPORT"

    [transforms.parseBler]
      inputs = ["filterBler"]
      type   = "json_parser"
      field  = "blerReport"
      drop_field = false # optional, default
      drop_invalid = true 

    [transforms.log_to_metric_bler]
      inputs = ["parseBler"]
      type = "log_to_metric"
 
      [[transforms.log_to_metric_bler.metrics]]
        type = "gauge"
        field = "dlBler"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"

      [[transforms.log_to_metric_bler.metrics]]
        type = "gauge"
        field = "ulBler"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"


    [sinks.outBler]
      # General
      bucket = "vector-bucket" 
      database = "test" 
      endpoint = "http://10.20.20.20:30303/" 
      inputs = ["log_to_metric_bler"] 
      namespace = "df" 
      type = "influxdb_metrics" 
      username = "admin"
      password = "password"
---
# Source: ric/charts/vector/templates/cqi-toml.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cqi-toml
data:
  cqi.toml: |-
    [sources.inCqi]
      bootstrap_servers = "10.20.20.20:31090"
      group_id = "vectorCqi"
      topics = ["test2"]
      type = "kafka"

    [transforms.parseJsonCqi]
      type = "json_parser"
      inputs = ["inCqi"]
      drop_field = false # optional, default
      drop_invalid = true
      field = "message" # optional, default

    [transforms.filterCqi]
      # General
      type = "filter"
      inputs = ["parseJsonCqi"]
      # Condition
      condition."type.eq" = "CQI_REPORT"

    [transforms.parseCqi]
      inputs = ["filterCqi"]
      type   = "json_parser"
      field  = "cqiReport"
      drop_field = false # optional, default
      drop_invalid = true

    [transforms.parseCqiList]
      inputs = ["parseCqi"]
      type   = "json_parser"
      field  = "cqiList"
      drop_field = false # optional, default
      drop_invalid = true


    [transforms.log_to_metric_cqi]
      inputs = ["parseCqi"]
      type = "log_to_metric"

      [[transforms.log_to_metric_cqi.metrics]]
        type = "gauge"
        field = "widebandCqi"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"

      [[transforms.log_to_metric_cqi.metrics]]
        type = "gauge"
        field = "cqiListSize"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"

      [[transforms.log_to_metric_cqi.metrics]]
        type = "set"
        field = "cqiList"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"

    [transforms.log_to_metric_cqi_list]
      inputs = ["parseCqiList"]
      type = "log_to_metric"

      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "0"
        name = "cqi_ch_0"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "1"
        name = "cqi_ch_1"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "2"
        name = "cqi_ch_2"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "3"
        name = "cqi_ch_3"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "4"
        name = "cqi_ch_4"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "5"
        name = "cqi_ch_5"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "6"
        name = "cqi_ch_6"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "7"
        name = "cqi_ch_7"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "8"
        name = "cqi_ch_8"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "9"
        name = "cqi_ch_9"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "10"
        name = "cqi_ch_10"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "11"
        name = "cqi_ch_11"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
      [[transforms.log_to_metric_cqi_list.metrics]]
        type = "gauge"
        field = "12"
        name = "cqi_ch_12"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"


    [sinks.out]
      # General
      bucket = "vector-bucket"
      database = "test"
      endpoint = "http://10.20.20.20:30303/"
      inputs = ["log_to_metric_cqi","log_to_metric_cqi_list"]
      namespace = "df"
      type = "influxdb_metrics"
      username = "admin"
      password = "password"
---
# Source: ric/charts/vector/templates/throughput-toml.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: throughput-toml
data:
  throughput.toml: |-
   [sources.inThroughput]
      bootstrap_servers = "10.20.20.20:31090"
      group_id = "vectorThroughput"
      topics = ["test2"]
      type = "kafka"

    [transforms.parseJsonThroughput]
      type = "json_parser"
      inputs = ["inThroughput"]
      drop_field = false # optional, default
      drop_invalid = true
      field = "message" # optional, default

    [transforms.filterThroughput]
      # General
      type = "filter"
      inputs = ["parseJsonThroughput"]
      # Condition
      condition."type.eq" = "THROUGHPUT_REPORT"

    [transforms.parseThroughput]
      inputs = ["filterThroughput"]
      type   = "json_parser"
      field  = "throughputReport"
      drop_field = false # optional, default
      drop_invalid = true

    [transforms.log_to_metric_throughput]
      inputs = ["parseThroughput"]
      type = "log_to_metric"

      [[transforms.log_to_metric_throughput.metrics]]
        type = "gauge"
        field = "dlThroughput"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
        tags.timestamp = "{{timestamp}}"

      [[transforms.log_to_metric_throughput.metrics]]
        type = "gauge"
        field = "ulThroughput"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
        tags.timestamp = "{{timestamp}}"


    [sinks.outThroughput]
      # General
      bucket = "vector-bucket"
      database = "test"
      endpoint =  "http://10.20.20.20:30303/"
      inputs = ["log_to_metric_throughput"]
      namespace = "df"
      type = "influxdb_metrics"
      username = "admin"
      password = "password"
---
# Source: ric/charts/vector/templates/uemeasurements-toml.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: uemeasurements-toml
data:
  uemeasurements.toml: |-
    [sources.inUeMeas]
      bootstrap_servers = "10.20.20.20:31090"
      group_id = "vectorUeMeas"
      topics = ["test2"]
      type = "kafka"

    [transforms.parseJsonUeMeas]
      type = "json_parser"
      inputs = ["inUeMeas"]
      drop_field = false # optional, default
      drop_invalid = true
      field = "message" # optional, default

    [transforms.filterUeMeas]
      # General
      type = "filter"
      inputs = ["parseJsonUeMeas"]
      # Condition
      condition."type.eq" = "UE_MEASUREMENT"

    [transforms.parseUeMeas]
      inputs = ["filterUeMeas"]
      type   = "json_parser"
      field  = "ueMeasurement"
      drop_field = false # optional, default
      drop_invalid = true

    [transforms.log_to_metric_ue_measurement]
      inputs = ["parseUeMeas"]
      type = "log_to_metric"

      [[transforms.log_to_metric_ue_measurement.metrics]]
        type = "gauge"
        field = "rsrp"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
        tags.ueCellId = "{{ueCellId}}" # optional

      [[transforms.log_to_metric_ue_measurement.metrics]]
        type = "gauge"
        field = "rsrq"
        tags.cellId = "{{cellId}}" # optional
        tags.ueRicId = "{{ueRicId}}"
        tags.ueCellId = "{{ueCellId}}" # optional


    [sinks.outUeMeas]
      # General
      bucket = "vector-bucket"
      database = "test"
      endpoint =  "http://10.20.20.20:30303/"
      inputs = ["log_to_metric_ue_measurement"]
      namespace = "df"
      type = "influxdb_metrics"
      username = "admin"
      password = "password"
---
# Source: ric/charts/acc-state-db/charts/xapp-redis/templates/pv.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: ric-acc-state-db-redis
  labels:
    helm.sh/chart: xapp-redis-0.1.4
    app.kubernetes.io/name: acc-state-db-redis
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "6.0.4-alpine3.12"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-redis
    drax/xapp-component-version: 0.1.4
    type: local
spec:
  storageClassName: ric-acc-state-db-redis
  capacity:
    storage: "1Gi"
  accessModes:
    - "ReadWriteMany"
  hostPath:
     path: /opt/pods/ric-acc-state-db-redis
     type: DirectoryOrCreate
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/pv.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: ric-grafana
  labels:
    type: local
spec:
  storageClassName: grafana
  capacity:
    storage: "10Gi"
  accessModes:
    - "ReadWriteMany"
  hostPath:
     path: "/opt/pods//ric-grafana"
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/alertmanager-pv.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: ric-prometheus-alertmanager
  labels:
    type: local
spec:
  storageClassName: prom-alertmanager
  capacity:
    storage: 2Gi
  accessModes:
    - "ReadWriteMany"
  hostPath:
     path: "/opt/pods/ric-prometheus-alertmanager"
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/server-pv.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: ric-prometheus-server
  labels:
    type: local
spec:
  storageClassName: prom-server
  capacity:
    storage: 9Gi
  accessModes:
    - "ReadWriteMany"
  hostPath:
     path: "/opt/pods/ric-prometheus-server"
---
# Source: ric/charts/druid/templates/pv.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: ric-druid
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
    type: local
spec:
  storageClassName: acc-druid
  capacity:
    storage: "5Gi"
  accessModes:
    - "ReadWriteMany"
  hostPath:
     path: "/opt/pods//ric-druid"
     type: DirectoryOrCreate
---
# Source: ric/charts/influxdb/templates/pv.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: ric-influxdb
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    type: local
spec:
  storageClassName: acc-influxdb
  capacity:
    storage: "8Gi"
  accessModes:
    - "ReadWriteOnce"
  hostPath:
     path: "/opt/pods//ric-influxdb"
     type: DirectoryOrCreate
---
# Source: ric/charts/loki-stack/charts/loki/templates/pv.yaml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: ric-loki
  labels:
    helm.sh/chart: loki-0.27.1
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Loki
    drax/component-name: loki
    drax/component-version: 0.27.1
    app: loki
    chart: loki-0.27.1
    release: ric
    heritage: Helm
    type: local
spec:
  storageClassName: acc-loki
  capacity:
    storage: "10Gi"
  accessModes:
    - "ReadWriteOnce"
  hostPath:
     path: "/opt/pods/acc-drax-loki-storage"
     type: DirectoryOrCreate
---
# Source: ric/charts/acc-state-db/charts/xapp-redis/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ric-acc-state-db-redis
  labels:
    helm.sh/chart: xapp-redis-0.1.4
    app.kubernetes.io/name: acc-state-db-redis
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "6.0.4-alpine3.12"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-redis
    drax/xapp-component-version: 0.1.4
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
  storageClassName: ric-acc-state-db-redis
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ric-grafana
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    release: ric
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "10Gi"
  storageClassName: grafana
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/alertmanager-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-alertmanager
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "prom-alertmanager"
  resources:
    requests:
      storage: "2Gi"
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/server-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    component: "server"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-server
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "prom-server"
  resources:
    requests:
      storage: "9Gi"
---
# Source: ric/charts/druid/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ric-druid
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "5Gi"
  storageClassName: acc-druid
---
# Source: ric/charts/loki-stack/charts/loki/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ric-loki
  labels:
    helm.sh/chart: loki-0.27.1
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Loki
    drax/component-name: loki
    drax/component-version: 0.27.1
    app: loki
    chart: loki-0.27.1
    release: ric
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
  storageClassName: acc-loki
---
# Source: ric/charts/acc-service-monitor/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: accservicemonitor
  labels:

    helm.sh/chart: acc-service-monitor-0.3.0
    app.kubernetes.io/name: acc-service-monitor
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: ServiceMonitor
    drax/component-name: acc-service-monitor
    drax/component-version: 0.3.0
---
# Source: ric/charts/acc-service-orchestrator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ric-acc-service-orchestrator
  labels:
    helm.sh/chart: acc-service-orchestrator-0.4.0
    app.kubernetes.io/name: acc-service-orchestrator
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: ServiceOrchestrator
    drax/component-name: acc-service-orchestrator
    drax/component-version: 0.4.0
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: grafana
    chart: grafana-4.4.0
    heritage: Helm
    release: ric
  name: ric-grafana
  namespace: default
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: grafana
    chart: grafana-4.4.0
    heritage: Helm
    release: ric
  name: ric-grafana-test
  namespace: default
---
# Source: ric/charts/acc-sys-dashboard/charts/kube-eagle/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: kube-eagle
    chart: kube-eagle-1.1.5
    release: ric
    heritage: Helm
    helm.sh/chart: kube-eagle-1.1.5
    app.kubernetes.io/version: "1.1.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: KubeEagle
    drax/component-name: kube-eagle
    drax/component-version: 1.1.5
  name: sa-kube-eagle
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/metrics-server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ric-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/alertmanager-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-alertmanager
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/kube-state-metrics-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "kube-state-metrics"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-kube-state-metrics
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/node-exporter-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "node-exporter"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-node-exporter
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/pushgateway-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-pushgateway
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "server"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-server
---
# Source: ric/charts/influxdb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ric-influxdb
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: ric/charts/loki-stack/charts/fluent-bit/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: fluent-bit-0.1.1
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: FluentBit
    drax/component-name: fluent-bit
    drax/component-version: 0.1.1
    app: fluent-bit-loki
    chart: fluent-bit-0.1.1
    heritage: Helm
    release: ric
  name: ric-fluent-bit-loki
  namespace: default
---
# Source: ric/charts/loki-stack/charts/loki/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: loki
    chart: loki-0.27.1
    heritage: Helm
    release: ric
  annotations:
    {}
  name: ric-loki
  namespace: default
---
# Source: ric/charts/acc-service-monitor/templates/clusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: acc-service-monitor-clusterrole
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - services
  verbs:
  - get
  - watch
  - list
  - create
  - delete
  - deletecollection
  - patch
  - update
---
# Source: ric/charts/acc-service-orchestrator/templates/clusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ric-acc-service-orchestrator 
rules:
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs:
  - "*"
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app: grafana
    chart: grafana-4.4.0
    release: ric
    heritage: Helm
  name: ric-grafana-clusterrole
rules: []
---
# Source: ric/charts/acc-sys-dashboard/charts/kube-eagle/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: kube-eagle
    chart: kube-eagle-1.1.5
    release: ric
    heritage: Helm
    helm.sh/chart: kube-eagle-1.1.5
    app.kubernetes.io/version: "1.1.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: KubeEagle
    drax/component-name: kube-eagle
    drax/component-version: 1.1.5
  name: ric-kube-eagle
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - pods
    verbs:
      - get
      - list
  - apiGroups:
      - metrics.k8s.io
    resources:
      - pods
      - nodes
    verbs:
      - get
      - list
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/aggregated-metrics-reader-cluster-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:metrics-server-aggregated-reader
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods","nodes"]
    verbs: ["get", "list", "watch"]
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:ric-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
rules:
  - apiGroups:
    - ""
    resources:
      - pods
      - nodes
      - nodes/stats
      - namespaces
    verbs:
      - get
      - list
      - watch
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/alertmanager-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-alertmanager
rules:
  []
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/kube-state-metrics-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: "kube-state-metrics"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-kube-state-metrics
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - persistentvolumeclaims
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
      - persistentvolumes
      - endpoints
      - secrets
      - configmaps
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - ingresses
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - statefulsets
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - list
      - watch
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - list
      - watch
  - apiGroups:
    - storage.k8s.io
    resources:
      - storageclasses
      - volumeattachments
    verbs:
      - list
      - watch
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - list
      - watch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - list
      - watch
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/pushgateway-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-pushgateway
rules:
  []
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/server-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: "server"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
# Source: ric/charts/loki-stack/charts/fluent-bit/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app: fluent-bit-loki
    chart: fluent-bit-0.1.1
    release: ric
    heritage: Helm
  name: ric-fluent-bit-loki-clusterrole
  namespace: default
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  verbs: ["get", "watch", "list"]
---
# Source: ric/charts/acc-service-monitor/templates/clusterRoleBinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: acc-service-monitor-clusterrolebinding
  namespace: default
subjects:  
- kind: ServiceAccount
  name: accservicemonitor
  namespace: default
roleRef:  
  kind: ClusterRole
  name: acc-service-monitor-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: ric/charts/acc-service-orchestrator/templates/clusterRoleBinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ric-acc-service-orchestrator 
  namespace: default
subjects:  
- kind: ServiceAccount
  name: ric-acc-service-orchestrator
  namespace: default
roleRef:  
  kind: ClusterRole
  name: ric-acc-service-orchestrator
  apiGroup: rbac.authorization.k8s.io
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ric-grafana-clusterrolebinding
  labels:
    app: grafana
    chart: grafana-4.4.0
    release: ric
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: ric-grafana
    namespace: default
roleRef:
  kind: ClusterRole
  name: ric-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: ric/charts/acc-sys-dashboard/charts/kube-eagle/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: kube-eagle
    chart: kube-eagle-1.1.5
    release: ric
    heritage: Helm
    helm.sh/chart: kube-eagle-1.1.5
    app.kubernetes.io/version: "1.1.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: KubeEagle
    drax/component-name: kube-eagle
    drax/component-version: 1.1.5
  name: ric-kube-eagle
subjects:
  - kind: ServiceAccount
    name: sa-kube-eagle
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ric-kube-eagle
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/auth-delegator-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ric-metrics-server:system:auth-delegator
  namespace: kube-system
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: ric-metrics-server
    namespace: default
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/metrics-server-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:ric-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:ric-metrics-server
subjects:
  - kind: ServiceAccount
    name: ric-metrics-server
    namespace: default
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/alertmanager-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-alertmanager
subjects:
  - kind: ServiceAccount
    name: ric-prometheus-alertmanager
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ric-prometheus-alertmanager
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/kube-state-metrics-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "kube-state-metrics"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: ric-prometheus-kube-state-metrics
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ric-prometheus-kube-state-metrics
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/pushgateway-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-pushgateway
subjects:
  - kind: ServiceAccount
    name: ric-prometheus-pushgateway
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ric-prometheus-pushgateway
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/server-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "server"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-server
subjects:
  - kind: ServiceAccount
    name: ric-prometheus-server
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ric-prometheus-server
---
# Source: ric/charts/loki-stack/charts/fluent-bit/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ric-fluent-bit-loki-clusterrolebinding
  labels:
    app: fluent-bit-loki
    chart: fluent-bit-0.1.1
    release: ric
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: ric-fluent-bit-loki
    namespace: default
roleRef:
  kind: ClusterRole
  name: ric-fluent-bit-loki-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: ric-grafana
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    heritage: Helm
    release: ric
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [ric-grafana]
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/tests/test-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ric-grafana-test
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    heritage: Helm
    release: ric
rules:
- apiGroups:      ['policy']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [ric-grafana-test]
---
# Source: ric/charts/loki-stack/charts/fluent-bit/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ric-fluent-bit-loki
  namespace: default
  labels:
    app: fluent-bit-loki
    chart: fluent-bit-0.1.1
    heritage: Helm
    release: ric
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [ric-fluent-bit-loki]
---
# Source: ric/charts/loki-stack/charts/loki/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ric-loki
  namespace: default
  labels:
    app: loki
    chart: loki-0.27.1
    heritage: Helm
    release: ric
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [ric-loki]
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ric-grafana
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    heritage: Helm
    release: ric
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ric-grafana
subjects:
- kind: ServiceAccount
  name: ric-grafana
  namespace: default
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/tests/test-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ric-grafana-test
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    heritage: Helm
    release: ric
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ric-grafana-test
subjects:
- kind: ServiceAccount
  name: ric-grafana-test
  namespace: default
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ric-metrics-server-auth-reader
  namespace: kube-system
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: ric-metrics-server
    namespace: default
---
# Source: ric/charts/loki-stack/charts/fluent-bit/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ric-fluent-bit-loki
  namespace: default
  labels:
    app: fluent-bit-loki
    chart: fluent-bit-0.1.1
    heritage: Helm
    release: ric
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ric-fluent-bit-loki
subjects:
- kind: ServiceAccount
  name: ric-fluent-bit-loki
---
# Source: ric/charts/loki-stack/charts/loki/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ric-loki
  namespace: default
  labels:
    app: loki
    chart: loki-0.27.1
    heritage: Helm
    release: ric
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ric-loki
subjects:
- kind: ServiceAccount
  name: ric-loki
---
# Source: ric/charts/acc-service-monitor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: acc-service-monitor
  labels:
    helm.sh/chart: acc-service-monitor-0.3.0
    app.kubernetes.io/name: acc-service-monitor
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: ServiceMonitor
    drax/component-name: acc-service-monitor
    drax/component-version: 0.3.0
spec:
  type: NodePort
  ports:
    - port: 80
      nodePort: 30500
      protocol: TCP
      name: acc-ser-mon
  selector:
    app.kubernetes.io/name: acc-service-monitor
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/acc-service-orchestrator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: acc-service-orchestrator
  labels:
    helm.sh/chart: acc-service-orchestrator-0.4.0
    app.kubernetes.io/name: acc-service-orchestrator
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: ServiceOrchestrator
    drax/component-name: acc-service-orchestrator
    drax/component-version: 0.4.0
spec:
  type: NodePort
  ports:
    - port: 80
      nodePort: 30502
      protocol: TCP
      name: acc-ser-orc
  selector:
    app.kubernetes.io/name: acc-service-orchestrator
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/acc-state-db/charts/xapp-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-acc-state-db-api
  labels:
    helm.sh/chart: xapp-api-0.3.7
    app.kubernetes.io/name: acc-state-db-api
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-api
    drax/xapp-component-version: 0.3.7
spec:
  type: NodePort
  ports:
    - port: 80
      
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: acc-state-db-api
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/acc-state-db/charts/xapp-redis/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-acc-state-db-redis 
  labels:
    helm.sh/chart: xapp-redis-0.1.4
    app.kubernetes.io/name: acc-state-db-redis
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "6.0.4-alpine3.12"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-redis
    drax/xapp-component-version: 0.1.4
spec:
  type: NodePort
  ports:
    - port: 6379
      
      protocol: TCP
      name: xapp-redis-svc
  selector:
    app.kubernetes.io/name: acc-state-db-redis
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/acc-state-db/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-acc-state-db
  labels:
    helm.sh/chart: acc-state-db-0.4.0
    app.kubernetes.io/name: acc-state-db
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.4.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-core
    drax/xapp-component-version: 0.4.0
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: http
      
      nodePort: 30503
      
  selector:
    app.kubernetes.io/name: acc-state-db
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-grafana
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    release: ric
    heritage: Helm
spec:
  type: NodePort
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000

      nodePort: 30300

  selector:
    app: grafana
    release: ric
---
# Source: ric/charts/acc-sys-dashboard/charts/kube-eagle/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-kube-eagle
  labels:
    app: kube-eagle
    chart: kube-eagle-1.1.5
    release: ric
    heritage: Helm
    helm.sh/chart: kube-eagle-1.1.5
    app.kubernetes.io/version: "1.1.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: KubeEagle
    drax/component-name: kube-eagle
    drax/component-version: 1.1.5
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: kube-eagle
    release: ric
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/metric-server-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-metrics-server
  labels:
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
  annotations:
    {}
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: metrics-server
    release: ric
  type: ClusterIP
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/alertmanager-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
  name: ric-prometheus-alertmanager
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9093
  selector:
    component: "alertmanager"
    app: prometheus
    release: ric
  sessionAffinity: None
  type: "ClusterIP"
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/kube-state-metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
    component: "kube-state-metrics"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-kube-state-metrics
spec:
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: telemetry
      port: 81
      protocol: TCP
      targetPort: 8081
  selector:
    component: "kube-state-metrics"
    app: prometheus
    release: ric
  type: "ClusterIP"
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/node-exporter-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
    component: "node-exporter"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-node-exporter
spec:
  clusterIP: None
  ports:
    - name: metrics
      port: 9100
      protocol: TCP
      targetPort: 9100
  selector:
    component: "node-exporter"
    app: prometheus
    release: ric
  type: "ClusterIP"
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/pushgateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/probe: pushgateway
  labels:
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
    component: "pushgateway"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-pushgateway
spec:
  ports:
    - name: http
      port: 9091
      protocol: TCP
      targetPort: 9091
  selector:
    component: "pushgateway"
    app: prometheus
    release: ric
  type: "ClusterIP"
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/server-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
    component: "server"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-server
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    component: "server"
    app: prometheus
    release: ric
  sessionAffinity: None
  type: "ClusterIP"
---
# Source: ric/charts/dash-front-back-end/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-dash-front-back-end
  labels:
    helm.sh/chart: dash-front-back-end-0.16.0
    app.kubernetes.io/name: dash-front-back-end
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.16.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: WebGUI
    drax/component-name: dash-front-back-end
    drax/component-version: 0.16.0
spec:
  type: NodePort
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
      name: http
      nodePort: 31315
  selector:
    app.kubernetes.io/name: dash-front-back-end
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/dash-front-back-end/templates/websocketService.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-dash-front-back-end-websocket
  labels:
    helm.sh/chart: dash-front-back-end-0.16.0
    app.kubernetes.io/name: dash-front-back-end
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.16.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: WebGUI
    drax/component-name: dash-front-back-end
    drax/component-version: 0.16.0
spec:
  type: NodePort
  ports:
    - port: 5001
      targetPort: 5001
      name: websocket
      nodePort: 31316
  selector:
    app.kubernetes.io/name: dash-front-back-end
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/druid/templates/overlord-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-druid-overlord
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
spec:
  type: ClusterIP
  ports:
  - name: "overlord"
    port: 8081
    protocol: TCP
  selector:
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/druid/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-druid
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
spec:
  type: NodePort
  ports:
  - name: druid
    nodePort: 30301
    port: 8888
    protocol: TCP
  selector:
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/influxdb/templates/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-influxdb-api
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
  - name: api
    port: 8086
    targetPort: api
    nodePort: 30303
  selector:
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/influxdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-influxdb
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: rpc
    port: 8088
    targetPort: rpc
  selector:
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/kafka/charts/zookeeper/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-zookeeper-headless
  labels:
    app: zookeeper
    chart: zookeeper-2.1.0
    release: ric
    heritage: Helm
spec:
  clusterIP: None
  ports:
    - name: client
      port: 2181
      targetPort: client
      protocol: TCP
    - name: election
      port: 3888
      targetPort: election
      protocol: TCP
    - name: server
      port: 2888
      targetPort: server
      protocol: TCP
  selector:
    app: zookeeper
    release: ric
---
# Source: ric/charts/kafka/charts/zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.0
    release: ric
    heritage: Helm
spec:
  type: NodePort
  ports:
    - name: client
      nodePort: 30305
      port: 2181
      protocol: TCP
      targetPort: client
  selector:
    app: zookeeper
    release: ric
---
# Source: ric/charts/kafka/templates/service-brokers-external.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  name: ric-0-external
  labels:
    helm.sh/chart: kafka-0.20.9
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Kafka
    drax/component-name: kafka
    drax/component-version: 0.20.9
    app.kubernetes.io/component: kafka-broker
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
    pod: "ric-kafka-0"
spec:
  type: NodePort
  ports:
    - name: external-broker
      port: 19092
      targetPort: 31090
      nodePort: 31090
      protocol: TCP
  selector:
    app.kubernetes.io/component: kafka-broker
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
    statefulset.kubernetes.io/pod-name: "ric-kafka-0"
---
# Source: ric/charts/kafka/templates/service-brokers.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-kafka
  labels:
    helm.sh/chart: kafka-0.20.9
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Kafka
    drax/component-name: kafka
    drax/component-version: 0.20.9
    app.kubernetes.io/component: kafka-broker
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
spec:
  ports:
  - name: broker
    port: 9092
    targetPort: kafka
  selector:
    app.kubernetes.io/component: kafka-broker
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/kafka/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-kafka-headless
  labels:
    helm.sh/chart: kafka-0.20.9
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Kafka
    drax/component-name: kafka
    drax/component-version: 0.20.9
    app.kubernetes.io/component: kafka-broker
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: broker
    port: 9092
  clusterIP: None
  selector:
    app.kubernetes.io/component: kafka-broker
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
---
# Source: ric/charts/loki-stack/charts/loki/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-loki-headless
  namespace: default
  labels:
    helm.sh/chart: loki-0.27.1
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Loki
    drax/component-name: loki
    drax/component-version: 0.27.1
    app: loki
    chart: loki-0.27.1
    release: ric
    heritage: Helm
    variant: headless
spec:
  clusterIP: None
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: ric
---
# Source: ric/charts/loki-stack/charts/loki/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ric-loki
  namespace: default
  labels:
    helm.sh/chart: loki-0.27.1
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Loki
    drax/component-name: loki
    drax/component-version: 0.27.1
    app: loki
    chart: loki-0.27.1
    release: ric
    heritage: Helm
  annotations:
    {}
spec:
  type: NodePort
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
      nodePort: 30302
  selector:
    app: loki
    release: ric
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/node-exporter-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
    component: "node-exporter"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-node-exporter
spec:
  selector:
    matchLabels:
      component: "node-exporter"
      app: prometheus
      release: ric
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        drax/role: ric
        drax/name: Prometheus
        drax/component-name: prometheus
        drax/component-version: 10.3.1
        component: "node-exporter"
        app: prometheus
        release: ric
        chart: prometheus-10.3.1
        heritage: Helm
    spec:
      serviceAccountName: ric-prometheus-node-exporter
      containers:
        - name: prometheus-node-exporter
          image: "prom/node-exporter:v0.18.1"
          imagePullPolicy: "IfNotPresent"
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
          ports:
            - name: metrics
              containerPort: 9100
              hostPort: 9100
          resources:
            {}
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
      hostNetwork: true
      hostPID: true
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
---
# Source: ric/charts/loki-stack/charts/fluent-bit/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ric-fluent-bit-loki
  namespace: default
  labels:
    helm.sh/chart: fluent-bit-0.1.1
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: FluentBit
    drax/component-name: fluent-bit
    drax/component-version: 0.1.1
    app: fluent-bit-loki
    chart: fluent-bit-0.1.1
    release: ric
    heritage: Helm
  annotations:
    {}
spec:
  selector:
    matchLabels:
      app: fluent-bit-loki
      release: ric
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: fluent-bit-0.1.1
        app.kubernetes.io/version: "v1.4.1"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: FluentBit
        drax/component-name: fluent-bit
        drax/component-version: 0.1.1
        app: fluent-bit-loki
        release: ric
      annotations:
        checksum/config: 91709830f2c0a85eb491da52cbeaf51b48b00c69bb380a61e32f4888441f571e
        prometheus.io/path: /api/v1/metrics/prometheus
        prometheus.io/port: "2020"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: ric-fluent-bit-loki
      containers:
        - name: fluent-bit-loki
          image: "grafana/fluent-bit-plugin-loki:1.4.1-amd64"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: /fluent-bit/etc
            - name: run
              mountPath: /run/fluent-bit
            - mountPath: /var/log
              name: varlog
            - mountPath: /var/lib/docker/containers
              name: varlibdockercontainers
              readOnly: true
          ports:
            - containerPort: 2020
              name: http-metrics
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 100Mi
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      terminationGracePeriodSeconds: 10
      volumes:
        - name: config
          configMap:
            name: ric-fluent-bit-loki
        - name: run
          hostPath:
            path: /run/fluent-bit
        - hostPath:
            path: /var/log
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
          name: varlibdockercontainers
---
# Source: ric/charts/acc-service-monitor/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-acc-service-monitor
  labels:
    helm.sh/chart: acc-service-monitor-0.3.0
    app.kubernetes.io/name: acc-service-monitor
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: ServiceMonitor
    drax/component-name: acc-service-monitor
    drax/component-version: 0.3.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: acc-service-monitor
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        helm.sh/chart: acc-service-monitor-0.3.0
        app.kubernetes.io/name: acc-service-monitor
        app.kubernetes.io/instance: ric
        app.kubernetes.io/version: "0.3.1"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: ServiceMonitor
        drax/component-name: acc-service-monitor
        drax/component-version: 0.3.0
    spec:
      imagePullSecrets:
        - name: accelleran-secret
      serviceAccountName: accservicemonitor
      securityContext:
        {}
      containers:
        - name: acc-service-monitor
          securityContext:
            runAsUser: 0
          image: "accelleran/acc-service-monitor:0.3.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: MONITORED_NAMESPACES
              value: "default"
          ports:
            - name: acc-ser-mon
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /services
              port: 80
          readinessProbe:
            httpGet:
              path: /services
              port: 80
          resources:
            {}
---
# Source: ric/charts/acc-service-orchestrator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-acc-service-orchestrator
  labels:
    helm.sh/chart: acc-service-orchestrator-0.4.0
    app.kubernetes.io/name: acc-service-orchestrator
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.4.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: ServiceOrchestrator
    drax/component-name: acc-service-orchestrator
    drax/component-version: 0.4.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: acc-service-orchestrator
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        helm.sh/chart: acc-service-orchestrator-0.4.0
        app.kubernetes.io/name: acc-service-orchestrator
        app.kubernetes.io/instance: ric
        app.kubernetes.io/version: "0.4.0"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: ServiceOrchestrator
        drax/component-name: acc-service-orchestrator
        drax/component-version: 0.4.0
    spec:
      imagePullSecrets:
        - name: accelleran-secret
      serviceAccountName: ric-acc-service-orchestrator
      securityContext:
        {}
      containers:
        - name: acc-service-orchestrator
          securityContext:
            privileged: true
            runAsUser: 0
          image: "accelleran/acc-service-orchestrator:0.4.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: acc-ser-orc
              containerPort: 80
              protocol: TCP
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
---
# Source: ric/charts/acc-state-db/charts/xapp-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-acc-state-db-api
  labels:
    helm.sh/chart: xapp-api-0.3.7
    app.kubernetes.io/name: acc-state-db-api
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-api
    drax/xapp-component-version: 0.3.7
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: acc-state-db-api
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        helm.sh/chart: xapp-api-0.3.7
        app.kubernetes.io/name: acc-state-db-api
        app.kubernetes.io/instance: ric
        app.kubernetes.io/version: "0.3.0"
        app.kubernetes.io/managed-by: Helm
        drax/role: xapp
        drax/xapp-name: ric
        drax/xapp-component-name: xapp-api
        drax/xapp-component-version: 0.3.7
    spec:
      imagePullSecrets:
        - name: accelleran-secret
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: xapp-api-check-redis
          image: accelleran/acc-generic-img:0.2.0
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until [ "$(redis-cli -h ric-acc-state-db-redis.default ping)" == "PONG" ]; do echo $(date) [CHECK-SERVICES] Waiting for REDIS; sleep 2; done; echo Redis online']
      containers:
        - name: xapp-api
          securityContext:
            runAsUser: 0
          image: "accelleran/accelleran-xapp-api:0.3.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: ric-acc-state-db-api-settings
              mountPath: /app/settings.py
              subPath: "settings.py"
          #livenessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /
          #    port: http
          resources:
            {}
      volumes:
        - name: ric-acc-state-db-api-settings
          configMap:
            name: ric-acc-state-db-api-settings
---
# Source: ric/charts/acc-state-db/charts/xapp-redis/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-acc-state-db-redis
  labels:
    helm.sh/chart: xapp-redis-0.1.4
    app.kubernetes.io/name: acc-state-db-redis
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "6.0.4-alpine3.12"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-redis
    drax/xapp-component-version: 0.1.4
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: acc-state-db-redis
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        app.kubernetes.io/name: acc-state-db-redis
        app.kubernetes.io/instance: ric
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 0
      containers:
        - name: xapp-redis
          securityContext:
            runAsUser: 0
          image: "redis:6.0.4-alpine3.12"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: acc-redis
              mountPath: /data
            - name: backup
              mountPath: /backup-script
          ports:
            - name: xapp-redis-svc
              containerPort: 6379
              protocol: TCP
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", 'until [ "$(redis-cli ping)" == "PONG" ]; do echo $(date) [CHECK-SERVICES] Waiting for REDIS; sleep 1; done; redis-cli config set notify-keyspace-events KEA']
            preStop:
              exec:
                command: ["/bin/sh", "-c", "/backup-script/backup-db.sh"]
          resources:
            {}
      volumes:
        - name: acc-redis
          persistentVolumeClaim:
            claimName: ric-acc-state-db-redis
        - name: backup
          configMap:
            name: ric-acc-state-db-redis-backup
            defaultMode: 0755
---
# Source: ric/charts/acc-state-db/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-acc-state-db
  labels:
    helm.sh/chart: acc-state-db-0.4.0
    app.kubernetes.io/name: acc-state-db
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.4.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: xapp
    drax/xapp-name: ric
    drax/xapp-component-name: xapp-core
    drax/xapp-component-version: 0.4.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: acc-state-db
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        helm.sh/chart: acc-state-db-0.4.0
        app.kubernetes.io/name: acc-state-db
        app.kubernetes.io/instance: ric
        app.kubernetes.io/version: "0.4.0-beta1"
        app.kubernetes.io/managed-by: Helm
        drax/role: xapp
        drax/xapp-name: ric
        drax/xapp-component-name: xapp-core
        drax/xapp-component-version: 0.4.0
    spec:
      imagePullSecrets:
        - name: accelleran-secret
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: acc-state-db-check-redis
          image: accelleran/acc-generic-img:0.2.0
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until [ "$(redis-cli -h ric-xapp-redis.default ping)" == "PONG" ]; do echo $(date) [CHECK-SERVICES] Waiting for REDIS; sleep 2; done; echo Redis online']
        
        - name: acc-state-db-flush-redis
          image: accelleran/acc-generic-img:0.2.0
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'redis-cli -h ric-xapp-redis.default FLUSHALL']
        
      containers:
        - name: acc-state-db
          securityContext:
            runAsUser: 0
          image: "accelleran/acc-state-db:0.4.0-beta1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: ric-acc-state-db-config
              mountPath: /src/xapp/xapp_configuration.py
              subPath: "xapp_configuration.py"
          ports:
            - containerPort: 80
#          livenessProbe:
#            httpGet:
#              path: /
#              port: http
#          readinessProbe:
#            httpGet:
#              path: /
#              port: http
          resources:
            {}
      volumes:
        - name: ric-acc-state-db-config
          configMap:
            name: ric-acc-state-db-config
---
# Source: ric/charts/acc-sys-dashboard/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-grafana
  namespace: default
  labels:
    app: grafana
    chart: grafana-4.4.0
    release: ric
    heritage: Helm
    helm.sh/chart: grafana-4.4.0
    app.kubernetes.io/version: "6.5.2"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Grafana
    drax/component-name: grafana
    drax/component-version: 4.4.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      release: ric
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: grafana
        release: ric
        helm.sh/chart: grafana-4.4.0
        app.kubernetes.io/version: "6.5.2"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: Grafana
        drax/component-name: grafana
        drax/component-version: 4.4.0
      annotations:
        checksum/config: 60257e570085d707e9ab7af34112f39f9f4e6d84abe310d425b0362a8f46f784
        checksum/dashboards-json-config: 4acd51cb7a62b5b5e0505c9426037c1c0440d10f7e3eea7ee3f4421c653ea637
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 29910d3741fda57aa2b0b6f7bd6f4ee06319ad4b901fcf73cc1200d6a83a5627
    spec:
      
      serviceAccountName: ric-grafana
      securityContext:
        fsGroup: 472
        runAsUser: 472
      initContainers:
        - name: init-chown-data
          image: "busybox:1.30"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
          command: ["chown", "-R", "472:472", "/var/lib/grafana"]
          resources:
            {}
          volumeMounts:
            - name: storage
              mountPath: "/var/lib/grafana"
        - name: download-dashboards
          image: "appropriate/curl:latest"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: [ "-c", "mkdir -p /var/lib/grafana/dashboards/default && /bin/sh /etc/grafana/download_dashboards.sh" ]
          env:
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/download_dashboards.sh"
              subPath: download_dashboards.sh
            - name: storage
              mountPath: "/var/lib/grafana"
      imagePullSecrets:
        - name: accelleran-secret
      containers:
        - name: grafana
          image: "accelleran/dash-grafana:0.3.0"
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - "sh"
                - "-c"
                - |
                  /bin/sh <<'EOF'
                  now=$(date)
                  echo "$now" > /var/lib/grafana/status.log
                  echo "-- Script started..." >> /var/lib/grafana/status.log
                  mkdir /var/lib/grafana/plugins/druidplugin
                  cp -r /plugins/. /var/lib/grafana/plugins/druidplugin
                  echo "-- Finished copying the druidplugin..." >> /var/lib/grafana/status.log
                  EOF
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: dashboards-default
              mountPath: "/var/lib/grafana/dashboards/default/custom-dashboard.json"
              subPath: "custom-dashboard.json"
            - name: dashboards-default
              mountPath: "/var/lib/grafana/dashboards/default/loki-log-dashboard.json"
              subPath: "loki-log-dashboard.json"
            - name: dashboards-default
              mountPath: "/var/lib/grafana/dashboards/default/monitor-dashboard.json"
              subPath: "monitor-dashboard.json"
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: datasources.yaml
            - name: config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboardproviders.yaml"
              subPath: dashboardproviders.yaml
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: ric-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ric-grafana
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: ric-grafana
                  key: plugins
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: ric-grafana
        - name: dashboards-default
          configMap:
            name: ric-grafana-dashboards-default
        - name: storage
          persistentVolumeClaim:
            claimName: ric-grafana
---
# Source: ric/charts/acc-sys-dashboard/charts/kube-eagle/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-kube-eagle
  labels:
    app: kube-eagle
    chart: kube-eagle-1.1.5
    release: ric
    heritage: Helm
    helm.sh/chart: kube-eagle-1.1.5
    app.kubernetes.io/version: "1.1.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: KubeEagle
    drax/component-name: kube-eagle
    drax/component-version: 1.1.5
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-eagle
      release: ric
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      labels:
        app: kube-eagle
        release: ric
        helm.sh/chart: kube-eagle-1.1.5
        app.kubernetes.io/version: "1.1.0"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: KubeEagle
        drax/component-name: kube-eagle
        drax/component-version: 1.1.5
    spec:
      securityContext:
        fsGroup: 99
        runAsUser: 99
      serviceAccountName: sa-kube-eagle
      containers:
        - name: kube-eagle
          image: "quay.io/google-cloud-tools/kube-eagle:1.1.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: TELEMETRY_HOST
              value: "0.0.0.0"
            - name: TELEMETRY_PORT
              value: "8080"
            - name: METRICS_NAMESPACE
              value: "eagle"
            - name: LOG_LEVEL
              value: "info"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            timeoutSeconds: 5
            httpGet:
              path: /health
              port: http
          readinessProbe:
            timeoutSeconds: 5
            httpGet:
              path: /health
              port: http
          resources:
            {}
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/metrics-server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
spec:
  selector:
    matchLabels:
      app: metrics-server
      release: ric
  replicas: 1
  template:
    metadata:
      labels:
        app: metrics-server
        release: ric
        helm.sh/chart: metrics-server-2.9.0
        app.kubernetes.io/version: "0.3.6"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: MetricsServer
        drax/component-name: metrics-server
        drax/component-version: 2.9.0
    spec:
      serviceAccountName: ric-metrics-server
      containers:
        - name: metrics-server
          image: "gcr.io/google_containers/metrics-server-amd64:v0.3.6"
          imagePullPolicy: IfNotPresent
          command:
            - /metrics-server
            - --cert-dir=/tmp
            - --logtostderr
            - --secure-port=8443
            - --kubelet-insecure-tls
            - --kubelet-preferred-address-types=InternalIP
          ports:
          - containerPort: 8443
            name: https
          livenessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          volumeMounts:
          - name: tmp
            mountPath: /tmp
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      volumes:
      - name: tmp
        emptyDir: {}
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/alertmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
    component: "alertmanager"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-alertmanager
spec:
  selector:
    matchLabels:
      component: "alertmanager"
      app: prometheus
      release: ric
  replicas: 1
  template:
    metadata:
      labels:
        drax/role: ric
        drax/name: Prometheus
        drax/component-name: prometheus
        drax/component-version: 10.3.1
        component: "alertmanager"
        app: prometheus
        release: ric
        chart: prometheus-10.3.1
        heritage: Helm
    spec:
      serviceAccountName: ric-prometheus-alertmanager
      containers:
        - name: prometheus-alertmanager
          image: "prom/alertmanager:v0.20.0"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          args:
            - --config.file=/etc/config/alertmanager.yml
            - --storage.path=/data
            - --cluster.advertise-address=$(POD_IP):6783
            - --web.external-url=http://localhost:9093

          ports:
            - containerPort: 9093
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: "/data"
              subPath: ""

        - name: prometheus-alertmanager-configmap-reload
          image: "jimmidyson/configmap-reload:v0.3.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9093/-/reload
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      volumes:
        - name: config-volume
          configMap:
            name: ric-prometheus-alertmanager
        - name: storage-volume
          persistentVolumeClaim:
            claimName: ric-prometheus-alertmanager
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/kube-state-metrics-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
    component: "kube-state-metrics"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-kube-state-metrics
spec:
  selector:
    matchLabels:
      component: "kube-state-metrics"
      app: prometheus
      release: ric
  replicas: 1
  template:
    metadata:
      labels:
        drax/role: ric
        drax/name: Prometheus
        drax/component-name: prometheus
        drax/component-version: 10.3.1
        component: "kube-state-metrics"
        app: prometheus
        release: ric
        chart: prometheus-10.3.1
        heritage: Helm
    spec:
      serviceAccountName: ric-prometheus-kube-state-metrics
      containers:
        - name: prometheus-kube-state-metrics
          image: "quay.io/coreos/kube-state-metrics:v1.9.1"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: metrics
              containerPort: 8080
            - name: telemetry
              containerPort: 8081
          resources:
            {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/pushgateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
    component: "pushgateway"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
  name: ric-prometheus-pushgateway
spec:
  selector:
    matchLabels:
      component: "pushgateway"
      app: prometheus
      release: ric
  replicas: 1
  template:
    metadata:
      labels:
        drax/role: ric
        drax/name: Prometheus
        drax/component-name: prometheus
        drax/component-version: 10.3.1
        component: "pushgateway"
        app: prometheus
        release: ric
        chart: prometheus-10.3.1
        heritage: Helm
    spec:
      serviceAccountName: ric-prometheus-pushgateway
      containers:
        - name: prometheus-pushgateway
          image: "prom/pushgateway:v1.0.1"
          imagePullPolicy: "IfNotPresent"
          args:
          ports:
            - containerPort: 9091
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          resources:
            {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
---
# Source: ric/charts/acc-sys-dashboard/charts/prometheus/templates/server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: "server"
    app: prometheus
    release: ric
    chart: prometheus-10.3.1
    heritage: Helm
    drax/role: ric
    drax/name: Prometheus
    drax/component-name: prometheus
    drax/component-version: 10.3.1
  name: ric-prometheus-server
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      component: "server"
      app: prometheus
      release: ric
  replicas: 1
  template:
    metadata:
      labels:
        drax/role: ric
        drax/name: Prometheus
        drax/component-name: prometheus
        drax/component-version: 10.3.1
        component: "server"
        app: prometheus
        release: ric
        chart: prometheus-10.3.1
        heritage: Helm
    spec:
      serviceAccountName: ric-prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.3.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "prom/prometheus:v2.15.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=15d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      securityContext:
        fsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: ric-prometheus-server
        - name: storage-volume
          persistentVolumeClaim:
            claimName: ric-prometheus-server
---
# Source: ric/charts/dash-front-back-end/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-dash-front-back-end
  labels:
    helm.sh/chart: dash-front-back-end-0.16.0
    app.kubernetes.io/name: dash-front-back-end
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.16.0-beta1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: WebGUI
    drax/component-name: dash-front-back-end
    drax/component-version: 0.16.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dash-front-back-end
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        helm.sh/chart: dash-front-back-end-0.16.0
        app.kubernetes.io/name: dash-front-back-end
        app.kubernetes.io/instance: ric
        app.kubernetes.io/version: "0.16.0-beta1"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: WebGUI
        drax/component-name: dash-front-back-end
        drax/component-version: 0.16.0
    spec:
      imagePullSecrets:
        - name: accelleran-secret
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: dash-front-back-end
          securityContext:
            runAsUser: 0
          image: "accelleran/dash-front-back-end:0.16.0-beta1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: coreui-config
              mountPath: /usr/src/dashboard/core-ui/build/config.js
              subPath: "config.js"
            - name: server-config
              mountPath: /usr/src/dashboard/server/config.json
              subPath: "config.json"
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
            - name: websocket
              containerPort: 5001
          livenessProbe:
            httpGet:
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              path: /
              port: 5000
          resources:
            {}
      volumes:
        - name: coreui-config
          configMap: 
            name: coreui-config
        - name: server-config
          configMap:
            name: server-config
---
# Source: ric/charts/druid/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-druid
  labels:
    helm.sh/chart: druid-0.4.2
    app.kubernetes.io/name: druid
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.3.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Druid
    drax/component-name: druid
    drax/component-version: 0.4.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: druid
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        helm.sh/chart: druid-0.4.2
        app.kubernetes.io/name: druid
        app.kubernetes.io/instance: ric
        app.kubernetes.io/version: "0.3.0"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: Druid
        drax/component-name: druid
        drax/component-version: 0.4.2
    spec:
      imagePullSecrets:
        - name: accelleran-secret
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: druid
          securityContext:
            runAsUser: 0
          image: "accelleran/dash-druid:0.3.0"
          imagePullPolicy: IfNotPresent
          #command: ["/bin/bash","-c"]
          #args: ['ls && "/opt/druid/bin/start-micro-quickstart &" && until curl -f -X POST -H "Content-Type: application/json" -d @supervisor.json http://localhost:8081/druid/indexer/v1/supervisor; do sleep 6; done && until curl -f -X POST -H "Content-Type: application/json" -d @state-supervisor.json http://localhost:8081/druid/indexer/v1/supervisor; do sleep 6; done && /opt/druid/bin/start-micro-quickstart']
          #command: ["/bin/bash","-c"]
          #args: ['while true; do echo starting; sleep 10; done']
          command: 
            - sh
            - "-c"
            - |
              /bin/bash <<'EOF'

              # Normal script content possible here
              #echo "Hello world"
              #ls -l
              # ((until curl -f -X POST -H "Content-Type: application/json" -d @supervisor.json http://localhost:8081/druid/indexer/v1/supervisor; do sleep 6; done) &) && ((until curl -f -X POST -H "Content-Type: application/json" -d @state-supervisor.json http://localhost:8081/druid/indexer/v1/supervisor; do sleep 6; done) &) && (./bin/start-micro-quickstart)
              ./bin/start-micro-quickstart

              EOF
          volumeMounts:
            - name: acc-druid
              mountPath: /opt/druid/var/druid/
              subPath: data/
            - name: acc-druid
              mountPath: /opt/druid/var/sv/
              subPath: logs/
            - name: acc-druid-sv
              mountPath: /opt/druid/supervisor.json
              subPath: "supervisor.json"
            - name: acc-druid-ssv
              mountPath: /opt/druid/state-supervisor.json
              subPath: "state-supervisor.json"
            - name: conf-brok-jvm
              mountPath: /opt/druid/conf/druid/single-server/micro-quickstart/broker/jvm.config 
              subPath: "jvm.config"
            - name: conf-coord-jvm
              mountPath: /opt/druid/conf/druid/single-server/micro-quickstart/coordinator-overlord/jvm.config
              subPath: "jvm.config"
            - name: conf-hist-jvm
              mountPath: /opt/druid/conf/druid/single-server/micro-quickstart/historical/jvm.config
              subPath: "jvm.config"
            - name: conf-rout-jvm
              mountPath: /opt/druid/conf/druid/single-server/micro-quickstart/router/jvm.config
              subPath: "jvm.config"
            - name: conf-midman-prop
              mountPath: /opt/druid/conf/druid/single-server/micro-quickstart/middleManager/runtime.properties
              subPath: "runtime.properties"
            - name: conf-mima-jvm
              mountPath: /opt/druid/conf/druid/single-server/micro-quickstart/middleManager/jvm.config
              subPath: "jvm.config"
            - name: conf-log4j2
              mountPath: /opt/druid/conf/druid/single-server/micro-quickstart/_common/log4j2.xml
              subPath: "log4j2.xml"
            - name: conf-log4j2-task
              mountPath: /opt/druid/conf/druid/single-server/micro-quickstart/_common/log4j2-task.xml
              subPath: "log4j2-task.xml"
          ports:
            - containerPort: 8888
            - containerPort: 8081
            - containerPort: 8082
            - containerPort: 8083
            - containerPort: 8090
            - containerPort: 2181
            - containerPort: 2888
            - containerPort: 3888
          livenessProbe:
            httpGet:
              path: /
              port: 8081
          readinessProbe:
            httpGet:
              path: /
              port: 8081
          lifecycle:
            postStart:
              exec:
                command: 
                  - sh
                  - "-c"
                  - |
                    /bin/bash <<'EOF'

                    now=$(date)

                    echo "[DRUID-STARTUP-SCRIPT] $now"
                    echo "[DRUID-STARTUP-SCRIPT] -- Script started..."

                    read response <<< $(curl -s localhost:8081/druid/indexer/v1/supervisor)
                              
                    if echo "$response" | grep "test2" ; then
                      echo "[DRUID-STARTUP-SCRIPT] test2 OK"
                      until curl -f -XPOST http://localhost:8081/druid/indexer/v1/supervisor/test2/reset ; do sleep 6; done
                    else
                      echo "[DRUID-STARTUP-SCRIPT] test2 BAD"
                      until curl -f -X POST -H "Content-Type: application/json" -d @supervisor.json http://localhost:8081/druid/indexer/v1/supervisor; do sleep 6; done
                      until curl -f -XPOST http://localhost:8081/druid/indexer/v1/supervisor/test2/reset ; do sleep 6; done
                    fi

                    if echo "$response" | grep "state" ; then
                      echo "[DRUID-STARTUP-SCRIPT] state OK"
                      until curl -f -XPOST http://localhost:8081/druid/indexer/v1/supervisor/state/reset ; do sleep 6; done
                    else
                      echo "[DRUID-STARTUP-SCRIPT] state BAD"
                      until curl -f -X POST -H "Content-Type: application/json" -d @state-supervisor.json http://localhost:8081/druid/indexer/v1/supervisor; do sleep 6; done
                      until curl -f -XPOST http://localhost:8081/druid/indexer/v1/supervisor/state/reset ; do sleep 6; done
                    fi

                    echo "[DRUID-STARTUP-SCRIPT] -- Script finished!"

                    EOF
          resources:
            {}
      volumes:
        - name: acc-druid
          persistentVolumeClaim:
            claimName: ric-druid
        - name: acc-druid-sv
          configMap:
            name: acc-druid-sv
        - name: acc-druid-ssv
          configMap:
            name: acc-druid-ssv
        - name: conf-brok-jvm
          configMap:
            name: conf-brok-jvm
        - name: conf-coord-jvm
          configMap:
            name: conf-coord-jvm
        - name: conf-hist-jvm
          configMap:
            name: conf-hist-jvm
        - name: conf-rout-jvm
          configMap:
            name: conf-rout-jvm
        - name: conf-midman-prop
          configMap:
            name: conf-midman-prop
        - name: conf-mima-jvm
          configMap:
            name: conf-mima-jvm
        - name: conf-log4j2
          configMap:
            name: conf-log4j2
        - name: conf-log4j2-task
          configMap:
            name: conf-log4j2-task
---
# Source: ric/charts/nkafka-helm/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-nkafka-helm
  labels:
    helm.sh/chart: nkafka-helm-0.3.1
    app.kubernetes.io/name: nkafka-helm
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.2.4"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: NKafka
    drax/component-name: nkafka-helm
    drax/component-version: 0.3.1
  #annotations:
  #  "helm.sh/hook": post-install
  #  "helm.sh/hook-weight": "1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nkafka-helm
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        helm.sh/chart: nkafka-helm-0.3.1
        app.kubernetes.io/name: nkafka-helm
        app.kubernetes.io/instance: ric
        app.kubernetes.io/version: "0.2.4"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: NKafka
        drax/component-name: nkafka-helm
        drax/component-version: 0.3.1
    spec:
      imagePullSecrets:
        - name: accelleran-secret
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: check-nats
          image: gcr.io/kubernetes-e2e-test-images/dnsutils:1.3
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -z -v -w1 nats-service.default:4222; do echo $(date) [CHECK-SERVICES] Waiting for NATS at nats-service.default:4222; sleep 2; done']
        - name: check-kafka
          image: gcr.io/kubernetes-e2e-test-images/dnsutils:1.3
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -z -v -w1 ric-kafka.default:9092; do echo $(date) [CHECK-SERVICES] Waiting for Kafka at ric-kafka.default:9092; sleep 2; done']
        - name: init-druid
          securityContext:
            runAsUser: 0
          image: "accelleran/dash-nkafka:0.2.4"
          imagePullPolicy: IfNotPresent
          env:
            - name: RUST_LOG
              value: info
          command:
            - /bin/init-druid.sh
          volumeMounts:
            - name: conf-init-druid
              mountPath: /bin/init-druid.sh
              subPath: init-druid.sh
      containers:
        - name: nkafka-helm
          securityContext:
            runAsUser: 0
          image: "accelleran/dash-nkafka:0.2.4"
          env:
            - name: RUST_LOG
              value: info
          imagePullPolicy: IfNotPresent
          command: ["/nkafka"]
          args: ["producer", "--kafka", "ric-kafka.default:9092", "--pb", "/messages.pb", "--group", "helm-demo", "--rewrite-time", "insert", "--seq-to-map", "--nats", "nats://nats-service.default:4222","--invert", "--replicate", "--threads", "1"]
#          ports:
#            - name: http
#              containerPort: 80
#              protocol: TCP
#          livenessProbe:
#            httpGet:
#              path: /
#              port: http
#          readinessProbe:
#            httpGet:
#              path: /
#              port: http
          resources:
            {}
      volumes:
        - name: conf-init-druid
          configMap:
            defaultMode: 0770
            name: conf-init-druid
---
# Source: ric/charts/vector/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ric-vector
  labels:
    helm.sh/chart: vector-0.1.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Vector
    drax/component-name: vector
    drax/component-version: 0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vector
      app.kubernetes.io/instance: ric
  template:
    metadata:
      labels:
        helm.sh/chart: vector-0.1.0
        app.kubernetes.io/name: vector
        app.kubernetes.io/instance: ric
        app.kubernetes.io/version: "0.1.0"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: Vector
        drax/component-name: vector
        drax/component-version: 0.1.0
    spec:
      imagePullSecrets:
        - name: accelleran-secret
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: vector
          securityContext:
            runAsUser: 0
          image: "accelleran/vector:0.1.0"
          imagePullPolicy: IfNotPresent
          command: ["vector", "-c", "throughput.toml","-c","bler.toml","-c","cqi.toml","-c","uemeasurements.toml"]
          volumeMounts:
            - name: bler-toml
              mountPath: /influx/bler.toml
              subPath: bler.toml
            - name: cqi-toml
              mountPath: /influx/cqi.toml
              subPath: cqi.toml
            - name: throughput-toml
              mountPath: /influx/throughput.toml
              subPath: throughput.toml
            - name: uemeasurements-toml
              mountPath: /influx/uemeasurements.toml
              subPath: uemeasurements.toml
          
              #livenessProbe:
              # httpGet:
              #path: /
              #port: http
              #readinessProbe:
              #httpGet:
              #path: /
              #port: http
          resources:
            {}
      volumes:
        - name: bler-toml
          configMap:
            name: bler-toml
        - name: cqi-toml
          configMap:
            name: cqi-toml
        - name: throughput-toml
          configMap:
            name: throughput-toml
        - name: uemeasurements-toml
          configMap:
            name: uemeasurements-toml
---
# Source: ric/charts/influxdb/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ric-influxdb
  labels:
    helm.sh/chart: influxdb-4.8.5
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: ric
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: influxdb
      app.kubernetes.io/instance: ric
  serviceName: "ric-influxdb"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: influxdb
        app.kubernetes.io/instance: ric
    spec:
      serviceAccountName: ric-influxdb
      containers:
      - name: ric-influxdb
        image: "influxdb:1.8.0-alpine"
        imagePullPolicy: "IfNotPresent"
        resources:
          {}
        ports:
        - name: api
          containerPort: 8086
        - name: rpc
          containerPort: 8088
        livenessProbe:
          httpGet:
            path: /ping
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /ping
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 1
        volumeMounts:
        - name: ric-influxdb-data
          mountPath: /var/lib/influxdb
        - name: config
          mountPath: /etc/influxdb
        - name: init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: config
        configMap:
          name: ric-influxdb
      - name: init
        configMap:
          name: ric-influxdb-init
      # Cannot use existing claim in enterprise mode
  # Must use volume claim template in enterprise mode
  volumeClaimTemplates:
    - metadata:
        name: ric-influxdb-data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: "acc-influxdb"
---
# Source: ric/charts/kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ric-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-2.1.0
    release: ric
    heritage: Helm
    component: server
spec:
  serviceName: ric-zookeeper-headless
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
      release: ric
      component: server
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: zookeeper
        release: ric
        component: server
    spec:
      terminationGracePeriodSeconds: 1800
      securityContext:
        fsGroup: 0
        runAsUser: 0
      containers:

        - name: zookeeper
          image: "zookeeper:3.5.5"
          imagePullPolicy: IfNotPresent
          command: 
             - "/bin/bash"
             - "-xec"
             - "/config-scripts/run"
          ports:
            - name: client
              containerPort: 2181
              protocol: TCP
            - name: election
              containerPort: 3888
              protocol: TCP
            - name: server
              containerPort: 2888
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - sh
                - /config-scripts/ok
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 2
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - sh
                - /config-scripts/ready
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 2
            successThreshold: 1
          env:
            - name: ZK_REPLICAS
              value: "1"
            - name: JMXAUTH
              value: "false"
            - name: JMXDISABLE
              value: "false"
            - name: JMXPORT
              value: "1099"
            - name: JMXSSL
              value: "false"
            - name: ZK_HEAP_SIZE
              value: "1G"
            - name: ZK_SYNC_LIMIT
              value: "10"
            - name: ZK_TICK_TIME
              value: "2000"
            - name: ZOO_AUTOPURGE_PURGEINTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_SNAPRETAINCOUNT
              value: "3"
            - name: ZOO_INIT_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_PORT
              value: "2181"
            - name: ZOO_STANDALONE_ENABLED
              value: "false"
            - name: ZOO_TICK_TIME
              value: "2000"
          resources:
            {}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config-scripts
      volumes:
        - name: config
          configMap:
            name: ric-zookeeper
            defaultMode: 0555
        - name: data
          emptyDir: {}
---
# Source: ric/charts/kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ric-kafka
  labels:
    helm.sh/chart: kafka-0.20.9
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Kafka
    drax/component-name: kafka
    drax/component-version: 0.20.9
    app.kubernetes.io/component: kafka-broker
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: kafka-broker
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: ric
  serviceName: ric-kafka-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: OnDelete
  replicas: 1
  template:
    metadata:
      labels:
        helm.sh/chart: kafka-0.20.9
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: Kafka
        drax/component-name: kafka
        drax/component-version: 0.20.9
        app.kubernetes.io/component: kafka-broker
        app.kubernetes.io/name: kafka
        app.kubernetes.io/instance: ric
    spec:
      containers:
      - name: kafka-broker
        image: "confluentinc/cp-kafka:5.0.1"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          exec:
            command:
              - sh
              - -ec
              - /usr/bin/jps | /bin/grep -q SupportedKafka
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 31090
          name: external-0
        resources:
          {}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: -Xmx1G -Xms1G
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "ric-zookeeper:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data/logs"
        - name: "KAFKA_ADVERTISED_LISTENERS"
          value: "EXTERNAL://{{ .Values.global.kubeIp }}:$((31090 + ${KAFKA_BROKER_ID}))"
        - name: "KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE"
          value: "false"
        - name: "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: KAFKA_JMX_PORT
          value: "5555"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          unset KAFKA_PORT && \
          export KAFKA_BROKER_ID=${POD_NAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_IP}:9092,EXTERNAL://{{ .Values.global.kubeIp }}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: "/opt/kafka/data"
      volumes:
      - name: datadir
        emptyDir: {}
      securityContext:
        runAsUser: 0
      terminationGracePeriodSeconds: 60
---
# Source: ric/charts/loki-stack/charts/loki/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ric-loki
  namespace: default
  labels:
    app: loki
    chart: loki-0.27.1
    release: ric
    heritage: Helm
    helm.sh/chart: loki-0.27.1
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Loki
    drax/component-name: loki
    drax/component-version: 0.27.1
  annotations:
    {}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: loki
      release: ric
  serviceName: ric-loki-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: loki
        name: loki
        release: ric
        helm.sh/chart: loki-0.27.1
        app.kubernetes.io/version: "v1.4.1"
        app.kubernetes.io/managed-by: Helm
        drax/role: ric
        drax/name: Loki
        drax/component-name: loki
        drax/component-version: 0.27.1
      annotations:
        checksum/config: 1c6cbc0af79ac4a29dbb0bc8590fc1a2afd64fa1720a681062357a5afd8c7da1
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: ric-loki
      securityContext:
        fsGroup: 0
        runAsUser: 0
      initContainers:
        []
      containers:
        - name: loki
          image: "grafana/loki:1.4.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/loki/loki.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/loki
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 4800
      volumes:
        - name: config
          secret:
            secretName: ric-loki
        - name: storage
          persistentVolumeClaim:
            claimName: ric-loki
---
# Source: ric/charts/kafka/templates/job-config.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "ric-kafka-config-868f6784"
  labels:
    helm.sh/chart: kafka-0.20.9
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: Kafka
    drax/component-name: kafka
    drax/component-version: 0.20.9
    app.kubernetes.io/component: kafka-config
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: ric
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kafka-config
        app.kubernetes.io/name: kafka
        app.kubernetes.io/instance: ric
    spec:
      restartPolicy: OnFailure
      volumes:
        - name: config-volume
          configMap:
            name: ric-kafka-config
            defaultMode: 0744
      containers:
        - name: ric-kafka-config
          image: "confluentinc/cp-kafka:5.0.1"
          command: ["/usr/local/script/runtimeConfig.sh"]
          volumeMounts:
            - name: config-volume
              mountPath: "/usr/local/script"
---
# Source: ric/charts/acc-sys-dashboard/charts/metrics-server/templates/metrics-api-service.yaml
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ric
    heritage: Helm
    helm.sh/chart: metrics-server-2.9.0
    app.kubernetes.io/version: "0.3.6"
    app.kubernetes.io/managed-by: Helm
    drax/role: ric
    drax/name: MetricsServer
    drax/component-name: metrics-server
    drax/component-version: 2.9.0
spec:
  service:
    name: ric-metrics-server
    namespace: default
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100

