global:
  # Kubernetes advertise IP
  #   Description:  Supply the Kubernetes Advertise address of your Kubernetes cluster.
  #                 This is used by some services that are exposed via a nodePort.
  #
  #   Value type:   string
  #
  kubeIp: "10.20.20.20"


  # dRAX Specific Node Selector
  #   Description:  This is a special nodeSelector field implemented for the
  #                 Accelleran RIC Helm charts. You need to first label your
  #                 node in Kubernetes with a label "draxName" and give it a
  #                 <value>. For example for node <node_name>, you can use the
  #                 following command to label it:
  #                 kubectl label node <node_name> draxName=<value>.
  #                 You can then enabled this feature by setting
  #                 "draxNodeSelectorEnabled" to "true" (as a string with quotes!).
  #                 The in "draxName" set the value of the label you chose for
  #                 the node. This will in effect install all the RIC Application
  #                 on that node, without the need to edit all individual helm
  #                 charts. In case you want to add other nodeSelector options,
  #                 you have to add them to the helm chart specific values files.
  #
  #   Value type:   string
  #
  draxNodeSelectorEnabled: "false"
  draxName: "main"


  # 4G/5G Options
  #   Description:  Depending on the product bought, you may enable or disable the accompanying features.
  #
  #   Value type:   bool
  #
  enable4G: true
  enable5G: false


  # Accelleran License
  #   Description:  In order to use the Accelleran products, you need to have a license from Accelleran.
  #                 Please contact Accelleran to get the license.
  #                 The license file should be saved as a Kubernetes secret. The name of the secret should be
  #                 supplied here under the "licenseSecretName" field.
  #                 To create the secret you can use the following command:
  #                 kubectl create secret generic accelleran-license --from-file=license.crt
  #
  # Value type:     enabled: string
  #                 licenseSecretName: string
  #
  accelleranLicense:
    enabled: "true"
    licenseSecretName: "accelleran-license"

acc-kafka:
  enabled: true
  env:
    KAFKA_ADVERTISED_PORT: "31090"
    KAFKA_ADVERTISED_HOST_NAME: "{{ .Values.global.kubeIp }}"
    KAFKA_ZOOKEEPER_CONNECT: "{{ .Release.Name }}-zookeeper.{{ .Release.Namespace }}:2181"
    KAFKA_BROKER_ID: "0"
    KAFKA_CREATE_TOPICS: "accelleran.drax.4g.ric.raw.network_state:1:1,accelleran.drax.4g.ric.raw.messages:1:1,accelleran.drax.4g.ric.raw.service_discovery:1:1,accelleran.drax.4g.ric.raw.ue_measurements:1:1,accelleran.drax.5g.ric.raw.cu_state:1:1,accelleran.drax.5g.ric.raw.ue_measurements:1:1,accelleran.drax.5g.ric.raw.pm_counters:1:1,accelleran.drax.5g.ric.raw.messages:1:1,accelleran.drax.5g.ric.processed.pm_counters:1:1"
    KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    JMX_PORT: "9010"

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  zookeeper:
    enabled: true

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

acc-kminion:
  enabled: true

  initConfig:
    kafkaUrl: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"
    kafkaTopicsCheck: "accelleran.drax.4g.ric.raw.messages,accelleran.drax.4g.ric.raw.service_discovery,accelleran.drax.4g.ric.raw.ue_measurements,accelleran.drax.5g.ric.raw.cu_state,accelleran.drax.5g.ric.raw.ue_measurements,accelleran.drax.5g.ric.raw.pm_counters,accelleran.drax.5g.ric.raw.messages"

  kafka:
    brokers: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

nkafka-4g:
  enabled: true

  accelleranLicense:
    enabled: "{{ .Values.global.accelleranLicense.enabled }}"
    licenseSecretName: "{{ .Values.global.accelleranLicense.licenseSecretName }}"

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  # AUTOGENERATED DONT EDIT
  kafkaUrl: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"

  # AUTOGENERATED DONT EDIT
  natsUrl: "nats-service.{{ .Release.Namespace }}:4222"

  configs:
    # If set to false, will use the ueRicId. If set to true, will use the generic UE ID shown on teh dashboard. WARNING: if using generic UE ID, you will not have the ueRicId which is necessary for some dRAX commands.
    genericUeId: "false"
    # How vectors will be published to JSON Kafka messages. Default set to none.
    seqMapper: "none"
    # The log level can be commented out, or set to info or debug
    logLevel: info
    ueRicIdName: "ueRicId"
    ueDraxIdName: "ueDraxId"


acc-sys-dashboard:
  enabled: true
  grafana:
    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

    datasources:
      # AUTOGENERATED DONT EDIT
      prometheusUrl: http://{{ .Release.Name }}-prometheus-server.{{ .Release.Namespace }}:80

      # AUTOGENERATED DONT EDIT
      lokiUrl: http://{{ .Release.Name }}-loki.{{ .Release.Namespace }}:3100

      # AUTOGENERATED DONT EDIT
      influxdbUrl: http://{{ .Release.Name }}-influxdb-api.{{ .Release.Namespace }}:8086

  prometheus:
    alertmanager:
      draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
      draxNodeSelector:
        draxName: "{{ .Values.global.draxName }}"
    kubeStateMetrics:
      draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
      draxNodeSelector:
        draxName: "{{ .Values.global.draxName }}"
    pushgateway:
      draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
      draxNodeSelector:
        draxName: "{{ .Values.global.draxName }}"
    server:
      draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
      draxNodeSelector:
        draxName: "{{ .Values.global.draxName }}"

      # Retention policy on the Prometheus storage
      retention: 15d

    extraScrapeConfigs: |
      - job_name: 5gPmCountersXapp
        scrape_interval: 2s
        static_configs:
          - targets:
            - "{{ .Values.global.kubeIp }}:30515"
      - job_name: kafkaMonitoringJmx
        static_configs:
          - targets:
            - "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:5556"
      - job_name: kafkaMonitoringKminion
        static_configs:
          - targets:
            - "ric-acc-kminion:8080"
      - job_name: nats4GMonitoring
        static_configs:
          - targets:
            - "nats-service:7777"
      - job_name: nats5GMonitoring
        static_configs:
          - targets:
            - "ric-nats-5g:7777"

  kube-eagle:
    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

  metrics-server:
    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"



loki-stack:
  fluent-bit:
    loki:
      # AUTOGENERATED DONT EDIT
      serviceName: "{{ .Release.Name }}-loki.{{ .Release.Namespace }}"  # Defaults to "${RELEASE}-loki" if not set
  loki:
    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

    config:
      table_manager:
        # Retention polocy for logs in Loki
        retention_deletes_enabled: true
        # Must be a multiple of 168h
        retention_period: 672h

dash-front-back-end:
  enabled: true
  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  service:
    # The internal port used by WebGUI, default is 5000
    port: 5000

    # The external nodePort used by the WebGUI, default is 31315
    nodePort: 31315

  initConfig:
    kafkaUrl: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"

  config:
    # AUTOGENERATED DONT EDIT
    config_id: "production"

    # The namespace where the L3 pod will be running
    defaultServiceNamespace: "default"

    # The namespace where the ORAN-CLUSTERCONTROLLER will be running
    defaultOranNamespace: "default"

    # AUTOGENERATED DONT EDIT
    grafanaURL: "{{ .Values.global.kubeIp }}"

    # The external nodePort used by Grafana, default is 30300
    grafanaPort: "30300"

    # AUTOGENERATED DONT EDIT
    nodeApiURL: "{{ .Values.global.kubeIp }}"

    nodePort: "31315"
    kafkaUrl: "{{ .Values.global.kubeIp }}"
    kafkaPort: "31090"
    svcOrchestratorHost: "acc-service-orchestrator"
    svcOrchestratorPort: "80"
    svcMonitorHost: "acc-service-monitor"
    svcMonitorPort: "80"
    pcixAppPodName: "accelleran-drax-pci-010-pci-xapp-api"
    pcixAppPort: "80"
    ksqldbPodName: "{{ .Values.global.kubeIp }}"
    ksqldbPort: "30533"
    LteRadioControllerLabel: "4G-Radio-Controller"

    # The IP that is set here must be globally available so that any browser can reach it, so that the front end can communicate to the backend. Preferable, use the publicly exposed IP that can reach the Kubernetes Advertise IP. If only a private Kubernetes Advertise IP is set here, the dRAX Dashbaord will only work when openning a browser on a computer that can reach the private Kuebrnetes Advertise IP.
    apiUrl: "{{ .Values.global.kubeIp }}"
    websocketPort: "31316"
    topologyExpired: 5000
    kafkaTopics:
      - "accelleran.drax.5g.ric.raw.cu_state"
      - "accelleran.drax.5g.ric.raw.ue_measurements"
      - "accelleran.drax.4g.ric.raw.network_state"
      - "accelleran.drax.all.ric.processed.anr"

acc-service-monitor:
  # Enable/disable installation of the Service Monitor
  enabled: true

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  monitoredNamespaces: "{{ .Release.Namespace }}"

acc-service-orchestrator:
  # Enable/disable installation of the Service Orchestrator
  enabled: true

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  kubeIp: "{{ .Values.global.kubeIp }}"

acc-state-db:
  # Enable/disable installation of the State DB
  enabled: true

  accelleranLicense:
    enabled: "false"
    licenseSecretName: "{{ .Values.global.accelleranLicense.licenseSecretName }}"

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  strategyType: Recreate

  xapp-redis:
    nameOverride: "acc-state-db-redis"
    # AUTOGENERATED DONT EDIT
    enabled: true

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

  xapp-api:
    nameOverride: "acc-state-db-api"
    # AUTOGENERATED DONT EDIT
    enabled: true
    redis:
      # AUTOGENERATED DONT EDIT
      url: "{{ .Release.Name }}-acc-state-db-redis.{{ .Release.Namespace }}"

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

  # AUTOGENERATED DONT EDIT
  initConfig:
    kafkaUrl: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"
    kafkaTopicsCheck: "accelleran.drax.4g.ric.raw.messages,accelleran.drax.4g.ric.raw.service_discovery,accelleran.drax.4g.ric.raw.ue_measurements,accelleran.drax.5g.ric.raw.cu_state,accelleran.drax.5g.ric.raw.ue_measurements,accelleran.drax.5g.ric.raw.pm_counters,accelleran.drax.5g.ric.raw.messages"

  xappFrameworkConfig:
    redisUrl: "{{ .Release.Name }}-acc-state-db-redis.{{ .Release.Namespace }}"
    redisPort: 6379
    # If you want to flush the existing config, and use the config on helm install, enable the following
    flushOnDeployment: false

  xappConfig:
    apiGatewayUrl: '{{ .Values.global.kubeIp }}'
    apiGatewayPort: 31315
    logLevel: 20  # CRITICAL=50, ERROR=40, WARNING=30, INFO=20, DEBUG=10, NOTSET=0
    stateDbUrl: '{{ .Values.global.kubeIp }}'
    stateDbPort: 32000
    kafkaStateTopic: 'accelleran.drax.4g.ric.raw.network_state'
    kafkaBeaconTopic: 'accelleran.drax.4g.ric.raw.service_discovery'
    kafkaUeMeasTopic: 'accelleran.drax.4g.ric.raw.ue_measurements'
    kafkaUrl: '{{ .Values.global.kubeIp }}'
    kafkaPort: 31090
    expire_timer: 5000000000
    periodicPublish: true
    publishInterval: 2  # in seconds

influxdb:
  # Enable/disable installation of InfluxDB
  enabled: true

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

vector:
  # Enable/disable installation of Vector 
  enabled: true

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  initConfig:
    kafkaUrl: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"
    influxdbService: "{{ .Release.Name }}-influxdb-api.{{ .Release.Namespace }}:8086"

  config:
    kafka:
      hostname: "{{ .Values.global.kubeIp }}"
      port: 31090
    influx:
      hostname: "{{ .Values.global.kubeIp }}"
      port: 30303

vectorfiveg:
  enabled: true

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  config:
    influx:
      database: db_5G
      hostname: "{{ .Values.global.kubeIp }}"
      namespace: uemeasurement
      password: password
      port: 30303
      type: influxdb_logs
      username: admin
    kafka:
      hostname: "{{ .Values.global.kubeIp }}"
      port: 31090
      topic: accelleran.drax.5g.ric.raw.ue_measurements
      pmCounterTopic: accelleran.drax.5g.ric.raw.pm_counters

  initConfig:
    kafkaUrl: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"
    influxdbService: "{{ .Release.Name }}-influxdb-api.{{ .Release.Namespace }}:8086"

  developerMode:
    enabled: false

acc-fiveg-pmcounters:
  enabled: true

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  strategyType: Recreate

  # AUTOGENERATED DONT EDIT
  initConfig:
    kafkaUrl: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"
    kafkaTopicsCheck: "accelleran.drax.4g.ric.raw.messages,accelleran.drax.4g.ric.raw.service_discovery,accelleran.drax.4g.ric.raw.ue_measurements,accelleran.drax.5g.ric.raw.cu_state,accelleran.drax.5g.ric.raw.ue_measurements,accelleran.drax.5g.ric.raw.pm_counters,accelleran.drax.5g.ric.raw.messages"

  draxConfig:
    - name: 'KAFKA_URL'
      type: string
      value: '{{ .Values.global.kubeIp }}'
    - name: 'KAFKA_PORT'
      type: string
      value: '31090'

acc-5g-infrastructure:
  nats:
    enabled: true

    nameOverride: "nats-5g"

    service:
      serviceName: '{{ include "nats.fullname" . }}'
      type: NodePort
      client:
        nodePort: 31100

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

  redis:
    enabled: true

    nameOverride: "redis-5g"

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

    # Backup the redis db when the pod is terminated
    backup:
      # Enabled or disable this feature
      enabled: true
      # Choose after how many days should the backed up DBs be deleted
      deleteAfterDay: 7

    service:
      type: NodePort
      port: 6379
      nodePort: 32200
      name: "redisport"
      serviceName: '{{ include "redis.fullname" . }}'

    persistence:
      accessModes:
        - ReadWriteMany
      enabled: true
      size: 10Gi
      storageClassName: acc-redis-5g
      type: pvc
      hostPath: /opt/pods/redis-storage-5g

  metallb:
    # This installs the MetalLB LoadBalancer. Please make sure to do the required preparation before enabling the installation:
    # https://metallb.universe.tf/installation/
    # If you have your own Load Balancer in Kubernetes, you can skip this installation - set it to false.
    enabled: true

  # Autoconfigure the MetalLB, give a range of IPs which the load balancer can give out
    configInline:
      address-pools:
        - name: default
          protocol: layer2
          addresses:
            - 10.55.1.20-10.55.1.60

  jaeger:
    # For tracing purposes
    enabled: true

nkafka-5g:
  accelleranLicense:
    enabled: "{{ .Values.global.accelleranLicense.enabled }}"
    licenseSecretName: "{{ .Values.global.accelleranLicense.licenseSecretName }}"

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  kafkaUrl: "{{ .Release.Name }}-acc-kafka.{{ .Release.Namespace }}:9092"
  natsUrl: "{{ .Release.Name }}-nats-5g.{{ .Release.Namespace }}:4222"

  initConfig:
    kafkaTopicsCheck: "accelleran.drax.5g.ric.raw.messages,accelleran.drax.5g.ric.raw.pm_counters,accelleran.drax.5g.ric.raw.ue_measurements,accelleran.drax.5g.ric.raw.cu_state"

  configs:
    logLevel: info

  options:
    - name: "topic"
      value: "accelleran.drax.5g.ric.raw.messages"
    - name: "rewrite_timestamp"
      value: "insert"
    - name: "max_len"
      value: "1048756"
    - name: "timeout"
      value: "1000"
    - name: "mask"
      value: "true"
    - name: "seq_mapper"
      value: "none"
    - name: "threads"
      value: "1"
    - name: "invert_service"
      value: "false"
    - name: "replicate_messages"
      value: "false"
    - name: "compact"
      value: "true"
    - name: "offset"
      value: "0"
    - name: "subject"
      value: "topic"

acc-4g-infrastructure:
  nats:
    enabled: true

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

  redis:
    enabled: true

    # The External IP of where NATS is installed
    natsIp: "{{ .Values.global.kubeIp }}"

    # Backup the redis db when the pod is terminated
    backup:
      # Enabled or disable this feature
      enabled: true

      # Choose after how many days should the backed up DBs be deleted
      deleteAfterDay: 7

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

  provisioner-dhcp:
    # To enable/disable the installation of the dRAX Provisioner DHCP
    enabled: true

    # The configuration file for the dRAX Provisioner DHCP
    # interface: The interface used by the Kubernetes cluster
    # provisionerIp: The IP of the Kubernetes cluster
    # provisionerPort: The port of the Provisioner, see the provisioner setting in this file to check which port is used
    # staticRoute: If you install provisioner-dhcp and the cells are on a seperate network than the privisioner, set this to true
    # staticRouteNetwork: Set the network where the provisioner is, example 10.20.20.0/24
    # staticRouteGateway: Set the gateway to be used by the cells to reach the provisioner 10.22.10.52
    configuration:
      interface: eno1
      provisionerIp: "{{ .Values.global.kubeIp }}"
      provisionerPort: 31610
      # If you enable staticRoute, then provide the network and gateway values
      staticRoute: false
      staticRouteNetwork: 10.20.20.0/24
      staticRouteGateway: 10.22.10.52

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

  provisioner:
    # To enable/disable the installation of the dRAX Provisioner DHCP
    enabled: true

    accelleranLicense:
      enabled: "{{ .Values.global.accelleranLicense.enabled }}"
      licenseSecretName: "{{ .Values.global.accelleranLicense.licenseSecretName }}"

    # Log level of the provisioner
    logLevel: "debug"

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

    # The nginx configuration
    nginx:
      draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
      draxNodeSelector:
        draxName: "{{ .Values.global.draxName }}"

  ntp-server:
    # To enable/disable the installation of the dRAX NTP Server for cells
    enabled: true

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

  configurator:
    # To enabled or disable the installation of the dRAX Configurator
    enabled: true

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

    provisioner:
      # Enable if the provisioner is installed as well
      enabled: true

      draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
      draxNodeSelector:
        draxName: "{{ .Values.global.draxName }}"

      # Pre-provision the cells, create a list of serial: name as shown below
      cells:
        exampleSerial1: exampleName100
        exampleSerial2: exampleName200

      # Loki hostname and port
      loki:
        hostname: "{{ .Values.global.kubeIp }}"
        port: "30302"

      # Redis hostname and port
      redis:
        hostname: "{{ .Values.global.kubeIp }}"
        port: "32000"

      # provisioner external (nodePort) ip and port
      provisionerApi: "{{ .Values.global.kubeIp }}"
      provisionerPort: 31610

  4g-radio-controller:
    # Enable or disable the component
    enabled: true

    accelleranLicense:
      enabled: "{{ .Values.global.accelleranLicense.enabled }}"
      licenseSecretName: "{{ .Values.global.accelleranLicense.licenseSecretName }}"

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

    # Set pull policy for the 4G Radio Controller
    image:
      pullPolicy: IfNotPresent

    # Pre- and Post- start jobs that can be enabled or disabled
    jobs:
      # Set enabled to true if you wish the 4G Radio Controller to be automatically configured on deployment.
      # If set to false, you have to configure it from the dRAx Dashbaord or using a NetConf RPC after the dRAX is deployed
      netconfConfig:
        enabled: true
        # If the 4G Radio Controller is already configured in REDIS from a previous installation, you can delete that configuration if you want using the following job
        deleteExistingConfig: false
      # Make sure dRAX-4G Redis is up and running before starting.
      checkRedis:
        enabled: true

    config:
      # If you are using the secure HTTPS protocol for the Kubernetes API, enable this option
      https: true

      # The orchestratorUrl is used for contacting the Kubernetes API, hence this should be the Kubernetes Advertise IP
      orchestratorUrl: "{{ .Values.global.kubeIp }}"

      # Choose the namespace where the Layer3 pods will be installed. By default its in teh same namespace as dRAX
      l3Namespace: "{{ .Release.Namespace }}"

      # Choose the Docker image pull policy for the Layer 3
      l3PullPolicy: "IfNotPresent"

      # Enable if you want the Layer3 pods to be deleted once dRAX is deleted
      cleanup: true

      # Redis settings, can be reached through Kubernetes Advertise address, or can set this manually if the node IP where Redis is installed is known. This can be in situations where we want the Layer3 to communicate to Redis on the same node for latency purposes
      redis:
        hostname: "{{ .Values.global.kubeIp }}"
        port: 32000

  acc-l2-update:
    # Enable the server that serves the Layer2 update files
    enabled: true

    accelleranLicense:
      enabled: "{{ .Values.global.accelleranLicense.enabled }}"
      licenseSecretName: "{{ .Values.global.accelleranLicense.licenseSecretName }}"

    draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
    draxNodeSelector:
      draxName: "{{ .Values.global.draxName }}"

    image:
      pullPolicy: IfNotPresent

ingress:
  enabled: true
  namespace: "default"

  ingress-nginx:
    controller:
      service:
        type: "NodePort"
        nodePorts:
          http: 80