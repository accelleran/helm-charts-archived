apiVersion: v1
kind: ConfigMap
metadata:
  name: acc-druid-ssv
  labels:
    {{- include "druid-chart.labels" . | nindent 4 }}
data:
  state-supervisor.json: |
    {
      "dataSchema": {
        "dataSource": "state",
        "timestampSpec": {
          "column": "timestamp",
          "format": "nano",
          "missingValue": null
        },
        "dimensionsSpec": {
          "dimensions": [
            {
              "type": "string",
              "name": "service.id",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "service.serviceType",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            },
            {
              "type": "string",
              "name": "service.state",
              "multiValueHandling": "SORTED_ARRAY",
              "createBitmapIndex": true
            }
          ],
          "dimensionExclusions": [
            "timestamp"
          ]
        },
        "metricsSpec": [],
        "granularitySpec": {
          "type": "uniform",
          "segmentGranularity": "HOUR",
          "queryGranularity": {
            "type": "none"
          },
          "rollup": false,
          "intervals": null
        },
        "transformSpec": {
          "filter": {
            "type": "not",
            "field": {
              "type": "selector",
              "dimension": "service.id",
              "value": null,
              "extractionFn": null
            }
          },
          "transforms": []
        }
      },
      "ioConfig": {
        "topic": "test2",
        "inputFormat": {
          "type": "json",
          "flattenSpec": {
            "useFieldDiscovery": true,
            "fields": [
              {
                "type": "path",
                "name": "service.id",
                "expr": "$.service.id"
              },
              {
                "type": "path",
                "name": "service.serviceType",
                "expr": "$.service.serviceType"
              },
              {
                "type": "path",
                "name": "service.state",
                "expr": "$.service.state"
              }
            ]
          },
          "featureSpec": {}
        },
        "replicas": 1,
        "taskCount": 1,
        "taskDuration": "PT3600S",
        "consumerProperties": {
          "bootstrap.servers": "{{ tpl .Values.kafkaUrl . }}"
        },
        "pollTimeout": 100,
        "startDelay": "PT5S",
        "period": "PT30S",
        "useEarliestOffset": false,
        "completionTimeout": "PT1800S",
        "lateMessageRejectionPeriod": null,
        "earlyMessageRejectionPeriod": null,
        "lateMessageRejectionStartDateTime": null,
        "stream": "test2",
        "useEarliestSequenceNumber": false,
        "type": "kafka"
      },
      "tuningConfig": {
        "type": "kafka",
        "maxRowsInMemory": 1000000,
        "maxBytesInMemory": 0,
        "maxRowsPerSegment": 5000000,
        "maxTotalRows": null,
        "intermediatePersistPeriod": "PT10M",
        "basePersistDirectory": "/opt/druid/var/tmp/druid-realtime-persist1724199235833846327",
        "maxPendingPersists": 0,
        "indexSpec": {
          "bitmap": {
            "type": "concise"
          },
          "dimensionCompression": "lz4",
          "metricCompression": "lz4",
          "longEncoding": "longs"
        },
        "indexSpecForIntermediatePersists": {
          "bitmap": {
            "type": "concise"
          },
          "dimensionCompression": "lz4",
          "metricCompression": "lz4",
          "longEncoding": "longs"
        },
        "buildV9Directly": true,
        "reportParseExceptions": false,
        "handoffConditionTimeout": 0,
        "resetOffsetAutomatically": false,
        "segmentWriteOutMediumFactory": null,
        "workerThreads": null,
        "chatThreads": null,
        "chatRetries": 8,
        "httpTimeout": "PT10S",
        "shutdownTimeout": "PT80S",
        "offsetFetchPeriod": "PT30S",
        "intermediateHandoffPeriod": "P2147483647D",
        "logParseExceptions": false,
        "maxParseExceptions": 2147483647,
        "maxSavedParseExceptions": 0,
        "skipSequenceNumberAvailabilityCheck": false,
        "repartitionTransitionDuration": "PT120S"
      },
      "type": "kafka"
    }

