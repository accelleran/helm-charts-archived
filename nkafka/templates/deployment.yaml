apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nkafka-helm.fullname" . }}
  labels:
    {{- include "nkafka-helm.labels" . | nindent 4 }}
  #annotations:
  #  "helm.sh/hook": post-install
  #  "helm.sh/hook-weight": "1"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "nkafka-helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "nkafka-helm.labels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "nkafka-helm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: check-nats
          image: gcr.io/kubernetes-e2e-test-images/dnsutils:1.3
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -z -v -w1 {{ tpl .Values.initConfigs.natsService . }}; do echo $(date) [CHECK-SERVICES] Waiting for NATS at {{ tpl .Values.initConfigs.natsService . }}; sleep 2; done']
        - name: check-kafka
          image: gcr.io/kubernetes-e2e-test-images/dnsutils:1.3
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -z -v -w1 {{ tpl .Values.initConfigs.kafkaService . }}; do echo $(date) [CHECK-SERVICES] Waiting for Kafka at {{ tpl .Values.initConfigs.kafkaService . }}; sleep 2; done']
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ tpl .Values.version . }}"
          env:
            - name: RUST_LOG
              value: info
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: conf-4g-config
              mountPath: /4GConfig.toml 
              subPath: "4GConfig.toml"
          command: ["/nkafka"]
          args: ["--kafka", "{{ tpl .Values.kafkaUrl . }}", "--group", "helm-demo", "--nats", "{{ tpl .Values.natsUrl . }}", "-f", "/4GConfig.toml", "producer"]
#          ports:
#            - name: http
#              containerPort: 80
#              protocol: TCP
#          livenessProbe:
#            httpGet:
#              path: /
#              port: http
#          readinessProbe:
#            httpGet:
#              path: /
#              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: conf-4g-config
          configMap:
            name: conf-4g-config

