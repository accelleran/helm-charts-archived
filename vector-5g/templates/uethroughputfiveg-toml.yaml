apiVersion: v1
kind: ConfigMap
metadata:
  name: uethroughputfiveg-toml
data:
  uethroughputfiveg.toml: |-
    [sources.inUeThroughput]
      bootstrap_servers = "{{ tpl .Values.config.kafka.hostname . }}:{{ .Values.config.kafka.port}}"
      group_id = "VECTOR_5G_UE_THROUGHPUT"
      topics = ["{{ tpl .Values.config.kafka.pmCounterTopic . }}"]
      type = "kafka"
    
    [transforms.parseJsonUeThroughput]
      type = "json_parser"
      inputs = ["inUeThroughput"]
      drop_field = false # optional, default
      drop_invalid = true
      field = "message" # optional, default
  
    [transforms.filterUeThroughput]
      # General
      type = "filter"
      inputs = ["parseJsonUeThroughput"]
      condition."PmReportingCountersListData.exists" = true

    [transforms.parseUeThroughput]
      inputs = ["filterUeThroughput"]
      type   = "json_parser"
      field  = "PmReportingCountersListData"
      drop_field = false # optional, default
      drop_invalid = true

    [transforms.filterNatsTopic]
      type = "filter"                                                                                                    
      inputs = ["parseUeThroughput"]                                                                                       
      condition."topic.contains" = ".CUUP_COUNTERS_INFO"

    [transforms.luaParseThr]
      type = "lua" # required
      inputs = ["filterNatsTopic"] # required
      version = "2" # required

      # Hooks
      hooks.process = """
      function (event, emit)
        m = {}
        m.log = {
              timestamp = os.date("!*t"),
              ueId = "",
              measurement = {}
             }
        if event.log.PmReportingCountersListData.items ~= nil
          for k, v in pairs(event.log.PmReportingCountersListData.items) do
            temp = m
            if v.CounterId == "UL_GTP_THP_SAMPLES" then
              temp.log.measurement.ulGtpThpSamples = event.log.PmReportingCountersListData.items[k].ValueList.items["0"]
            end
            if v.CounterId == "DL_GTP_THP_SAMPLES" then
              temp.log.measurement.dlGtpThpSamples = event.log.PmReportingCountersListData.items[k].ValueList.items["0"]
            end
            if v.CounterId == "DL_GTP_THP" then
              temp.log.measurement.dlGtpThp = event.log.PmReportingCountersListData.items[k].ValueList.items["0"]
            end
            if v.CounterId == "UL_GTP_THP" then
              temp.log.measurement.ulGtpThp = event.log.PmReportingCountersListData.items[k].ValueList.items["0"]
            end
            temp.log.ueId = event.log.PmReportingCountersListData.items[k].InstanceId
            temp.log.cuupId = event.log.topic:match("[^.]*")
          end
          emit(temp)
        end
      end
      """

    [sinks.outUeThroughput]
      # General
      bucket = "vector-bucket"
      tags = ["cuupId", "ueId"]
      database = "{{ .Values.config.influx.database }}"
      endpoint =  "http://{{ tpl .Values.config.influx.hostname . }}:{{ .Values.config.influx.port}}/"
      inputs = ["luaParseThr"]
      namespace = "{{ .Values.config.influx.namespace }}"
      type = "{{ .Values.config.influx.type }}"
      username = "{{ .Values.config.influx.username }}"
      password = "{{ .Values.config.influx.password }}"



